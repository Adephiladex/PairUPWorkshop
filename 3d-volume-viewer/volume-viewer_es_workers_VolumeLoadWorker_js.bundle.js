/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "?34f5":
/*!**********************!*\
  !*** http (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4407":
/*!***********************!*\
  !*** https (ignored) ***!
  \***********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?e0d3":
/*!*********************!*\
  !*** url (ignored) ***!
  \*********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?82fe":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "../volume-viewer/es/Channel.js":
/*!**************************************!*\
  !*** ../volume-viewer/es/Channel.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Channel)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"../volume-viewer/node_modules/three/build/three.module.js\");\n/* harmony import */ var _Histogram_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Histogram.js */ \"../volume-viewer/es/Histogram.js\");\n/* harmony import */ var _Lut_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Lut.js */ \"../volume-viewer/es/Lut.js\");\n\n\n\n// Data and processing for a single channel\nclass Channel {\n  constructor(name) {\n    this.loaded = false;\n    this.imgData = {\n      data: new Uint8ClampedArray(),\n      width: 0,\n      height: 0\n    };\n    this.rawMin = 0;\n    this.rawMax = 255;\n\n    // on gpu\n    this.dataTexture = new three__WEBPACK_IMPORTED_MODULE_2__.DataTexture(new Uint8Array(), 0, 0);\n    this.lutTexture = new three__WEBPACK_IMPORTED_MODULE_2__.DataTexture(new Uint8Array(_Lut_js__WEBPACK_IMPORTED_MODULE_1__.LUT_ARRAY_LENGTH), 256, 1, three__WEBPACK_IMPORTED_MODULE_2__.RGBAFormat, three__WEBPACK_IMPORTED_MODULE_2__.UnsignedByteType);\n    this.lutTexture.minFilter = this.lutTexture.magFilter = three__WEBPACK_IMPORTED_MODULE_2__.LinearFilter;\n    this.lutTexture.generateMipmaps = false;\n    this.volumeData = new Uint8Array();\n    this.name = name;\n    this.histogram = new _Histogram_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](new Uint8Array());\n    this.dims = [0, 0, 0];\n\n    // intensity remapping lookup table\n    this.lut = new _Lut_js__WEBPACK_IMPORTED_MODULE_1__.Lut().createFromMinMax(0, 255);\n\n    // per-intensity color labeling (disabled initially)\n    this.colorPalette = new Uint8Array(_Lut_js__WEBPACK_IMPORTED_MODULE_1__.LUT_ARRAY_LENGTH).fill(0);\n    // store in 0..1 range. 1 means fully colorPalette, 0 means fully lut.\n    this.colorPaletteAlpha = 0.0;\n  }\n\n  // rgbColor is [0..255, 0..255, 0..255]\n  combineLuts(rgbColor, out) {\n    const ret = out ? out : new Uint8Array(_Lut_js__WEBPACK_IMPORTED_MODULE_1__.LUT_ARRAY_LENGTH);\n    if (!rgbColor) {\n      return ret;\n    }\n    const rgb = [rgbColor[0] / 255.0, rgbColor[1] / 255.0, rgbColor[2] / 255.0];\n    // colorPalette*alpha + rgb*lut*(1-alpha)\n    // a tiny bit faster for the edge cases\n    if (this.colorPaletteAlpha === 1.0) {\n      ret.set(this.colorPalette);\n    } else if (this.colorPaletteAlpha === 0.0) {\n      ret.set(this.lut.lut);\n      for (let i = 0; i < _Lut_js__WEBPACK_IMPORTED_MODULE_1__.LUT_ARRAY_LENGTH / 4; ++i) {\n        ret[i * 4 + 0] *= rgb[0];\n        ret[i * 4 + 1] *= rgb[1];\n        ret[i * 4 + 2] *= rgb[2];\n      }\n    } else {\n      for (let i = 0; i < _Lut_js__WEBPACK_IMPORTED_MODULE_1__.LUT_ARRAY_LENGTH / 4; ++i) {\n        ret[i * 4 + 0] = this.colorPalette[i * 4 + 0] * this.colorPaletteAlpha + this.lut.lut[i * 4 + 0] * (1.0 - this.colorPaletteAlpha) * rgb[0];\n        ret[i * 4 + 1] = this.colorPalette[i * 4 + 1] * this.colorPaletteAlpha + this.lut.lut[i * 4 + 1] * (1.0 - this.colorPaletteAlpha) * rgb[1];\n        ret[i * 4 + 2] = this.colorPalette[i * 4 + 2] * this.colorPaletteAlpha + this.lut.lut[i * 4 + 2] * (1.0 - this.colorPaletteAlpha) * rgb[2];\n        ret[i * 4 + 3] = this.colorPalette[i * 4 + 3] * this.colorPaletteAlpha + this.lut.lut[i * 4 + 3] * (1.0 - this.colorPaletteAlpha);\n      }\n    }\n    this.lutTexture.image.data.set(ret);\n    this.lutTexture.needsUpdate = true;\n    return ret;\n  }\n  setRawDataRange(min, max) {\n    // remap the lut which was based on rawMin and rawMax to new min and max\n    // If either of the min/max ranges are both zero, then we have undefined behavior and should\n    // not remap the lut.  This situation can happen at first load, for example,\n    // when one channel has arrived but others haven't.\n    if (!(this.rawMin === 0 && this.rawMax === 0) && !(min === 0 && max === 0)) {\n      this.lut.remapDomains(this.rawMin, this.rawMax, min, max);\n      this.rawMin = min;\n      this.rawMax = max;\n    }\n  }\n  getHistogram() {\n    return this.histogram;\n  }\n  getIntensity(x, y, z) {\n    return this.volumeData[x + y * this.dims[0] + z * (this.dims[0] * this.dims[1])];\n  }\n\n  // how to index into tiled texture atlas\n  getIntensityFromAtlas(x, y, z) {\n    const numXtiles = this.imgData.width / this.dims[0];\n    const tilex = z % numXtiles;\n    const tiley = Math.floor(z / numXtiles);\n    const offset = tilex * this.dims[0] + x + (tiley * this.dims[1] + y) * this.imgData.width;\n    return this.imgData.data[offset];\n  }\n  rebuildDataTexture(data, w, h) {\n    if (this.dataTexture) {\n      this.dataTexture.dispose();\n    }\n    this.dataTexture = new three__WEBPACK_IMPORTED_MODULE_2__.DataTexture(data, w, h);\n    this.dataTexture.format = three__WEBPACK_IMPORTED_MODULE_2__.RedFormat;\n    this.dataTexture.type = three__WEBPACK_IMPORTED_MODULE_2__.UnsignedByteType;\n    this.dataTexture.magFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n    this.dataTexture.minFilter = three__WEBPACK_IMPORTED_MODULE_2__.NearestFilter;\n    this.dataTexture.generateMipmaps = false;\n    this.dataTexture.needsUpdate = true;\n  }\n\n  // give the channel fresh data and initialize from that data\n  // data is formatted as a texture atlas where each tile is a z slice of the volume\n  setBits(bitsArray, w, h) {\n    this.imgData = {\n      data: new Uint8ClampedArray(bitsArray.buffer),\n      width: w,\n      height: h\n    };\n    this.rebuildDataTexture(this.imgData.data, w, h);\n    this.loaded = true;\n    this.histogram = new _Histogram_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](bitsArray);\n    const [hmin, hmax] = this.histogram.findAutoIJBins();\n    const lut = new _Lut_js__WEBPACK_IMPORTED_MODULE_1__.Lut().createFromMinMax(hmin, hmax);\n    this.setLut(lut);\n  }\n\n  // let's rearrange this.imgData.data into a 3d array.\n  // it is assumed to be coming in as a flat Uint8Array of size x*y*z\n  // with x*y*z layout (first row of first plane is the first data in the layout,\n  // then second row of first plane, etc)\n  unpackVolumeFromAtlas(x, y, z) {\n    const volimgdata = this.imgData.data;\n    this.dims = [x, y, z];\n    this.volumeData = new Uint8Array(x * y * z);\n    const numXtiles = this.imgData.width / x;\n    const atlasrow = this.imgData.width;\n    let tilex = 0,\n      tiley = 0,\n      tileoffset = 0,\n      tilerowoffset = 0,\n      destOffset = 0;\n    for (let i = 0; i < z; ++i) {\n      // tile offset\n      tilex = i % numXtiles;\n      tiley = Math.floor(i / numXtiles);\n      tileoffset = tilex * x + tiley * y * atlasrow;\n      for (let j = 0; j < y; ++j) {\n        tilerowoffset = j * atlasrow;\n        destOffset = i * (x * y) + j * x;\n        this.volumeData.set(volimgdata.subarray(tileoffset + tilerowoffset, tileoffset + tilerowoffset + x), destOffset);\n      }\n    }\n  }\n\n  // give the channel fresh volume data and initialize from that data\n  setFromVolumeData(bitsArray, vx, vy, vz, ax, ay, rawMin = 0, rawMax = 255) {\n    this.dims = [vx, vy, vz];\n    this.volumeData = bitsArray;\n    // TODO FIXME performance hit for shuffling the data and storing 2 versions of it (could do this in worker at least?)\n    this.packToAtlas(vx, vy, vz, ax, ay);\n    this.loaded = true;\n    // update from current histogram?\n    this.setRawDataRange(rawMin, rawMax);\n    this.histogram = new _Histogram_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.volumeData);\n  }\n\n  // given this.volumeData, let's unpack it into a flat textureatlas and fill up this.imgData.\n  packToAtlas(vx, vy, vz, ax, ay) {\n    // big assumptions:\n    // atlassize is a perfect multiple of volumesize in both x and y\n    // ax % vx == 0\n    // ay % vy == 0\n    // and num slices <= num possible slices in atlas.\n    // (ax/vx) * (ay/vy) >= vz\n    if (ax % vx !== 0 || ay % vy !== 0 || ax / vx * (ay / vy) < vz) {\n      console.log(\"ERROR - atlas and volume dims are inconsistent\");\n      console.log(ax, ay, vx, vy, vz);\n    }\n    this.imgData = {\n      width: ax,\n      height: ay,\n      data: new Uint8ClampedArray(ax * ay)\n    };\n    this.imgData.data.fill(0);\n\n    // deposit slices one by one into the imgData.data from volData.\n    const volimgdata = this.imgData.data;\n    const x = vx,\n      y = vy,\n      z = vz;\n    const numXtiles = this.imgData.width / x;\n    const atlasrow = this.imgData.width;\n    let tilex = 0,\n      tiley = 0,\n      tileoffset = 0,\n      tilerowoffset = 0,\n      sourceOffset = 0;\n    for (let i = 0; i < z; ++i) {\n      // tile offset\n      tilex = i % numXtiles;\n      tiley = Math.floor(i / numXtiles);\n      tileoffset = tilex * x + tiley * y * atlasrow;\n      for (let j = 0; j < y; ++j) {\n        tilerowoffset = j * atlasrow;\n        sourceOffset = i * (x * y) + j * x;\n        volimgdata.set(this.volumeData.subarray(sourceOffset, sourceOffset + x), tileoffset + tilerowoffset);\n      }\n    }\n    this.rebuildDataTexture(this.imgData.data, ax, ay);\n  }\n  setLut(lut) {\n    this.lut = lut;\n  }\n\n  // palette should be an uint8array of 256*4 elements (256 rgba8 values)\n  setColorPalette(palette) {\n    this.colorPalette = palette;\n  }\n  setColorPaletteAlpha(alpha) {\n    this.colorPaletteAlpha = alpha;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/Channel.js\n");

/***/ }),

/***/ "../volume-viewer/es/Histogram.js":
/*!****************************************!*\
  !*** ../volume-viewer/es/Histogram.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Histogram)\n/* harmony export */ });\n/**\r\n * Builds a histogram with 256 bins from a data array. Assume data is 8 bit single channel grayscale.\r\n * @class\r\n * @param {Array.<number>} data\r\n */\nclass Histogram {\n  constructor(data) {\n    // no more than 2^32 pixels of any one intensity in the data!?!?!\n    this.bins = new Uint32Array(256);\n    this.bins.fill(0);\n    this.dataMin = 255;\n    this.dataMax = 0;\n    this.maxBin = 0;\n\n    // build up the histogram\n    for (let i = 0; i < data.length; ++i) {\n      this.bins[data[i]]++;\n    }\n    // track the first and last nonzero bins with at least 1 sample\n    for (let i = 1; i < this.bins.length; i++) {\n      if (this.bins[i] > 0) {\n        this.dataMin = i;\n        break;\n      }\n    }\n    for (let i = this.bins.length - 1; i >= 1; i--) {\n      if (this.bins[i] > 0) {\n        this.dataMax = i;\n        break;\n      }\n    }\n\n    // total number of pixels minus the number of zero pixels\n    this.nonzeroPixelCount = data.length - this.bins[0];\n\n    // get the bin with the most frequently occurring NONZERO value\n    this.maxBin = 1;\n    let max = this.bins[1];\n    for (let i = 1; i < this.bins.length; i++) {\n      if (this.bins[i] > max) {\n        this.maxBin = i;\n        max = this.bins[i];\n      }\n    }\n  }\n\n  /**\r\n   * Return the min data value\r\n   * @return {number}\r\n   */\n  getMin() {\n    return this.dataMin;\n  }\n\n  /**\r\n   * Return the max data value\r\n   * @return {number}\r\n   */\n  getMax() {\n    return this.dataMax;\n  }\n  getNumBins() {\n    return this.bins.length;\n  }\n  getBin(i) {\n    return this.bins[i];\n  }\n\n  /**\r\n   * Find the bin that contains the percentage of pixels below it\r\n   * @return {number}\r\n   * @param {number} pct\r\n   */\n  findBinOfPercentile(pct) {\n    const pixcount = this.nonzeroPixelCount + this.bins[0];\n    const limit = pixcount * pct;\n    let i = 0;\n    let count = 0;\n    for (i = 0; i < this.bins.length; ++i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    return i;\n  }\n\n  // Find bins at 10th / 90th percentile\n  findBestFitBins() {\n    const pixcount = this.nonzeroPixelCount;\n    //const pixcount = this.imgData.data.length;\n    const limit = pixcount / 10;\n    let i = 0;\n    let count = 0;\n    for (i = 1; i < this.bins.length; ++i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    const hmin = i;\n    count = 0;\n    for (i = this.bins.length - 1; i >= 1; --i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    const hmax = i;\n    return [hmin, hmax];\n  }\n\n  // Find min and max bins attempting to replicate ImageJ's \"Auto\" button\n  findAutoIJBins() {\n    const AUTO_THRESHOLD = 5000;\n    const pixcount = this.nonzeroPixelCount;\n    //  const pixcount = this.imgData.data.length;\n    const limit = pixcount / 10;\n    const threshold = pixcount / AUTO_THRESHOLD;\n\n    // this will skip the \"zero\" bin which contains pixels of zero intensity.\n    let hmin = this.bins.length - 1;\n    let hmax = 1;\n    for (let i = 1; i < this.bins.length; ++i) {\n      if (this.bins[i] > threshold && this.bins[i] <= limit) {\n        hmin = i;\n        break;\n      }\n    }\n    for (let i = this.bins.length - 1; i >= 1; --i) {\n      if (this.bins[i] > threshold && this.bins[i] <= limit) {\n        hmax = i;\n        break;\n      }\n    }\n    if (hmax < hmin) {\n      hmin = 0;\n      hmax = 255;\n    }\n    return [hmin, hmax];\n  }\n\n  // Find min and max bins using a percentile of the most commonly occurring value\n  findAutoMinMax() {\n    // simple linear mapping cutting elements with small appearence\n    // get 10% threshold\n    const PERCENTAGE = 0.1;\n    const th = Math.floor(this.bins[this.maxBin] * PERCENTAGE);\n    let b = 0;\n    let e = this.bins.length - 1;\n    for (let x = 1; x < this.bins.length; ++x) {\n      if (this.bins[x] > th) {\n        b = x;\n        break;\n      }\n    }\n    for (let x = this.bins.length - 1; x >= 1; --x) {\n      if (this.bins[x] > th) {\n        e = x;\n        break;\n      }\n    }\n    return [b, e];\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/Histogram.js\n");

/***/ }),

/***/ "../volume-viewer/es/Lut.js":
/*!**********************************!*\
  !*** ../volume-viewer/es/Lut.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LUT_ARRAY_LENGTH: () => (/* binding */ LUT_ARRAY_LENGTH),\n/* harmony export */   LUT_ENTRIES: () => (/* binding */ LUT_ENTRIES),\n/* harmony export */   Lut: () => (/* binding */ Lut),\n/* harmony export */   remapControlPoints: () => (/* binding */ remapControlPoints),\n/* harmony export */   remapLut: () => (/* binding */ remapLut)\n/* harmony export */ });\n/* harmony import */ var _constants_colors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants/colors.js */ \"../volume-viewer/es/constants/colors.js\");\n\nfunction clamp(val, cmin, cmax) {\n  return Math.min(Math.max(cmin, val), cmax);\n}\nfunction lerp(xmin, xmax, a) {\n  return a * (xmax - xmin) + xmin;\n}\n\n// We have an intensity value that is in the range of valueMin to valueMax.\n// This domain is assumed to have been remapped from oldMin to oldMax.\n// We now wish to find the intensity value that corresponds to the same relative position in the new domain of newMin to newMax.\n// For our Luts valueMin will always be 0, and valueMax will always be 255.\n// oldMin and oldMax will be the domain of the original raw data intensities.\n// newMin and newMax will be the domain of the new raw data intensities.\nfunction remapDomain(value, valueMin, valueMax, oldMin, oldMax, newMin, newMax) {\n  const pctOfRange = (value - valueMin) / (valueMax - valueMin);\n  const newValue = (newMax - newMin) * pctOfRange + newMin;\n  // now locate this value as a relative index in the old range\n  const pctOfOldRange = (newValue - oldMin) / (oldMax - oldMin);\n  const remapped = valueMin + pctOfOldRange * (valueMax - valueMin);\n  return remapped;\n}\n\n// We have an intensity value that is in the range of valueMin to valueMax.\n// The input value range is assumed to represent absolute intensity range oldMin to oldMax.\n// We now wish to find the new position of this intensity value\n// when the valueMin-valueMax represents absolute range newMin to newMax\n// After the remapping, the intensity value will be in the range of valueMin to valueMax.\n// For our Luts valueMin will always be 0, and valueMax will always be 255.\n// oldMin and oldMax will be the domain of the original raw data intensities.\n// newMin and newMax will be the domain of the new raw data intensities.\nfunction remapDomainForCP(value, valueMin, valueMax, oldMin, oldMax, newMin, newMax) {\n  const pctOfRange = (value - valueMin) / (valueMax - valueMin);\n  // find abs intensity from old range\n  const iOld = (oldMax - oldMin) * pctOfRange + oldMin;\n  // now locate this value as a relative index in the new range\n  const pctOfNewRange = (iOld - newMin) / (newMax - newMin);\n  const remapped = valueMin + pctOfNewRange * (valueMax - valueMin);\n  return remapped;\n}\nconst LUT_ENTRIES = 256;\nconst LUT_ARRAY_LENGTH = LUT_ENTRIES * 4;\n\n/**\r\n * @typedef {Object} ControlPoint Used for the TF (transfer function) editor GUI.\r\n * Need to be converted to LUT for rendering.\r\n * @property {number} x The X Coordinate\r\n * @property {number} opacity The Opacity, from 0 to 1\r\n * @property {Array.<number>} color The Color, 3 numbers from 0-255 for r,g,b\r\n */\n\nfunction controlPointToRGBA(controlPoint) {\n  return [controlPoint.color[0], controlPoint.color[1], controlPoint.color[2], Math.floor(controlPoint.opacity * 255)];\n}\n\n/**\r\n * @typedef {Object} Lut Used for rendering.\r\n * @property {Array.<number>} lut LUT_ARRAY_LENGTH element lookup table as array\r\n * (maps scalar intensity to a rgb color plus alpha, with each value from 0-255)\r\n * @property {Array.<ControlPoint>} controlPoints\r\n */\nclass Lut {\n  constructor() {\n    this.lut = new Uint8Array(LUT_ARRAY_LENGTH);\n    this.controlPoints = [];\n    this.createFullRange();\n  }\n\n  /**\r\n   * Generate a piecewise linear lookup table that ramps up from 0 to 1 over the b to e domain.\r\n   * If e === b, then we use a step function with f(b) = 0 and f(b + 1) = 1\r\n   *  |\r\n   * 1|               +---------+-----\r\n   *  |              /\r\n   *  |             /\r\n   *  |            /\r\n   *  |           /\r\n   *  |          /\r\n   * 0+=========+---------------+-----\r\n   *  0         b    e         255\r\n   * @return {Lut}\r\n   * @param {number} b\r\n   * @param {number} e\r\n   */\n  createFromMinMax(b, e) {\n    if (e < b) {\n      // swap\n      const tmp = e;\n      e = b;\n      b = tmp;\n    }\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n    for (let x = 0; x < lut.length / 4; ++x) {\n      lut[x * 4 + 0] = 255;\n      lut[x * 4 + 1] = 255;\n      lut[x * 4 + 2] = 255;\n      if (x > e) {\n        lut[x * 4 + 3] = 255;\n      } else if (x <= b) {\n        lut[x * 4 + 3] = 0;\n      } else {\n        if (e === b) {\n          lut[x * 4 + 3] = 255;\n        } else {\n          const a = (x - b) / (e - b);\n          lut[x * 4 + 3] = lerp(0, 255, a);\n        }\n      }\n    }\n\n    // Edge case: b and e are both out of bounds\n    if (b < 0 && e < 0) {\n      this.lut = lut;\n      this.controlPoints = [{\n        x: 0,\n        opacity: 1,\n        color: [255, 255, 255]\n      }, {\n        x: 255,\n        opacity: 1,\n        color: [255, 255, 255]\n      }];\n      return this;\n    }\n    if (b >= 255 && e >= 255) {\n      this.lut = lut;\n      this.controlPoints = [{\n        x: 0,\n        opacity: 0,\n        color: [255, 255, 255]\n      }, {\n        x: 255,\n        opacity: 0,\n        color: [255, 255, 255]\n      }];\n      return this;\n    }\n\n    // Generate 2 to 4 control points for a minMax LUT, from left to right\n    const controlPoints = [];\n\n    // Add starting point at x = 0\n    let startVal = 0;\n    if (b < 0) {\n      startVal = -b / (e - b);\n    }\n    controlPoints.push({\n      x: 0,\n      opacity: startVal,\n      color: [255, 255, 255]\n    });\n\n    // If b > 0, add another point at (b, 0)\n    if (b > 0) {\n      controlPoints.push({\n        x: b,\n        opacity: 0,\n        color: [255, 255, 255]\n      });\n    }\n\n    // If e < 255, Add another point at (e, 1)\n    if (e < 255) {\n      if (e === b) {\n        // Use b + 0.5 as x value instead of e to create a near-vertical ramp\n        controlPoints.push({\n          x: b + 0.5,\n          opacity: 1,\n          color: [255, 255, 255]\n        });\n      } else {\n        controlPoints.push({\n          x: e,\n          opacity: 1,\n          color: [255, 255, 255]\n        });\n      }\n    }\n\n    // Add ending point at x = 255\n    let endVal = 1;\n    if (e > 255) {\n      endVal = (255 - b) / (e - b);\n    }\n    controlPoints.push({\n      x: 255,\n      opacity: endVal,\n      color: [255, 255, 255]\n    });\n    this.lut = lut;\n    this.controlPoints = controlPoints;\n    return this;\n  }\n\n  // basically, the identity LUT with respect to opacity\n  createFullRange() {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n    // simple linear mapping for actual range\n    for (let x = 0; x < lut.length / 4; ++x) {\n      lut[x * 4 + 0] = 255;\n      lut[x * 4 + 1] = 255;\n      lut[x * 4 + 2] = 255;\n      lut[x * 4 + 3] = x;\n    }\n    this.lut = lut;\n    this.controlPoints = [{\n      x: 0,\n      opacity: 0,\n      color: [255, 255, 255]\n    }, {\n      x: 255,\n      opacity: 1,\n      color: [255, 255, 255]\n    }];\n    return this;\n  }\n\n  /**\r\n   * Generate a Window/level lookup table\r\n   * @return {Lut}\r\n   * @param {number} wnd in 0..1 range\r\n   * @param {number} lvl in 0..1 range\r\n   */\n  createFromWindowLevel(wnd, lvl) {\n    // simple linear mapping for actual range\n    const b = lvl - wnd * 0.5;\n    const e = lvl + wnd * 0.5;\n    return this.createFromMinMax(b * 255, e * 255);\n  }\n\n  // @param {Object[]} controlPoints - array of {x:number 0..255, opacity:number 0..1, color:array of 3 numbers 0..255}\n  // @return {Uint8Array} array of length 256*4 representing the rgba values of the gradient\n  createFromControlPoints(controlPoints) {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n    if (controlPoints.length === 0) {\n      this.lut = lut;\n      this.controlPoints = controlPoints;\n      return this;\n    }\n\n    // ensure they are sorted in ascending order of x\n    controlPoints.sort((a, b) => a.x - b.x);\n\n    // special case only one control point.\n    if (controlPoints.length === 1) {\n      const rgba = controlPointToRGBA(controlPoints[0]);\n      // lut was already filled with zeros\n      // copy val from x to 255.\n      const startx = clamp(controlPoints[0].x, 0, 255);\n      for (let x = startx; x < 256; ++x) {\n        lut[x * 4 + 0] = rgba[0];\n        lut[x * 4 + 1] = rgba[1];\n        lut[x * 4 + 2] = rgba[2];\n        lut[x * 4 + 3] = rgba[3];\n      }\n      this.lut = lut;\n      this.controlPoints = controlPoints;\n      return this;\n    }\n    let c0 = controlPoints[0];\n    let c1 = controlPoints[1];\n    let color0 = controlPointToRGBA(c0);\n    let color1 = controlPointToRGBA(c1);\n    let lastIndex = 1;\n    let a = 0;\n    for (let i = 0; i < 256; ++i) {\n      // find the two control points that i is between\n      while (i > c1.x) {\n        // advance control points\n        c0 = c1;\n        color0 = color1;\n        lastIndex++;\n        if (lastIndex >= controlPoints.length) {\n          // if the last control point is before 255, then we want to continue its value all the way to 255.\n          c1 = {\n            x: 255,\n            color: c1.color,\n            opacity: c1.opacity\n          };\n        } else {\n          c1 = controlPoints[lastIndex];\n        }\n        color1 = controlPointToRGBA(c1);\n      }\n      // find the lerp amount between the two control points\n      if (c1.x === c0.x) {\n        // use c1\n        a = 1.0;\n      } else {\n        a = (i - c0.x) / (c1.x - c0.x);\n      }\n      lut[i * 4 + 0] = clamp(lerp(color0[0], color1[0], a), 0, 255);\n      lut[i * 4 + 1] = clamp(lerp(color0[1], color1[1], a), 0, 255);\n      lut[i * 4 + 2] = clamp(lerp(color0[2], color1[2], a), 0, 255);\n      lut[i * 4 + 3] = clamp(lerp(color0[3], color1[3], a), 0, 255);\n    }\n    this.lut = lut;\n    this.controlPoints = controlPoints;\n    return this;\n  }\n\n  /**\r\n   * Generate an \"equalized\" lookup table\r\n   * @return {Lut}\r\n   */\n  createFromEqHistogram(histogram) {\n    const map = [];\n    for (let i = 0; i < histogram.getNumBins(); ++i) {\n      map[i] = 0;\n    }\n\n    // summed area table?\n    map[0] = histogram.getBin(0);\n    for (let i = 1; i < histogram.getNumBins(); ++i) {\n      map[i] = map[i - 1] + histogram.getBin(i);\n    }\n    const div = map[map.length - 1] - map[0];\n    if (div > 0) {\n      const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n      // compute lut and track control points for the piecewise linear sections\n      const lutControlPoints = [{\n        x: 0,\n        opacity: 0,\n        color: [255, 255, 255]\n      }];\n      lut[0] = 255;\n      lut[1] = 255;\n      lut[2] = 255;\n      lut[3] = 0;\n      let slope = 0;\n      let lastSlope = 0;\n      let opacity = 0;\n      let lastOpacity = 0;\n      for (let i = 1; i < lut.length / 4; ++i) {\n        lut[i * 4 + 0] = 255;\n        lut[i * 4 + 1] = 255;\n        lut[i * 4 + 2] = 255;\n        lastOpacity = opacity;\n        opacity = clamp(Math.round(255 * (map[i] - map[0])), 0, 255);\n        lut[i * 4 + 3] = opacity;\n        slope = opacity - lastOpacity;\n        // if map[i]-map[i-1] is the same as map[i+1]-map[i] then we are in a linear segment and do not need a new control point\n        if (slope != lastSlope) {\n          lutControlPoints.push({\n            x: i - 1,\n            opacity: lastOpacity / 255.0,\n            color: [255, 255, 255]\n          });\n          lastSlope = slope;\n        }\n      }\n      lutControlPoints.push({\n        x: 255,\n        opacity: 1,\n        color: [255, 255, 255]\n      });\n      this.lut = lut;\n      this.controlPoints = lutControlPoints;\n      return this;\n    } else {\n      // just reset to whole range in this case...?\n      return this.createFullRange();\n    }\n  }\n\n  /**\r\n   * Generate a lookup table with a different color per intensity value.\r\n   * This translates to a unique color per histogram bin with more than zero pixels.\r\n   * @return {Lut}\r\n   */\n  createLabelColors(histogram) {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n    const controlPoints = [];\n    controlPoints.push({\n      x: 0,\n      opacity: 0,\n      color: [0, 0, 0]\n    });\n    let lastr = 0;\n    let lastg = 0;\n    let lastb = 0;\n    let lasta = 0;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let a = 0;\n\n    // assumes exactly one bin per intensity value?\n    // skip zero!!!\n    for (let i = 1; i < histogram.getNumBins(); ++i) {\n      if (histogram.getBin(i) > 0) {\n        const rgb = (0,_constants_colors_js__WEBPACK_IMPORTED_MODULE_0__.getColorByChannelIndex)(i);\n        lut[i * 4 + 0] = rgb[0];\n        lut[i * 4 + 1] = rgb[1];\n        lut[i * 4 + 2] = rgb[2];\n        lut[i * 4 + 3] = 255;\n        r = rgb[0];\n        g = rgb[1];\n        b = rgb[2];\n        a = 1;\n      } else {\n        // add a zero control point?\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n      }\n      // if current control point is same as last one don't add it\n      if (r !== lastr || g !== lastg || b !== lastb || a !== lasta) {\n        if (lasta === 0) {\n          controlPoints.push({\n            x: i - 0.5,\n            opacity: lasta,\n            color: [lastr, lastg, lastb]\n          });\n        }\n        controlPoints.push({\n          x: i,\n          opacity: a,\n          color: [r, g, b]\n        });\n        lastr = r;\n        lastg = g;\n        lastb = b;\n        lasta = a;\n      }\n    }\n    this.lut = lut;\n    this.controlPoints = controlPoints;\n    return this;\n  }\n\n  // since this is not a \"create\" function, it doesn't need to return the object.\n  remapDomains(oldMin, oldMax, newMin, newMax) {\n    // no attempt is made here to ensure that lut and controlPoints are internally consistent.\n    // if they start out consistent, they should end up consistent. And vice versa.\n    this.lut = remapLut(this.lut, oldMin, oldMax, newMin, newMax);\n    this.controlPoints = remapControlPoints(this.controlPoints, oldMin, oldMax, newMin, newMax);\n  }\n}\n\n// If the new max is greater than the old max, then\n// the lut's max end will move inward to the left.\n// This is another way of saying that the new max's index is greater than 255 in the old lut\n// If the new min is less than the old min, then\n// the lut's min end will move inward to the right.\n// This is another way of saying that the new min's index is less than 0 in the old lut\nfunction remapLut(lut, oldMin, oldMax, newMin, newMax) {\n  const newLut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n  // we will find what intensity is at each index in the new range,\n  // and then try to sample the pre-existing lut as if it spans the old range.\n  // Build new lut by sampling from old lut.\n  for (let i = 0; i < LUT_ENTRIES; ++i) {\n    let iOld = remapDomain(i, 0, LUT_ENTRIES - 1, oldMin, oldMax, newMin, newMax);\n    if (iOld < 0) {\n      iOld = 0;\n    }\n    if (iOld > LUT_ENTRIES - 1) {\n      iOld = LUT_ENTRIES - 1;\n    }\n    // find the indices above and below for interpolation\n    const i0 = Math.floor(iOld);\n    const i1 = Math.ceil(iOld);\n    const pct = iOld - i0;\n\n    //console.log(`interpolating ${iOld}: ${lut[i0 * 4 + 3]}, ${lut[i1 * 4 + 3]}, ${pct}`);\n    newLut[i * 4 + 0] = Math.round(lerp(lut[i0 * 4 + 0], lut[i1 * 4 + 0], pct));\n    newLut[i * 4 + 1] = Math.round(lerp(lut[i0 * 4 + 1], lut[i1 * 4 + 1], pct));\n    newLut[i * 4 + 2] = Math.round(lerp(lut[i0 * 4 + 2], lut[i1 * 4 + 2], pct));\n    newLut[i * 4 + 3] = Math.round(lerp(lut[i0 * 4 + 3], lut[i1 * 4 + 3], pct));\n  }\n  return newLut;\n}\nfunction remapControlPoints(controlPoints, oldMin, oldMax, newMin, newMax) {\n  const newControlPoints = [];\n\n  // assume control point x domain 0-255 is mapped to oldMin-oldMax\n\n  // remap all cp x values.\n  // interpolate all new colors and opacities\n  // Do not clip values outside of 0-255. This is important to\n  // preserve information for remapping many consecutive times.\n  for (let i = 0; i < controlPoints.length; ++i) {\n    const cp = controlPoints[i];\n    const iOld = remapDomainForCP(cp.x, 0, LUT_ENTRIES - 1, oldMin, oldMax, newMin, newMax);\n    const newCP = {\n      x: iOld,\n      opacity: cp.opacity,\n      color: [cp.color[0], cp.color[1], cp.color[2]]\n    };\n    newControlPoints.push(newCP);\n  }\n  return newControlPoints;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/Lut.js\n");

/***/ }),

/***/ "../volume-viewer/es/Volume.js":
/*!*************************************!*\
  !*** ../volume-viewer/es/Volume.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Volume),\n/* harmony export */   getDefaultImageInfo: () => (/* binding */ getDefaultImageInfo)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ \"../volume-viewer/node_modules/three/build/three.module.js\");\n/* harmony import */ var _Channel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Channel.js */ \"../volume-viewer/es/Channel.js\");\n/* harmony import */ var _constants_colors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants/colors.js */ \"../volume-viewer/es/constants/colors.js\");\n/* harmony import */ var _loaders_IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loaders/IVolumeLoader.js */ \"../volume-viewer/es/loaders/IVolumeLoader.js\");\n/* harmony import */ var _loaders_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loaders/VolumeLoaderUtils.js */ \"../volume-viewer/es/loaders/VolumeLoaderUtils.js\");\n\n\n\n\n\nconst getDefaultImageInfo = () => ({\n  name: \"\",\n  originalSize: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 1, 1),\n  atlasTileDims: new three__WEBPACK_IMPORTED_MODULE_4__.Vector2(1, 1),\n  volumeSize: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 1, 1),\n  subregionSize: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 1, 1),\n  subregionOffset: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0),\n  physicalPixelSize: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 1, 1),\n  spatialUnit: \"\",\n  numChannels: 0,\n  channelNames: [],\n  channelColors: [],\n  times: 1,\n  timeScale: 1,\n  timeUnit: \"\",\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n  transform: {\n    translation: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0),\n    rotation: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0)\n  }\n});\n/**\r\n * Provide dimensions of the volume data, including dimensions for texture atlas data in which the volume z slices\r\n * are tiled across a single large 2d image plane.\r\n * @typedef {Object} ImageInfo\r\n * @property {string} name Base name of image\r\n * @property {string} [version] Schema version preferably in semver format.\r\n * @property {Vector2} originalSize XY size of the *original* (not downsampled) volume, in pixels\r\n * @property {Vector2} atlasDims Number of rows and columns of z-slice tiles (not pixels) in the texture atlas\r\n * @property {Vector3} volumeSize Size of the volume, in pixels\r\n * @property {Vector3} regionSize Size of the currently loaded subregion, in pixels\r\n * @property {Vector3} regionOffset Offset of the loaded subregion into the total volume, in pixels\r\n * @property {Vector3} pixelSize Size of a single *original* (not downsampled) pixel, in spatial units\r\n * @property {string} spatialUnit Symbol of physical spatial unit used by `pixelSize`\r\n * @property {number} numChannels Number of channels\r\n * @property {Array.<string>} channelNames Names of each of the channels to be rendered, in order. Unique identifier expected\r\n * @property {Array.<Array.<number>>} [channelColors] Colors of each of the channels to be rendered, as an ordered list of [r, g, b] arrays\r\n * @property {number} times Number of times (default = 1)\r\n * @property {number} timeScale Size of each time step in `timeUnit` units\r\n * @property {number} timeUnit Unit symbol for `timeScale` (e.g. min)\r\n * @property {Object} transform translation and rotation as arrays of 3 numbers. Translation is in voxels (to be multiplied by pixel_size values). Rotation is Euler angles in radians, appled in XYZ order.\r\n * @property {Object} userData Arbitrary metadata not covered by above properties\r\n * @example const imgdata = {\r\n  \"name\": \"AICS-10_5_5\",\r\n  \"version\": \"0.0.0\",\r\n  originalSize: new Vector2(306, 494),\r\n  atlasDims: new Vector2(10, 7),\r\n  volumeSize: new Vector3(204, 292, 65),\r\n  regionSize: new Vector3(204, 292, 65),\r\n  regionOffset: new Vector3(0, 0, 0),\r\n  pixelSize: new Vector3(0.065, 0.065, 0.29),\r\n  spatialUnit: \"μm\",\r\n  \"numChannels\": 9,\r\n  \"channelNames\": [\"DRAQ5\", \"EGFP\", \"Hoechst 33258\", \"TL Brightfield\", \"SEG_STRUCT\", \"SEG_Memb\", \"SEG_DNA\", \"CON_Memb\", \"CON_DNA\"],\r\n  \"times\": 5,\r\n  \"timeScale\": 1,\r\n  \"timeUnit\": \"hr\",\r\n  \"transform\": {\r\n    \"translation\": new Vector3(5, 5, 1),\r\n    \"rotation\": new Vector3(0, 3.14159, 1.57),\r\n  },\r\n  };\r\n */\n\n/**\r\n * A renderable multichannel volume image with 8-bits per channel intensity values.\r\n * @class\r\n * @param {ImageInfo} imageInfo\r\n */\nclass Volume {\n  // `LoadSpec` representing the minimum data required to display what's in the viewer (subregion, channels, etc.).\n  // Used to intelligently issue load requests whenever required by a state change. Modify with `updateRequiredData`.\n\n  constructor(imageInfo = getDefaultImageInfo(), loadSpec = new _loaders_IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_2__.LoadSpec(), loader) {\n    this.loaded = false;\n    this.imageInfo = imageInfo;\n    this.name = this.imageInfo.name;\n    this.loadSpec = {\n      // Fill in defaults for optional properties\n      multiscaleLevel: 0,\n      scaleLevelBias: 0,\n      maxAtlasEdge: _loaders_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_3__.MAX_ATLAS_EDGE,\n      channels: Array.from({\n        length: this.imageInfo.numChannels\n      }, (_val, idx) => idx),\n      ...loadSpec\n    };\n    this.loadSpecRequired = {\n      ...this.loadSpec,\n      channels: this.loadSpec.channels.slice(),\n      subregion: this.loadSpec.subregion.clone()\n    };\n    this.loader = loader;\n    // imageMetadata to be filled in by Volume Loaders\n    this.imageMetadata = {};\n    this.normRegionSize = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 1, 1);\n    this.normRegionOffset = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0);\n    this.physicalSize = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 1, 1);\n    this.physicalScale = 1;\n    this.normPhysicalSize = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(1, 1, 1);\n    this.physicalPixelSize = this.imageInfo.physicalPixelSize;\n    this.tickMarkPhysicalLength = 1;\n    this.setVoxelSize(this.physicalPixelSize);\n    this.numChannels = this.imageInfo.numChannels;\n    this.channelNames = this.imageInfo.channelNames.slice();\n    this.channelColorsDefault = this.imageInfo.channelColors ? this.imageInfo.channelColors.slice() : this.channelNames.map((name, index) => (0,_constants_colors_js__WEBPACK_IMPORTED_MODULE_1__.getColorByChannelIndex)(index));\n    // fill in gaps\n    if (this.channelColorsDefault.length < this.imageInfo.numChannels) {\n      for (let i = this.channelColorsDefault.length - 1; i < this.imageInfo.numChannels; ++i) {\n        this.channelColorsDefault[i] = (0,_constants_colors_js__WEBPACK_IMPORTED_MODULE_1__.getColorByChannelIndex)(i);\n      }\n    }\n    this.channels = [];\n    for (let i = 0; i < this.imageInfo.numChannels; ++i) {\n      const channel = new _Channel_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.channelNames[i]);\n      this.channels.push(channel);\n      // TODO pass in channel constructor...\n      channel.dims = this.imageInfo.subregionSize.toArray();\n    }\n    this.physicalUnitSymbol = this.imageInfo.spatialUnit;\n    this.volumeDataObservers = [];\n  }\n  setUnloaded() {\n    this.loaded = false;\n    this.channels.forEach(channel => {\n      channel.loaded = false;\n    });\n  }\n  isLoaded() {\n    return this.loaded;\n  }\n  updateDimensions() {\n    const {\n      volumeSize,\n      subregionSize,\n      subregionOffset\n    } = this.imageInfo;\n    this.setVoxelSize(this.physicalPixelSize);\n    this.normRegionSize = subregionSize.clone().divide(volumeSize);\n    this.normRegionOffset = subregionOffset.clone().divide(volumeSize);\n  }\n\n  /** Returns `true` iff differences between `loadSpec` and `loadSpecRequired` indicate new data *must* be loaded. */\n  mustLoadNewData() {\n    return this.loadSpec.time !== this.loadSpecRequired.time ||\n    // time point changed\n    !this.loadSpec.subregion.containsBox(this.loadSpecRequired.subregion) ||\n    // new subregion not contained in old\n    this.loadSpecRequired.channels.some(channel => !this.loadSpec.channels.includes(channel)) // new channel(s)\n    ;\n  }\n\n  /**\r\n   * Returns `true` iff differences between `loadSpec` and `loadSpecRequired` indicate a new load *may* get a\r\n   * different scale level than is currently loaded.\r\n   *\r\n   * This checks for changes in properties that *can*, but do not *always*, change the scale level the loader picks.\r\n   * For example, a smaller `subregion` *may* mean a higher scale level will fit within memory constraints, or it may\r\n   * not. A higher `scaleLevelBias` *may* nudge the volume into a higher scale level, or we may already be at the max\r\n   * imposed by `multiscaleLevel`.\r\n   */\n  mayLoadNewScaleLevel() {\n    return !this.loadSpec.subregion.equals(this.loadSpecRequired.subregion) || this.loadSpecRequired.maxAtlasEdge !== this.loadSpec.maxAtlasEdge || this.loadSpecRequired.multiscaleLevel !== this.loadSpec.multiscaleLevel || this.loadSpecRequired.scaleLevelBias !== this.loadSpec.scaleLevelBias;\n  }\n\n  /** Call on any state update that may require new data to be loaded (subregion, enabled channels, time, etc.) */\n  async updateRequiredData(required, onChannelLoaded) {\n    this.loadSpecRequired = {\n      ...this.loadSpecRequired,\n      ...required\n    };\n    let shouldReload = this.mustLoadNewData();\n\n    // If we're not reloading due to required data changes, check if we should load a new scale level\n    if (!shouldReload && this.mayLoadNewScaleLevel()) {\n      // Loaders should cache loaded dimensions so that this call blocks no more than once per valid `LoadSpec`.\n      const dims = await this.loadScaleLevelDims();\n      if (dims) {\n        const dimsZYX = dims.map(({\n          shape\n        }) => [shape[2], shape[3], shape[4]]);\n        // Determine which scale level *would* be loaded, and see if it's different than what we have\n        const levelToLoad = (0,_loaders_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_3__.pickLevelToLoadUnscaled)(this.loadSpecRequired, dimsZYX);\n        shouldReload = this.imageInfo.multiscaleLevel !== levelToLoad;\n      }\n    }\n    if (shouldReload) {\n      this.loadNewData(onChannelLoaded);\n    }\n  }\n  async loadScaleLevelDims() {\n    try {\n      return await this.loader?.loadDims(this.loadSpecRequired);\n    } catch (e) {\n      this.volumeDataObservers.forEach(observer => observer.onVolumeLoadError(this, e));\n      return undefined;\n    }\n  }\n\n  /**\r\n   * Loads new data as specified in `this.loadSpecRequired`. Clones `loadSpecRequired` into `loadSpec` to indicate\r\n   * that the data that *must* be loaded is now the data that *has* been loaded.\r\n   */\n  async loadNewData(onChannelLoaded) {\n    this.setUnloaded();\n    this.loadSpec = {\n      ...this.loadSpecRequired,\n      subregion: this.loadSpecRequired.subregion.clone()\n    };\n    try {\n      await this.loader?.loadVolumeData(this, undefined, onChannelLoaded);\n    } catch (e) {\n      this.volumeDataObservers.forEach(observer => observer.onVolumeLoadError(this, e));\n      throw e;\n    }\n  }\n\n  // we calculate the physical size of the volume (voxels*pixel_size)\n  // and then normalize to the max physical dimension\n  setVoxelSize(size) {\n    // only set the data if it is > 0.  zero is not an allowed value.\n    size.x = size.x > 0 ? size.x : 1.0;\n    size.y = size.y > 0 ? size.y : 1.0;\n    size.z = size.z > 0 ? size.z : 1.0;\n    this.physicalPixelSize = size;\n    this.physicalSize = this.imageInfo.originalSize.clone().multiply(this.physicalPixelSize);\n    // Volume is scaled such that its largest physical dimension is 1 world unit - save that dimension for conversions\n    this.physicalScale = Math.max(this.physicalSize.x, this.physicalSize.y, this.physicalSize.z);\n    // Compute the volume's max extent - scaled to max dimension.\n    this.normPhysicalSize = this.physicalSize.clone().divideScalar(this.physicalScale);\n    // While we're here, pick a power of 10 that divides into our max dimension a reasonable number of times\n    // and save it to be the length of tick marks in 3d.\n    this.tickMarkPhysicalLength = 10 ** Math.floor(Math.log10(this.physicalScale / 2));\n  }\n  setUnitSymbol(symbol) {\n    this.physicalUnitSymbol = symbol;\n  }\n\n  /** Computes the center of the volume subset */\n  getContentCenter() {\n    // center point: (normRegionSize / 2 + normRegionOffset - 0.5) * normPhysicalSize;\n    return this.normRegionSize.clone().divideScalar(2).add(this.normRegionOffset).subScalar(0.5).multiply(this.normPhysicalSize);\n  }\n  cleanup() {\n    // no op\n  }\n  getChannel(channelIndex) {\n    return this.channels[channelIndex];\n  }\n  onChannelLoaded(batch) {\n    // check to see if all channels are now loaded, and fire an event(?)\n    if (this.loadSpec.channels.every(channelIndex => this.channels[channelIndex].loaded)) {\n      this.loaded = true;\n    }\n    batch.forEach(channelIndex => this.channelLoadCallback?.(this, channelIndex));\n    this.volumeDataObservers.forEach(observer => observer.onVolumeData(this, batch));\n  }\n\n  /**\r\n   * Assign volume data via a 2d array containing the z slices as tiles across it.  Assumes that the incoming data is consistent with the image's pre-existing imageInfo tile metadata.\r\n   * @param {number} channelIndex\r\n   * @param {Uint8Array} atlasdata\r\n   * @param {number} atlaswidth\r\n   * @param {number} atlasheight\r\n   */\n  setChannelDataFromAtlas(channelIndex, atlasdata, atlaswidth, atlasheight) {\n    this.channels[channelIndex].setBits(atlasdata, atlaswidth, atlasheight);\n    const {\n      x,\n      y,\n      z\n    } = this.imageInfo.subregionSize;\n    this.channels[channelIndex].unpackVolumeFromAtlas(x, y, z);\n    this.onChannelLoaded([channelIndex]);\n  }\n\n  // ASSUMES that this.channelData.options is already set and incoming data is consistent with it\n  /**\r\n   * Assign volume data as a 3d array ordered x,y,z. The xy size must be equal to tilewidth*tileheight from the imageInfo used to construct this Volume.  Assumes that the incoming data is consistent with the image's pre-existing imageInfo tile metadata.\r\n   * @param {number} channelIndex\r\n   * @param {Uint8Array} volumeData\r\n   */\n  setChannelDataFromVolume(channelIndex, volumeData, range) {\n    const {\n      subregionSize,\n      atlasTileDims\n    } = this.imageInfo;\n    this.channels[channelIndex].setFromVolumeData(volumeData, subregionSize.x, subregionSize.y, subregionSize.z, atlasTileDims.x * subregionSize.x, atlasTileDims.y * subregionSize.y, range[0], range[1]);\n    this.onChannelLoaded([channelIndex]);\n  }\n\n  // TODO: decide if this should update imageInfo or not. For now, leave imageInfo alone as the \"original\" data\n  /**\r\n   * Add a new channel ready to receive data from one of the setChannelDataFrom* calls.\r\n   * Name and color will be defaulted if not provided. For now, leave imageInfo alone as the \"original\" data\r\n   * @param {string} name\r\n   * @param {Array.<number>} color [r,g,b]\r\n   */\n  appendEmptyChannel(name, color) {\n    const idx = this.imageInfo.numChannels;\n    const chname = name || \"channel_\" + idx;\n    const chcolor = color || (0,_constants_colors_js__WEBPACK_IMPORTED_MODULE_1__.getColorByChannelIndex)(idx);\n    this.numChannels += 1;\n    this.channelNames.push(chname);\n    this.channelColorsDefault.push(chcolor);\n    this.channels.push(new _Channel_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](chname));\n    for (let i = 0; i < this.volumeDataObservers.length; ++i) {\n      this.volumeDataObservers[i].onVolumeChannelAdded(this, idx);\n    }\n    return idx;\n  }\n\n  /**\r\n   * Get a value from the volume data\r\n   * @return {number} the intensity value from the given channel at the given xyz location\r\n   * @param {number} c The channel index\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} z\r\n   */\n  getIntensity(c, x, y, z) {\n    return this.channels[c].getIntensity(x, y, z);\n  }\n\n  /**\r\n   * Get the 256-bin histogram for the given channel\r\n   * @return {Histogram} the histogram\r\n   * @param {number} c The channel index\r\n   */\n  getHistogram(c) {\n    return this.channels[c].getHistogram();\n  }\n\n  /**\r\n   * Set the lut for the given channel\r\n   * @param {number} c The channel index\r\n   * @param {Array.<number>} lut The lut as a 256 element array\r\n   */\n  setLut(c, lut) {\n    this.channels[c].setLut(lut);\n  }\n\n  /**\r\n   * Set the color palette for the given channel\r\n   * @param {number} c The channel index\r\n   * @param {Array.<number>} palette The colors as a 256 element array * RGBA\r\n   */\n  setColorPalette(c, palette) {\n    this.channels[c].setColorPalette(palette);\n  }\n\n  /**\r\n   * Set the color palette alpha multiplier for the given channel.\r\n   * This will blend between the ordinary color lut and this colorPalette lut.\r\n   * @param {number} c The channel index\r\n   * @param {number} alpha The alpha value as a number from 0 to 1\r\n   */\n  setColorPaletteAlpha(c, alpha) {\n    this.channels[c].setColorPaletteAlpha(alpha);\n  }\n\n  /**\r\n   * Return the intrinsic rotation associated with this volume (radians)\r\n   * @return {Array.<number>} the xyz Euler angles (radians)\r\n   */\n  getRotation() {\n    // default axis order is XYZ\n    return this.imageInfo.transform.rotation.toArray();\n  }\n\n  /**\r\n   * Return the intrinsic translation (pivot center delta) associated with this volume, in normalized volume units\r\n   * @return {Array.<number>} the xyz translation in normalized volume units\r\n   */\n  getTranslation() {\n    return this.voxelsToWorldSpace(this.imageInfo.transform.translation.toArray());\n  }\n\n  /**\r\n   * Return a translation in normalized volume units, given a translation in image voxels\r\n   * @return {Array.<number>} the xyz translation in normalized volume units\r\n   */\n  voxelsToWorldSpace(xyz) {\n    // ASSUME: translation is in original image voxels.\n    // account for pixel_size and normalized scaling in the threejs volume representation we're using\n    const m = 1.0 / Math.max(this.physicalSize.x, Math.max(this.physicalSize.y, this.physicalSize.z));\n    return new three__WEBPACK_IMPORTED_MODULE_4__.Vector3().fromArray(xyz).multiply(this.physicalPixelSize).multiplyScalar(m).toArray();\n  }\n  addVolumeDataObserver(o) {\n    this.volumeDataObservers.push(o);\n  }\n  removeVolumeDataObserver(o) {\n    if (o) {\n      const i = this.volumeDataObservers.indexOf(o);\n      if (i !== -1) {\n        this.volumeDataObservers.splice(i, 1);\n      }\n    }\n  }\n  removeAllVolumeDataObservers() {\n    this.volumeDataObservers = [];\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/Volume.js\n");

/***/ }),

/***/ "../volume-viewer/es/VolumeCache.js":
/*!******************************************!*\
  !*** ../volume-viewer/es/VolumeCache.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VolumeCache)\n/* harmony export */ });\n/** Default: 250MB. Should be large enough to be useful but safe for most any computer that can run the app */\nconst CACHE_MAX_SIZE_DEFAULT = 250_000_000;\nclass VolumeCache {\n  // Ends of a linked list of entries, to track LRU and evict efficiently\n\n  // TODO implement some way to manage used vs unused (prefetched) entries so\n  // that prefetched entries which are never used don't get highest priority!\n\n  constructor(maxSize = CACHE_MAX_SIZE_DEFAULT) {\n    this.entries = new Map();\n    this.maxSize = maxSize;\n    this.currentSize = 0;\n    this.first = null;\n    this.last = null;\n  }\n\n  // Hide these behind getters so they're definitely never set from the outside\n  /** The size of all data arrays currently stored in this cache, in bytes. */\n  get size() {\n    return this.currentSize;\n  }\n\n  /** The number of entries currently stored in this cache. */\n  get numberOfEntries() {\n    return this.entries.size;\n  }\n\n  /**\r\n   * Removes an entry from a store but NOT the LRU list.\r\n   * Only call from a method with the word \"evict\" in it!\r\n   */\n  removeEntryFromStore(entry) {\n    this.entries.delete(entry.key);\n    this.currentSize -= entry.data.byteLength;\n  }\n\n  /**\r\n   * Removes an entry from the LRU list but NOT its store.\r\n   * Entry must be replaced in list or removed from store, or it will never be evicted!\r\n   */\n  removeEntryFromList(entry) {\n    const {\n      prev,\n      next\n    } = entry;\n    if (prev) {\n      prev.next = next;\n    } else {\n      this.first = next;\n    }\n    if (next) {\n      next.prev = prev;\n    } else {\n      this.last = prev;\n    }\n  }\n\n  /** Adds an entry which is *not currently in the list* to the front of the list. */\n  addEntryAsFirst(entry) {\n    if (this.first) {\n      this.first.prev = entry;\n    } else {\n      this.last = entry;\n    }\n    entry.next = this.first;\n    entry.prev = null;\n    this.first = entry;\n  }\n\n  /** Moves an entry which is *currently in the list* to the front of the list. */\n  moveEntryToFirst(entry) {\n    if (entry === this.first) return;\n    this.removeEntryFromList(entry);\n    this.addEntryAsFirst(entry);\n  }\n\n  /** Evicts the least recently used entry from the cache. */\n  evictLast() {\n    if (!this.last) {\n      console.error(\"VolumeCache: attempt to evict last entry from cache when no last entry is set\");\n      return;\n    }\n    this.removeEntryFromStore(this.last);\n    if (this.last.prev) {\n      this.last.prev.next = null;\n    }\n    this.last = this.last.prev;\n  }\n\n  /** Evicts a specific entry from the cache. */\n  evict(entry) {\n    this.removeEntryFromStore(entry);\n    this.removeEntryFromList(entry);\n  }\n\n  /**\r\n   * Adds a new entry to the cache.\r\n   * @returns {boolean} a boolean indicating whether the insertion succeeded.\r\n   */\n  insert(key, data) {\n    if (data.byteLength > this.maxSize) {\n      console.error(\"VolumeCache: attempt to insert a single entry larger than the cache\");\n      return false;\n    }\n\n    // Check if entry is already in cache\n    // This will move the entry to the front of the LRU list, if present\n    const getResult = this.getEntry(key);\n    if (getResult !== undefined) {\n      getResult.data = data;\n      return true;\n    }\n\n    // Add new entry to cache\n    const newEntry = {\n      data,\n      prev: null,\n      next: null,\n      key\n    };\n    this.addEntryAsFirst(newEntry);\n    this.entries.set(key, newEntry);\n    this.currentSize += data.byteLength;\n\n    // Evict until size is within limit\n    while (this.currentSize > this.maxSize) {\n      this.evictLast();\n    }\n    return true;\n  }\n\n  /** Internal implementation of `get`. Returns all entry metadata, not just the raw data. */\n  getEntry(key) {\n    const result = this.entries.get(key);\n    if (result) {\n      this.moveEntryToFirst(result);\n    }\n    return result;\n  }\n\n  /** Attempts to get a single entry from the cache. */\n  get(key) {\n    return this.getEntry(key)?.data;\n  }\n\n  /** Clears all cache entries whose keys begin with the specified prefix. */\n  clearWithPrefix(prefix) {\n    for (const [key, entry] of this.entries.entries()) {\n      if (key.startsWith(prefix)) {\n        this.evict(entry);\n      }\n    }\n  }\n\n  /** Clears all data from the cache. */\n  clear() {\n    while (this.last) {\n      this.evictLast();\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/VolumeCache.js\n");

/***/ }),

/***/ "../volume-viewer/es/constants/colors.js":
/*!***********************************************!*\
  !*** ../volume-viewer/es/constants/colors.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultColors: () => (/* binding */ defaultColors),\n/* harmony export */   getColorByChannelIndex: () => (/* binding */ getColorByChannelIndex)\n/* harmony export */ });\nconst defaultColors = [[255, 0, 255], [255, 255, 255], [0, 255, 255]];\n// 0 <= (h, s, v) <= 1\n// returns 0 <= (r, g, b) <= 255 rounded to nearest integer\n// you can also pass in just one arg as an object of {h, s, v} props.\nfunction HSVtoRGB(h, s, v) {\n  let r, g, b;\n  let hh = 0;\n  if (arguments.length === 1) {\n    const hsv = h;\n    s = hsv.s, v = hsv.v, hh = hsv.h;\n  } else {\n    hh = h;\n  }\n  const i = Math.floor(hh * 6);\n  const f = hh * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      r = v, g = t, b = p;\n      break;\n    case 1:\n      r = q, g = v, b = p;\n      break;\n    case 2:\n      r = p, g = v, b = t;\n      break;\n    case 3:\n      r = p, g = q, b = v;\n      break;\n    case 4:\n      r = t, g = p, b = v;\n      break;\n    case 5:\n      r = v, g = p, b = q;\n      break;\n  }\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n\n// 1993 Park-Miller LCG\nfunction LCG(s) {\n  return function () {\n    s = Math.imul(48271, s) | 0 % 2147483647;\n    return (s & 2147483647) / 2147483648;\n  };\n}\n// Use it like so:\nconst myrand = LCG(123);\n\n// if index exceeds defaultColors start choosing random ones\n// returns [r,g,b] 0-255 range\nconst getColorByChannelIndex = index => {\n  if (!defaultColors[index]) {\n    defaultColors[index] = HSVtoRGB(myrand(), myrand() * 0.5 + 0.5, myrand() * 0.5 + 0.5);\n  }\n  return defaultColors[index];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy9jb25zdGFudHMvY29sb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUEsYUFBYSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDNUU7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsUUFBUUEsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtFQUN6QixJQUFJQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztFQUNYLElBQUlDLEVBQUUsR0FBRyxDQUFDO0VBQ1YsSUFBSUMsU0FBUyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQzFCLE1BQU1DLEdBQUcsR0FBR1QsQ0FBQztJQUNiQyxDQUFDLEdBQUdRLEdBQUcsQ0FBQ1IsQ0FBQyxFQUFFQyxDQUFDLEdBQUdPLEdBQUcsQ0FBQ1AsQ0FBQyxFQUFFSSxFQUFFLEdBQUdHLEdBQUcsQ0FBQ1QsQ0FBQztFQUNsQyxDQUFDLE1BQU07SUFDTE0sRUFBRSxHQUFHTixDQUFDO0VBQ1I7RUFDQSxNQUFNVSxDQUFDLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDTixFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQzVCLE1BQU1PLENBQUMsR0FBR1AsRUFBRSxHQUFHLENBQUMsR0FBR0ksQ0FBQztFQUNwQixNQUFNSSxDQUFDLEdBQUdaLENBQUMsSUFBSSxDQUFDLEdBQUdELENBQUMsQ0FBQztFQUNyQixNQUFNYyxDQUFDLEdBQUdiLENBQUMsSUFBSSxDQUFDLEdBQUdXLENBQUMsR0FBR1osQ0FBQyxDQUFDO0VBQ3pCLE1BQU1lLENBQUMsR0FBR2QsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBR1csQ0FBQyxJQUFJWixDQUFDLENBQUM7RUFDL0IsUUFBUVMsQ0FBQyxHQUFHLENBQUM7SUFDWCxLQUFLLENBQUM7TUFDSlAsQ0FBQyxHQUFHRCxDQUFDLEVBQUVFLENBQUMsR0FBR1ksQ0FBQyxFQUFFWCxDQUFDLEdBQUdTLENBQUM7TUFDbkI7SUFDRixLQUFLLENBQUM7TUFDSlgsQ0FBQyxHQUFHWSxDQUFDLEVBQUVYLENBQUMsR0FBR0YsQ0FBQyxFQUFFRyxDQUFDLEdBQUdTLENBQUM7TUFDbkI7SUFDRixLQUFLLENBQUM7TUFDSlgsQ0FBQyxHQUFHVyxDQUFDLEVBQUVWLENBQUMsR0FBR0YsQ0FBQyxFQUFFRyxDQUFDLEdBQUdXLENBQUM7TUFDbkI7SUFDRixLQUFLLENBQUM7TUFDSmIsQ0FBQyxHQUFHVyxDQUFDLEVBQUVWLENBQUMsR0FBR1csQ0FBQyxFQUFFVixDQUFDLEdBQUdILENBQUM7TUFDbkI7SUFDRixLQUFLLENBQUM7TUFDSkMsQ0FBQyxHQUFHYSxDQUFDLEVBQUVaLENBQUMsR0FBR1UsQ0FBQyxFQUFFVCxDQUFDLEdBQUdILENBQUM7TUFDbkI7SUFDRixLQUFLLENBQUM7TUFDSkMsQ0FBQyxHQUFHRCxDQUFDLEVBQUVFLENBQUMsR0FBR1UsQ0FBQyxFQUFFVCxDQUFDLEdBQUdVLENBQUM7TUFDbkI7RUFDSjtFQUNBLE9BQU8sQ0FBQ0osSUFBSSxDQUFDTSxLQUFLLENBQUNkLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRVEsSUFBSSxDQUFDTSxLQUFLLENBQUNiLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRU8sSUFBSSxDQUFDTSxLQUFLLENBQUNaLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUN4RTs7QUFFQTtBQUNBLFNBQVNhLEdBQUdBLENBQUNqQixDQUFDLEVBQUU7RUFDZCxPQUFPLFlBQVk7SUFDakJBLENBQUMsR0FBR1UsSUFBSSxDQUFDUSxJQUFJLENBQUMsS0FBSyxFQUFFbEIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVU7SUFDeEMsT0FBTyxDQUFDQSxDQUFDLEdBQUcsVUFBVSxJQUFJLFVBQVU7RUFDdEMsQ0FBQztBQUNIO0FBQ0E7QUFDQSxNQUFNbUIsTUFBTSxHQUFHRixHQUFHLENBQUMsR0FBRyxDQUFDOztBQUV2QjtBQUNBO0FBQ08sTUFBTUcsc0JBQXNCLEdBQUdDLEtBQUssSUFBSTtFQUM3QyxJQUFJLENBQUN4QixhQUFhLENBQUN3QixLQUFLLENBQUMsRUFBRTtJQUN6QnhCLGFBQWEsQ0FBQ3dCLEtBQUssQ0FBQyxHQUFHdkIsUUFBUSxDQUFDcUIsTUFBTSxDQUFDLENBQUMsRUFBRUEsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFQSxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDdkY7RUFDQSxPQUFPdEIsYUFBYSxDQUFDd0IsS0FBSyxDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWljcy93ZWItM2Qtdmlld2VyLy4uL3ZvbHVtZS12aWV3ZXIvZXMvY29uc3RhbnRzL2NvbG9ycy5qcz9iZWNjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBkZWZhdWx0Q29sb3JzID0gW1syNTUsIDAsIDI1NV0sIFsyNTUsIDI1NSwgMjU1XSwgWzAsIDI1NSwgMjU1XV07XG4vLyAwIDw9IChoLCBzLCB2KSA8PSAxXG4vLyByZXR1cm5zIDAgPD0gKHIsIGcsIGIpIDw9IDI1NSByb3VuZGVkIHRvIG5lYXJlc3QgaW50ZWdlclxuLy8geW91IGNhbiBhbHNvIHBhc3MgaW4ganVzdCBvbmUgYXJnIGFzIGFuIG9iamVjdCBvZiB7aCwgcywgdn0gcHJvcHMuXG5mdW5jdGlvbiBIU1Z0b1JHQihoLCBzLCB2KSB7XG4gIGxldCByLCBnLCBiO1xuICBsZXQgaGggPSAwO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGhzdiA9IGg7XG4gICAgcyA9IGhzdi5zLCB2ID0gaHN2LnYsIGhoID0gaHN2Lmg7XG4gIH0gZWxzZSB7XG4gICAgaGggPSBoO1xuICB9XG4gIGNvbnN0IGkgPSBNYXRoLmZsb29yKGhoICogNik7XG4gIGNvbnN0IGYgPSBoaCAqIDYgLSBpO1xuICBjb25zdCBwID0gdiAqICgxIC0gcyk7XG4gIGNvbnN0IHEgPSB2ICogKDEgLSBmICogcyk7XG4gIGNvbnN0IHQgPSB2ICogKDEgLSAoMSAtIGYpICogcyk7XG4gIHN3aXRjaCAoaSAlIDYpIHtcbiAgICBjYXNlIDA6XG4gICAgICByID0gdiwgZyA9IHQsIGIgPSBwO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgciA9IHEsIGcgPSB2LCBiID0gcDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHIgPSBwLCBnID0gdiwgYiA9IHQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICByID0gcCwgZyA9IHEsIGIgPSB2O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgciA9IHQsIGcgPSBwLCBiID0gdjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHIgPSB2LCBnID0gcCwgYiA9IHE7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gW01hdGgucm91bmQociAqIDI1NSksIE1hdGgucm91bmQoZyAqIDI1NSksIE1hdGgucm91bmQoYiAqIDI1NSldO1xufVxuXG4vLyAxOTkzIFBhcmstTWlsbGVyIExDR1xuZnVuY3Rpb24gTENHKHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBzID0gTWF0aC5pbXVsKDQ4MjcxLCBzKSB8IDAgJSAyMTQ3NDgzNjQ3O1xuICAgIHJldHVybiAocyAmIDIxNDc0ODM2NDcpIC8gMjE0NzQ4MzY0ODtcbiAgfTtcbn1cbi8vIFVzZSBpdCBsaWtlIHNvOlxuY29uc3QgbXlyYW5kID0gTENHKDEyMyk7XG5cbi8vIGlmIGluZGV4IGV4Y2VlZHMgZGVmYXVsdENvbG9ycyBzdGFydCBjaG9vc2luZyByYW5kb20gb25lc1xuLy8gcmV0dXJucyBbcixnLGJdIDAtMjU1IHJhbmdlXG5leHBvcnQgY29uc3QgZ2V0Q29sb3JCeUNoYW5uZWxJbmRleCA9IGluZGV4ID0+IHtcbiAgaWYgKCFkZWZhdWx0Q29sb3JzW2luZGV4XSkge1xuICAgIGRlZmF1bHRDb2xvcnNbaW5kZXhdID0gSFNWdG9SR0IobXlyYW5kKCksIG15cmFuZCgpICogMC41ICsgMC41LCBteXJhbmQoKSAqIDAuNSArIDAuNSk7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRDb2xvcnNbaW5kZXhdO1xufTsiXSwibmFtZXMiOlsiZGVmYXVsdENvbG9ycyIsIkhTVnRvUkdCIiwiaCIsInMiLCJ2IiwiciIsImciLCJiIiwiaGgiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJoc3YiLCJpIiwiTWF0aCIsImZsb29yIiwiZiIsInAiLCJxIiwidCIsInJvdW5kIiwiTENHIiwiaW11bCIsIm15cmFuZCIsImdldENvbG9yQnlDaGFubmVsSW5kZXgiLCJpbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../volume-viewer/es/constants/colors.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/IVolumeLoader.js":
/*!****************************************************!*\
  !*** ../volume-viewer/es/loaders/IVolumeLoader.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LoadSpec: () => (/* binding */ LoadSpec),\n/* harmony export */   ThreadableVolumeLoader: () => (/* binding */ ThreadableVolumeLoader),\n/* harmony export */   VolumeDims: () => (/* binding */ VolumeDims),\n/* harmony export */   loadSpecToString: () => (/* binding */ loadSpecToString)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"../volume-viewer/node_modules/three/build/three.module.js\");\n/* harmony import */ var _Volume_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Volume.js */ \"../volume-viewer/es/Volume.js\");\n/* harmony import */ var _VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VolumeLoaderUtils.js */ \"../volume-viewer/es/loaders/VolumeLoaderUtils.js\");\n\n\n\nclass LoadSpec {\n  time = 0;\n  /** The max size of a volume atlas that may be produced by a load. Used to pick the appropriate multiscale level. */\n\n  /** An optional bias added to the scale level index after the optimal level is picked based on `maxAtlasEdge`. */\n\n  /**\r\n   * The max scale level to load. Even when this is specified, the loader may pick a *lower* scale level based on\r\n   * limits imposed by `scaleLevelBias` and `maxAtlasEdge` (or their defaults if unspecified).\r\n   */\n\n  /** Subregion of volume to load. If not specified, the entire volume is loaded. Specify as floats between 0-1. */\n  subregion = new three__WEBPACK_IMPORTED_MODULE_2__.Box3(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0), new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(1, 1, 1));\n}\nfunction loadSpecToString(spec) {\n  const {\n    min,\n    max\n  } = spec.subregion;\n  return `${spec.multiscaleLevel}:${spec.time}:x(${min.x},${max.x}):y(${min.y},${max.y}):z(${min.z},${max.z})`;\n}\nclass VolumeDims {\n  // shape: [t, c, z, y, x]\n  shape = [0, 0, 0, 0, 0];\n  // spacing: [t, c, z, y, x]; generally expect 1 for non-spatial dimensions\n  spacing = [1, 1, 1, 1, 1];\n  spaceUnit = \"μm\";\n  timeUnit = \"s\";\n  // TODO make this an enum?\n  dataType = \"uint8\";\n}\n\n/**\r\n * @callback PerChannelCallback\r\n * @param {string} imageurl\r\n * @param {Volume} volume\r\n * @param {number} channelindex\r\n */\n\n/**\r\n * @callback RawChannelDataCallback - allow lists of channel indices and data arrays to be passed to the callback\r\n * @param {number[]} channelIndex - The indices of the channels that were loaded\r\n * @param {Uint8Array[]} data - The raw data for each channel (renormalized to 0-255 range)\r\n * @param {[number, number][]} ranges - The min and max values for each channel in their original range\r\n * @param {[number, number]} atlasDims - The dimensions of the atlas, if the data is in an atlas format\r\n */\n\n/**\r\n * Loads volume data from a source specified by a `LoadSpec`.\r\n *\r\n * Loaders may keep state for reuse between volume creation and volume loading, and should be kept alive until volume\r\n * loading is complete. (See `createVolume`)\r\n */\n\n/** Abstract class which allows loaders to accept and return types that are easier to transfer to/from a worker. */\nclass ThreadableVolumeLoader {\n  /** Unchanged from `IVolumeLoader`. See that interface for details. */\n\n  /**\r\n   * Creates an `ImageInfo` object from a `LoadSpec`, which may be passed to the `Volume` constructor to create an\r\n   * empty volume that can accept data loaded with the given `LoadSpec`.\r\n   *\r\n   * Also returns a new `LoadSpec` that may have been modified from the input `LoadSpec` to reflect the constraints or\r\n   * abilities of the loader. This new `LoadSpec` should be used when constructing the `Volume`, _not_ the original.\r\n   */\n\n  /**\r\n   * Begins loading per-channel data for the volume specified by `imageInfo` and `loadSpec`.\r\n   *\r\n   * This function accepts two required callbacks. The first, `onUpdateVolumeMetadata`, should be called at most once\r\n   * to modify the `Volume`'s `imageInfo` and/or `loadSpec` properties based on changes made by this load. Actual\r\n   * loaded channel data is passed to `onData` as it is loaded.\r\n   *\r\n   * Depending on the loader, the array passed to `onData` may be in simple 3d dimension order or reflect a 2d atlas.\r\n   * If the latter, the dimensions of the atlas are passed as the third argument to `onData`.\r\n   *\r\n   * The returned promise should resolve when all data has been loaded, or reject if any error occurs while loading.\r\n   */\n\n  setPrefetchPriority(_directions) {\n    // no-op by default\n  }\n  syncMultichannelLoading(_sync) {\n    // default behavior is async, to update channels as they arrive, depending on each\n    // loader's implementation details.\n  }\n  async createVolume(loadSpec, onChannelLoaded) {\n    const {\n      imageInfo,\n      loadSpec: adjustedLoadSpec\n    } = await this.createImageInfo(loadSpec);\n    const vol = new _Volume_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](imageInfo, adjustedLoadSpec, this);\n    vol.channelLoadCallback = onChannelLoaded;\n    vol.imageMetadata = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_1__.buildDefaultMetadata)(imageInfo);\n    return vol;\n  }\n  async loadVolumeData(volume, loadSpecOverride, onChannelLoaded) {\n    const onUpdateMetadata = (imageInfo, loadSpec) => {\n      if (imageInfo) {\n        volume.imageInfo = imageInfo;\n        volume.updateDimensions();\n      }\n      volume.loadSpec = {\n        ...loadSpec,\n        ...spec\n      };\n    };\n    const onChannelData = (channelIndices, dataArrays, ranges, atlasDims) => {\n      for (let i = 0; i < channelIndices.length; i++) {\n        const channelIndex = channelIndices[i];\n        const data = dataArrays[i];\n        const range = ranges[i];\n        if (atlasDims) {\n          volume.setChannelDataFromAtlas(channelIndex, data, atlasDims[0], atlasDims[1]);\n        } else {\n          volume.setChannelDataFromVolume(channelIndex, data, range);\n        }\n        onChannelLoaded?.(volume, channelIndex);\n      }\n    };\n    const spec = {\n      ...loadSpecOverride,\n      ...volume.loadSpec\n    };\n    return this.loadRawChannelData(volume.imageInfo, spec, onUpdateMetadata, onChannelData);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/IVolumeLoader.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/JsonImageInfoLoader.js":
/*!**********************************************************!*\
  !*** ../volume-viewer/es/loaders/JsonImageInfoLoader.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonImageInfoLoader: () => (/* binding */ JsonImageInfoLoader)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"../volume-viewer/node_modules/three/build/three.module.js\");\n/* harmony import */ var _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IVolumeLoader.js */ \"../volume-viewer/es/loaders/IVolumeLoader.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ \"../volume-viewer/es/types.js\");\n\n\n\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/* eslint-enable @typescript-eslint/naming-convention */\n\nconst convertImageInfo = json => ({\n  name: json.name,\n  originalSize: new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(json.width, json.height, json.tiles),\n  atlasTileDims: new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(json.cols, json.rows),\n  volumeSize: new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(json.tile_width, json.tile_height, json.tiles),\n  subregionSize: new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(json.tile_width, json.tile_height, json.tiles),\n  subregionOffset: new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0),\n  physicalPixelSize: new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(json.pixel_size_x, json.pixel_size_y, json.pixel_size_z),\n  spatialUnit: json.pixel_size_unit || \"μm\",\n  numChannels: json.channels,\n  channelNames: json.channel_names,\n  channelColors: json.channel_colors,\n  times: json.times || 1,\n  timeScale: json.time_scale || 1,\n  timeUnit: json.time_unit || \"s\",\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n  transform: {\n    translation: json.transform?.translation ? new three__WEBPACK_IMPORTED_MODULE_2__.Vector3().fromArray(json.transform.translation) : new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0),\n    rotation: json.transform?.rotation ? new three__WEBPACK_IMPORTED_MODULE_2__.Vector3().fromArray(json.transform.rotation) : new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0)\n  },\n  userData: json.userData\n});\nclass JsonImageInfoLoader extends _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_0__.ThreadableVolumeLoader {\n  constructor(urls, cache) {\n    super();\n    if (Array.isArray(urls)) {\n      this.urls = urls;\n    } else {\n      this.urls = [urls];\n    }\n    this.jsonInfo = new Array(this.urls.length);\n    this.cache = cache;\n  }\n  async getJsonImageInfo(time) {\n    const cachedInfo = this.jsonInfo[time];\n    if (cachedInfo) {\n      return cachedInfo;\n    }\n    const response = await fetch(this.urls[time]);\n    const imageInfo = await response.json();\n    imageInfo.pixel_size_unit = imageInfo.pixel_size_unit || \"μm\";\n    imageInfo.times = imageInfo.times || this.urls.length;\n    this.jsonInfo[time] = imageInfo;\n    return imageInfo;\n  }\n  async loadDims(loadSpec) {\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n    const d = new _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_0__.VolumeDims();\n    d.shape = [jsonInfo.times || 1, jsonInfo.channels, jsonInfo.tiles, jsonInfo.tile_height, jsonInfo.tile_width];\n    d.spacing = [1, 1, jsonInfo.pixel_size_z, jsonInfo.pixel_size_y, jsonInfo.pixel_size_x];\n    d.spaceUnit = jsonInfo.pixel_size_unit || \"μm\";\n    d.dataType = \"uint8\";\n    return [d];\n  }\n  async createImageInfo(loadSpec) {\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n    return {\n      imageInfo: convertImageInfo(jsonInfo),\n      loadSpec\n    };\n  }\n  async loadRawChannelData(imageInfo, loadSpec, onUpdateMetadata, onData) {\n    // if you need to adjust image paths prior to download,\n    // now is the time to do it.\n    // Try to figure out the urlPrefix from the LoadSpec.\n    // For this format we assume the image data is in the same directory as the json file.\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n    let images = jsonInfo?.images;\n    if (!images) {\n      return;\n    }\n    const requestedChannels = loadSpec.channels;\n    if (requestedChannels) {\n      // If only some channels are requested, load only images which contain at least one requested channel\n      images = images.filter(({\n        channels\n      }) => channels.some(ch => ch in requestedChannels));\n    }\n\n    // This regex removes everything after the last slash, so the url had better be simple.\n    const urlPrefix = this.urls[loadSpec.time].replace(/[^/]*$/, \"\");\n    images = images.map(element => ({\n      ...element,\n      name: urlPrefix + element.name\n    }));\n\n    // Update `image`'s `loadSpec` before loading\n    const adjustedLoadSpec = {\n      ...loadSpec,\n      // `subregion` and `multiscaleLevel` are unused by this loader\n      subregion: new three__WEBPACK_IMPORTED_MODULE_2__.Box3(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0), new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(1, 1, 1)),\n      multiscaleLevel: 0,\n      // include all channels in any loaded images\n      channels: images.flatMap(({\n        channels\n      }) => channels)\n    };\n    onUpdateMetadata(undefined, adjustedLoadSpec);\n    const w = imageInfo.atlasTileDims.x * imageInfo.volumeSize.x;\n    const h = imageInfo.atlasTileDims.y * imageInfo.volumeSize.y;\n    const wrappedOnData = (ch, data, ranges) => onData(ch, data, ranges, [w, h]);\n    await JsonImageInfoLoader.loadVolumeAtlasData(images, wrappedOnData, this.cache);\n  }\n\n  /**\r\n   * load per-channel volume data from a batch of image files containing the volume slices tiled across the images\r\n   * @param {Array.<{name:string, channels:Array.<number>}>} imageArray\r\n   * @param {RawChannelDataCallback} onData Per-channel callback. Called when each channel's atlased volume data is loaded\r\n   * @param {VolumeCache} cache\r\n   * @example loadVolumeAtlasData([{\r\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_0.png\",\r\n   *     \"channels\": [0, 1, 2]\r\n   * }, {\r\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_1.png\",\r\n   *     \"channels\": [3, 4, 5]\r\n   * }, {\r\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_2.png\",\r\n   *     \"channels\": [6, 7, 8]\r\n   * }], mycallback);\r\n   */\n  static async loadVolumeAtlasData(imageArray, onData, cache) {\n    const imagePromises = imageArray.map(async image => {\n      // Because the data is fetched such that one fetch returns a whole batch,\n      // if any in batch is cached then they all should be. So if any in batch is NOT cached,\n      // then we will have to do a batch request. This logic works both ways because it's all or nothing.\n      let cacheHit = true;\n      for (let j = 0; j < Math.min(image.channels.length, 4); ++j) {\n        const chindex = image.channels[j];\n        const cacheResult = cache?.get(`${image.name}/${chindex}`);\n        if (cacheResult) {\n          // all data coming from this loader is natively 8-bit\n          onData([chindex], [new Uint8Array(cacheResult)], [_types_js__WEBPACK_IMPORTED_MODULE_1__.DATARANGE_UINT8]);\n        } else {\n          cacheHit = false;\n          // we can stop checking because we know we are going to have to fetch the whole batch\n          break;\n        }\n      }\n\n      // if all channels were in cache then we can move on to the next\n      // image (batch) without requesting\n      if (cacheHit) {\n        return;\n      }\n      const response = await fetch(image.name, {\n        mode: \"cors\"\n      });\n      const blob = await response.blob();\n      const bitmap = await createImageBitmap(blob);\n      const canvas = new OffscreenCanvas(bitmap.width, bitmap.height);\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        console.log(\"Error creating canvas 2d context for \" + image.name);\n        return;\n      }\n      ctx.globalCompositeOperation = \"copy\";\n      ctx.globalAlpha = 1.0;\n      ctx.drawImage(bitmap, 0, 0);\n      const iData = ctx.getImageData(0, 0, bitmap.width, bitmap.height);\n      const channelsBits = [];\n      const length = bitmap.width * bitmap.height;\n\n      // allocate channels in batch\n      for (let ch = 0; ch < Math.min(image.channels.length, 4); ++ch) {\n        channelsBits.push(new Uint8Array(length));\n      }\n\n      // extract the data\n      for (let j = 0; j < Math.min(image.channels.length, 4); ++j) {\n        for (let px = 0; px < length; px++) {\n          channelsBits[j][px] = iData.data[px * 4 + j];\n        }\n      }\n\n      // done with `iData` and `canvas` now.\n\n      for (let ch = 0; ch < Math.min(image.channels.length, 4); ++ch) {\n        const chindex = image.channels[ch];\n        cache?.insert(`${image.name}/${chindex}`, channelsBits[ch]);\n        // NOTE: the atlas dimensions passed in here are currently unused by `JSONImageInfoLoader`\n        // all data coming from this loader is natively 8-bit\n        onData([chindex], [channelsBits[ch]], [_types_js__WEBPACK_IMPORTED_MODULE_1__.DATARANGE_UINT8], [bitmap.width, bitmap.height]);\n      }\n    });\n    await Promise.all(imagePromises);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/JsonImageInfoLoader.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/OmeZarrLoader.js":
/*!****************************************************!*\
  !*** ../volume-viewer/es/loaders/OmeZarrLoader.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OMEZarrLoader: () => (/* binding */ OMEZarrLoader)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! three */ \"../volume-viewer/node_modules/three/build/three.module.js\");\n/* harmony import */ var _zarrita_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @zarrita/core */ \"../volume-viewer/node_modules/@zarrita/core/dist/src/hierarchy.js\");\n/* harmony import */ var _zarrita_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @zarrita/core */ \"../volume-viewer/node_modules/@zarrita/core/dist/src/open.js\");\n/* harmony import */ var _zarrita_indexing__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @zarrita/indexing */ \"../volume-viewer/node_modules/@zarrita/indexing/dist/src/util.js\");\n/* harmony import */ var _zarrita_indexing__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @zarrita/indexing */ \"../volume-viewer/node_modules/@zarrita/indexing/dist/src/ops.js\");\n/* harmony import */ var zarrita__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zarrita */ \"../volume-viewer/node_modules/@zarrita/storage/dist/src/fetch.js\");\n/* harmony import */ var _utils_SubscribableRequestQueue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/SubscribableRequestQueue.js */ \"../volume-viewer/es/utils/SubscribableRequestQueue.js\");\n/* harmony import */ var _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IVolumeLoader.js */ \"../volume-viewer/es/loaders/IVolumeLoader.js\");\n/* harmony import */ var _VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VolumeLoaderUtils.js */ \"../volume-viewer/es/loaders/VolumeLoaderUtils.js\");\n/* harmony import */ var _zarr_utils_ChunkPrefetchIterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./zarr_utils/ChunkPrefetchIterator.js */ \"../volume-viewer/es/loaders/zarr_utils/ChunkPrefetchIterator.js\");\n/* harmony import */ var _zarr_utils_WrappedStore_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./zarr_utils/WrappedStore.js */ \"../volume-viewer/es/loaders/zarr_utils/WrappedStore.js\");\n/* harmony import */ var _zarr_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./zarr_utils/utils.js */ \"../volume-viewer/es/loaders/zarr_utils/utils.js\");\n/* harmony import */ var _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./VolumeLoadError.js */ \"../volume-viewer/es/loaders/VolumeLoadError.js\");\n/* harmony import */ var _zarr_utils_validation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./zarr_utils/validation.js */ \"../volume-viewer/es/loaders/zarr_utils/validation.js\");\n\n\n\n// Importing `FetchStore` from its home subpackage (@zarrita/storage) causes errors.\n// Getting it from the top-level package means we don't get its type. This is also a bug, but it's more acceptable.\n\n\n\n\n\n\n\n\n\nconst CHUNK_REQUEST_CANCEL_REASON = \"chunk request cancelled\";\n\n// returns the converted data and the original min and max values (which have been remapped to 0 and 255)\nfunction convertChannel(channelData) {\n  // get min and max\n  let min = channelData[0];\n  let max = channelData[0];\n  for (let i = 0; i < channelData.length; i++) {\n    const val = channelData[i];\n    if (val < min) {\n      min = val;\n    }\n    if (val > max) {\n      max = val;\n    }\n  }\n  if (channelData instanceof Uint8Array) {\n    return [channelData, min, max];\n  }\n\n  // normalize and convert to u8\n  const u8 = new Uint8Array(channelData.length);\n  const range = max - min;\n  for (let i = 0; i < channelData.length; i++) {\n    u8[i] = (channelData[i] - min) / range * 255;\n  }\n  return [u8, min, max];\n}\nconst DEFAULT_FETCH_OPTIONS = {\n  maxPrefetchDistance: [5, 5, 5, 5],\n  maxPrefetchChunks: 30\n};\nclass OMEZarrLoader extends _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_1__.ThreadableVolumeLoader {\n  /** The ID of the subscriber responsible for \"actual loads\" (non-prefetch requests) */\n\n  /** The ID of the subscriber responsible for prefetches, so that requests can be cancelled and reissued */\n\n  // TODO: this property should definitely be owned by `Volume` if this loader is ever used by multiple volumes.\n  //   This may cause errors or incorrect results otherwise!\n\n  syncChannels = false;\n  constructor(\n  /**\r\n   * Array of records, each containing the objects and metadata we need to load from one source of multiscale zarr\r\n   * data. See documentation on `ZarrSource` for more.\r\n   */\n  sources, /** Handle to a `SubscribableRequestQueue` for smart concurrency management and request cancelling/reissuing. */\n  requestQueue, /** Options to configure (pre)fetching behavior. */\n  fetchOptions = DEFAULT_FETCH_OPTIONS, /** Direction(s) to prioritize when prefetching. Stored separate from `fetchOptions` since it may be mutated. */\n  priorityDirections = []) {\n    super();\n    this.sources = sources;\n    this.requestQueue = requestQueue;\n    this.fetchOptions = fetchOptions;\n    this.priorityDirections = priorityDirections;\n  }\n\n  /**\r\n   * Creates a new `OMEZarrLoader`.\r\n   *\r\n   * @param urls The URL(s) of the OME-Zarr data to load. If `urls` is an array, the loader will attempt to find scale\r\n   *  levels with exactly the same size in every source. If matching level(s) are available, the loader will produce a\r\n   *  volume containing all channels from every provided zarr in the order they appear in `urls`. If no matching sets\r\n   *  of scale levels are available, creation fails.\r\n   * @param scenes The scene(s) to load from each URL. If `urls` is an array, `scenes` may either be an array of values\r\n   *  corresponding to each URL, or a single value to apply to all URLs. Default 0.\r\n   * @param cache A cache to use for storing fetched data. If not provided, a new cache will be created.\r\n   * @param queue A queue to use for managing requests. If not provided, a new queue will be created.\r\n   * @param fetchOptions Options to configure (pre)fetching behavior.\r\n   */\n  static async createLoader(urls, scenes = 0, cache, queue, fetchOptions) {\n    // Setup queue and store, get basic metadata\n    if (!queue) {\n      queue = new _utils_SubscribableRequestQueue_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](fetchOptions?.concurrencyLimit, fetchOptions?.prefetchConcurrencyLimit);\n    }\n    const urlsArr = Array.isArray(urls) ? urls : [urls];\n    const scenesArr = Array.isArray(scenes) ? scenes : [scenes];\n\n    // Create one `ZarrSource` per URL\n    const sourceProms = urlsArr.map(async (url, i) => {\n      const store = new _zarr_utils_WrappedStore_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](new zarrita__WEBPACK_IMPORTED_MODULE_8__[\"default\"](url), cache, queue);\n      const root = _zarrita_core__WEBPACK_IMPORTED_MODULE_9__.root(store);\n      const group = await _zarrita_core__WEBPACK_IMPORTED_MODULE_10__.open(root, {\n        kind: \"group\"\n      }).catch((0,_VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__.wrapVolumeLoadError)(`Failed to open OME-Zarr data at ${url}`, _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__.VolumeLoadErrorType.NOT_FOUND));\n\n      // Pick scene (multiscale)\n      let scene = scenesArr[Math.min(i, scenesArr.length - 1)];\n      if (scene > group.attrs.multiscales?.length) {\n        console.warn(`WARNING: OMEZarrLoader: scene ${scene} is invalid. Using scene 0.`);\n        scene = 0;\n      }\n      (0,_zarr_utils_validation_js__WEBPACK_IMPORTED_MODULE_7__.validateOMEZarrMetadata)(group.attrs, scene, urlsArr.length > 1 ? `Zarr source ${i}` : \"Zarr\");\n      const {\n        multiscales,\n        omero\n      } = group.attrs;\n      const multiscaleMetadata = multiscales[scene];\n\n      // Open all scale levels of multiscale\n      const lvlProms = multiscaleMetadata.datasets.map(({\n        path\n      }) => _zarrita_core__WEBPACK_IMPORTED_MODULE_10__.open(root.resolve(path), {\n        kind: \"array\"\n      }).catch((0,_VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__.wrapVolumeLoadError)(`Failed to open scale level ${path} of OME-Zarr data at ${url}`, _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__.VolumeLoadErrorType.NOT_FOUND)));\n      const scaleLevels = await Promise.all(lvlProms);\n      const axesTCZYX = (0,_zarr_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.remapAxesToTCZYX)(multiscaleMetadata.axes);\n      return {\n        scaleLevels,\n        multiscaleMetadata,\n        omeroMetadata: omero,\n        axesTCZYX,\n        channelOffset: 0\n      };\n    });\n    const sources = await Promise.all(sourceProms);\n\n    // Set `channelOffset`s so we can match channel indices to sources\n    let channelCount = 0;\n    for (const s of sources) {\n      s.channelOffset = channelCount;\n      channelCount += s.omeroMetadata?.channels.length ?? s.scaleLevels[0].shape[s.axesTCZYX[1]];\n    }\n    // Ensure the sizes of all sources' scale levels are matched up. See this function's docs for more.\n    (0,_zarr_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.matchSourceScaleLevels)(sources);\n    // TODO: if `matchSourceScaleLevels` returned successfully, every one of these sources' `multiscaleMetadata` is the\n    // same in every field we care about, so we only ever use the first source's `multiscaleMetadata` after this point.\n    // Should we only store one `OMEMultiscale` record total, rather than one per source?\n    const priorityDirs = fetchOptions?.priorityDirections ? fetchOptions.priorityDirections.slice() : undefined;\n    return new OMEZarrLoader(sources, queue, fetchOptions, priorityDirs);\n  }\n  getUnitSymbols() {\n    const source = this.sources[0];\n    // Assume all spatial axes in all sources have the same units - we have no means of storing per-axis unit symbols\n    const xi = source.axesTCZYX[4];\n    const spaceUnitName = source.multiscaleMetadata.axes[xi].unit;\n    const spaceUnitSymbol = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.unitNameToSymbol)(spaceUnitName) || spaceUnitName || \"\";\n    const ti = source.axesTCZYX[0];\n    const timeUnitName = ti > -1 ? source.multiscaleMetadata.axes[ti].unit : undefined;\n    const timeUnitSymbol = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.unitNameToSymbol)(timeUnitName) || timeUnitName || \"\";\n    return [spaceUnitSymbol, timeUnitSymbol];\n  }\n  getLevelShapesZYX() {\n    const source = this.sources[0];\n    const [z, y, x] = source.axesTCZYX.slice(-3);\n    return source.scaleLevels.map(({\n      shape\n    }) => [z === -1 ? 1 : shape[z], shape[y], shape[x]]);\n  }\n  getScale(level) {\n    return (0,_zarr_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.getScale)(this.sources[0].multiscaleMetadata.datasets[level], this.sources[0].axesTCZYX);\n  }\n  orderByDimension(valsTCZYX, sourceIdx = 0) {\n    return (0,_zarr_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.orderByDimension)(valsTCZYX, this.sources[sourceIdx].axesTCZYX);\n  }\n  orderByTCZYX(valsDimension, defaultValue, sourceIdx = 0) {\n    return (0,_zarr_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.orderByTCZYX)(valsDimension, this.sources[sourceIdx].axesTCZYX, defaultValue);\n  }\n\n  /**\r\n   * Converts a volume channel index to the index of its zarr source and its channel index within that zarr.\r\n   * e.g., if the loader has 2 sources, the first with 3 channels and the second with 2, then `matchChannelToSource(4)`\r\n   * returns `[1, 1]` (the second channel of the second source).\r\n   */\n  matchChannelToSource(absoluteChannelIndex) {\n    const lastSrcIdx = this.sources.length - 1;\n    const lastSrc = this.sources[lastSrcIdx];\n    const lastSrcNumChannels = lastSrc.scaleLevels[0].shape[lastSrc.axesTCZYX[1]];\n    const maxChannelIndex = lastSrc.channelOffset + lastSrcNumChannels;\n    if (absoluteChannelIndex > maxChannelIndex) {\n      throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__.VolumeLoadError(`Volume channel index ${absoluteChannelIndex} out of range (${maxChannelIndex} channels available)`, {\n        type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__.VolumeLoadErrorType.INVALID_METADATA\n      });\n    }\n    const firstGreaterIdx = this.sources.findIndex(src => src.channelOffset > absoluteChannelIndex);\n    const sourceIndex = firstGreaterIdx === -1 ? lastSrcIdx : firstGreaterIdx - 1;\n    const channelIndexInSource = absoluteChannelIndex - this.sources[sourceIndex].channelOffset;\n    return {\n      sourceIndex,\n      channelIndexInSource\n    };\n  }\n\n  /**\r\n   * Change which directions to prioritize when prefetching. All chunks will be prefetched in these directions before\r\n   * any chunks are prefetched in any other directions.\r\n   */\n  setPrefetchPriority(directions) {\n    this.priorityDirections = directions;\n  }\n  syncMultichannelLoading(sync) {\n    this.syncChannels = sync;\n  }\n  loadDims(loadSpec) {\n    const [spaceUnit, timeUnit] = this.getUnitSymbols();\n    // Compute subregion size so we can factor that in\n    const maxExtent = this.maxExtent ?? new three__WEBPACK_IMPORTED_MODULE_11__.Box3(new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(0, 0, 0), new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(1, 1, 1));\n    const subregion = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.composeSubregion)(loadSpec.subregion, maxExtent);\n    const regionSize = subregion.getSize(new three__WEBPACK_IMPORTED_MODULE_11__.Vector3());\n    const regionArr = [1, 1, regionSize.z, regionSize.y, regionSize.x];\n    const result = this.sources[0].scaleLevels.map((level, i) => {\n      const scale = this.getScale(i);\n      const dims = new _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_1__.VolumeDims();\n      dims.spaceUnit = spaceUnit;\n      dims.timeUnit = timeUnit;\n      dims.shape = this.orderByTCZYX(level.shape, 1).map((val, idx) => Math.max(Math.ceil(val * regionArr[idx]), 1));\n      dims.spacing = this.orderByTCZYX(scale, 1);\n      return dims;\n    });\n    return Promise.resolve(result);\n  }\n  createImageInfo(loadSpec) {\n    // We ensured most info (dims, chunks, etc.) matched between sources earlier, so we can just use the first source.\n    const source0 = this.sources[0];\n    const [t,, z, y, x] = source0.axesTCZYX;\n    const hasT = t > -1;\n    const hasZ = z > -1;\n    const shape0 = source0.scaleLevels[0].shape;\n    const levelToLoad = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.pickLevelToLoad)(loadSpec, this.getLevelShapesZYX());\n    const shapeLv = source0.scaleLevels[levelToLoad].shape;\n    const [spatialUnit, timeUnit] = this.getUnitSymbols();\n\n    // Now we care about other sources: # of channels is the `channelOffset` of the last source plus its # of channels\n    const sourceLast = this.sources[this.sources.length - 1];\n    const cLast = sourceLast.axesTCZYX[1];\n    const lastHasC = cLast > -1;\n    const numChannels = sourceLast.channelOffset + (lastHasC ? sourceLast.scaleLevels[levelToLoad].shape[cLast] : 1);\n    // we need to make sure that the corresponding matched shapes\n    // use the min size of T\n    let times = 1;\n    if (hasT) {\n      times = shapeLv[t];\n      for (let i = 0; i < this.sources.length; i++) {\n        const shape = this.sources[i].scaleLevels[levelToLoad].shape;\n        const tindex = this.sources[i].axesTCZYX[0];\n        if (shape[tindex] < times) {\n          console.warn(\"The number of time points is not consistent across sources: \", shape[tindex], times);\n          times = shape[tindex];\n        }\n      }\n    }\n    if (!this.maxExtent) {\n      this.maxExtent = loadSpec.subregion.clone();\n    }\n    const pxDims0 = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.convertSubregionToPixels)(loadSpec.subregion, new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(shape0[x], shape0[y], hasZ ? shape0[z] : 1));\n    const pxSize0 = pxDims0.getSize(new three__WEBPACK_IMPORTED_MODULE_11__.Vector3());\n    const pxDimsLv = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.convertSubregionToPixels)(loadSpec.subregion, new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(shapeLv[x], shapeLv[y], hasZ ? shapeLv[z] : 1));\n    const pxSizeLv = pxDimsLv.getSize(new three__WEBPACK_IMPORTED_MODULE_11__.Vector3());\n    const atlasTileDims = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.computePackedAtlasDims)(pxSizeLv.z, pxSizeLv.x, pxSizeLv.y);\n\n    // Channel names is the other place where we have to check every source\n    // Track which channel names we've seen so far, so that we can rename them to avoid name collisions\n    const channelNamesMap = new Map();\n    const channelNames = this.sources.flatMap(src => {\n      const sourceChannelNames = (0,_zarr_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.getSourceChannelNames)(src);\n\n      // Resolve name collisions\n      return sourceChannelNames.map(channelName => {\n        const numMatchingChannels = channelNamesMap.get(channelName);\n        if (numMatchingChannels !== undefined) {\n          // If e.g. we've seen channel \"Membrane\" once before, rename this one to \"Membrane (1)\"\n          channelNamesMap.set(channelName, numMatchingChannels + 1);\n          return `${channelName} (${numMatchingChannels})`;\n        } else {\n          channelNamesMap.set(channelName, 1);\n          return channelName;\n        }\n      });\n    });\n\n    // for physicalPixelSize, we use the scale of the first level\n    const scale5d = this.getScale(0);\n    // assume that ImageInfo wants the timeScale of level 0\n    const timeScale = hasT ? scale5d[t] : 1;\n    const imgdata = {\n      name: source0.omeroMetadata?.name || \"Volume\",\n      originalSize: pxSize0,\n      atlasTileDims,\n      volumeSize: pxSizeLv,\n      subregionSize: pxSizeLv.clone(),\n      subregionOffset: new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(0, 0, 0),\n      physicalPixelSize: new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(scale5d[x], scale5d[y], hasZ ? scale5d[z] : Math.min(scale5d[x], scale5d[y])),\n      spatialUnit,\n      numChannels,\n      channelNames,\n      times,\n      timeScale,\n      timeUnit,\n      numMultiscaleLevels: source0.scaleLevels.length,\n      multiscaleLevel: levelToLoad,\n      transform: {\n        translation: new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(0, 0, 0),\n        rotation: new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(0, 0, 0)\n      }\n    };\n\n    // The `LoadSpec` passed in at this stage should represent the subset which this loader loads, not that\n    // which the volume contains. The volume contains the full extent of the subset recognized by this loader.\n    const fullExtentLoadSpec = {\n      ...loadSpec,\n      subregion: new three__WEBPACK_IMPORTED_MODULE_11__.Box3(new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(0, 0, 0), new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(1, 1, 1))\n    };\n    return Promise.resolve({\n      imageInfo: imgdata,\n      loadSpec: fullExtentLoadSpec\n    });\n  }\n  async prefetchChunk(scaleLevel, coords, subscriber) {\n    const {\n      store,\n      path\n    } = scaleLevel;\n    const separator = path.endsWith(\"/\") ? \"\" : \"/\";\n    const key = path + separator + this.orderByDimension(coords).join(\"/\");\n    // Calling `get` and doing nothing with the result still triggers a cache check, fetch, and insertion\n    await store.get(key, {\n      subscriber,\n      isPrefetch: true\n    }).catch((0,_VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__.wrapVolumeLoadError)(`Unable to prefetch chunk with key ${key}`, _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__.VolumeLoadErrorType.LOAD_DATA_FAILED, CHUNK_REQUEST_CANCEL_REASON));\n  }\n\n  /** Reads a list of chunk keys requested by a `loadVolumeData` call and sets up appropriate prefetch requests. */\n  beginPrefetch(keys, scaleLevel) {\n    // Convert keys to arrays of coords\n    const chunkCoords = keys.map(({\n      sourceIdx,\n      key\n    }) => {\n      const numDims = (0,_zarr_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.getDimensionCount)(this.sources[sourceIdx].axesTCZYX);\n      const coordsInDimensionOrder = key.trim().split(\"/\").slice(-numDims).filter(s => s !== \"\").map(s => parseInt(s, 10));\n      const sourceCoords = this.orderByTCZYX(coordsInDimensionOrder, 0, sourceIdx);\n      // Convert source channel index to absolute channel index for `ChunkPrefetchIterator`'s benefit\n      // (we match chunk coordinates output from `ChunkPrefetchIterator` back to sources below)\n      sourceCoords[1] += this.sources[sourceIdx].channelOffset;\n      return sourceCoords;\n    });\n\n    // Get number of chunks per dimension in every source array\n    const chunkDimsTCZYX = this.sources.map(src => {\n      const level = src.scaleLevels[scaleLevel];\n      const chunkDimsUnordered = level.shape.map((dim, idx) => Math.ceil(dim / level.chunks[idx]));\n      return this.orderByTCZYX(chunkDimsUnordered, 1);\n    });\n    // `ChunkPrefetchIterator` yields chunk coordinates in order of roughly how likely they are to be loaded next\n    const prefetchIterator = new _zarr_utils_ChunkPrefetchIterator_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](chunkCoords, this.fetchOptions.maxPrefetchDistance, chunkDimsTCZYX, this.priorityDirections);\n    const subscriber = this.requestQueue.addSubscriber();\n    let prefetchCount = 0;\n    for (const chunk of prefetchIterator) {\n      if (prefetchCount >= this.fetchOptions.maxPrefetchChunks) {\n        break;\n      }\n      // Match absolute channel coordinate back to source index and channel index\n      const {\n        sourceIndex,\n        channelIndexInSource\n      } = this.matchChannelToSource(chunk[1]);\n      const sourceScaleLevel = this.sources[sourceIndex].scaleLevels[scaleLevel];\n      chunk[1] = channelIndexInSource;\n      this.prefetchChunk(sourceScaleLevel, chunk, subscriber);\n      prefetchCount++;\n    }\n\n    // Clear out old prefetch requests (requests which also cover this new prefetch will be preserved)\n    if (this.prefetchSubscriber !== undefined) {\n      this.requestQueue.removeSubscriber(this.prefetchSubscriber, CHUNK_REQUEST_CANCEL_REASON);\n    }\n    this.prefetchSubscriber = subscriber;\n  }\n  updateImageInfoForLoad(imageInfo, loadSpec) {\n    // Apply `this.maxExtent` to subregion, if it exists\n    const maxExtent = this.maxExtent ?? new three__WEBPACK_IMPORTED_MODULE_11__.Box3(new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(0, 0, 0), new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(1, 1, 1));\n    const subregion = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.composeSubregion)(loadSpec.subregion, maxExtent);\n\n    // Pick the level to load based on the subregion size\n    const multiscaleLevel = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.pickLevelToLoad)({\n      ...loadSpec,\n      subregion\n    }, this.getLevelShapesZYX());\n    const array0Shape = this.sources[0].scaleLevels[multiscaleLevel].shape;\n\n    // Convert subregion to volume voxels\n    const [z, y, x] = this.sources[0].axesTCZYX.slice(2);\n    const regionPx = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.convertSubregionToPixels)(subregion, new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(array0Shape[x], array0Shape[y], z === -1 ? 1 : array0Shape[z]));\n\n    // Derive other image info properties from subregion and level to load\n    const subregionSize = regionPx.getSize(new three__WEBPACK_IMPORTED_MODULE_11__.Vector3());\n    const atlasTileDims = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.computePackedAtlasDims)(subregionSize.z, subregionSize.x, subregionSize.y);\n    const volumeExtent = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_2__.convertSubregionToPixels)(maxExtent, new three__WEBPACK_IMPORTED_MODULE_11__.Vector3(array0Shape[x], array0Shape[y], z === -1 ? 1 : array0Shape[z]));\n    const volumeSize = volumeExtent.getSize(new three__WEBPACK_IMPORTED_MODULE_11__.Vector3());\n    return {\n      ...imageInfo,\n      atlasTileDims,\n      volumeSize,\n      subregionSize,\n      subregionOffset: regionPx.min,\n      multiscaleLevel\n    };\n  }\n  async loadRawChannelData(imageInfo, loadSpec, onUpdateMetadata, onData) {\n    // This seemingly useless line keeps a stable local copy of `syncChannels` which the async closures below capture\n    // so that changes to `this.syncChannels` don't affect the behavior of loads in progress.\n    const syncChannels = this.syncChannels;\n    const updatedImageInfo = this.updateImageInfoForLoad(imageInfo, loadSpec);\n    onUpdateMetadata(updatedImageInfo);\n    const {\n      numChannels,\n      multiscaleLevel\n    } = updatedImageInfo;\n    const channelIndexes = loadSpec.channels ?? Array.from({\n      length: numChannels\n    }, (_, i) => i);\n    const subscriber = this.requestQueue.addSubscriber();\n\n    // Prefetch housekeeping: we want to save keys involved in this load to prefetch later\n    const keys = [];\n    const reportKeyBase = (sourceIdx, key, sub) => {\n      if (sub === subscriber) {\n        keys.push({\n          sourceIdx,\n          key\n        });\n      }\n    };\n    const resultChannelIndices = [];\n    const resultChannelData = [];\n    const resultChannelRanges = [];\n    const channelPromises = channelIndexes.map(async ch => {\n      // Build slice spec\n      const min = updatedImageInfo.subregionOffset;\n      const max = min.clone().add(updatedImageInfo.subregionSize);\n      const {\n        sourceIndex: sourceIdx,\n        channelIndexInSource: sourceCh\n      } = this.matchChannelToSource(ch);\n      const unorderedSpec = [loadSpec.time, sourceCh, (0,_zarrita_indexing__WEBPACK_IMPORTED_MODULE_12__.slice)(min.z, max.z), (0,_zarrita_indexing__WEBPACK_IMPORTED_MODULE_12__.slice)(min.y, max.y), (0,_zarrita_indexing__WEBPACK_IMPORTED_MODULE_12__.slice)(min.x, max.x)];\n      const level = this.sources[sourceIdx].scaleLevels[multiscaleLevel];\n      const sliceSpec = this.orderByDimension(unorderedSpec, sourceIdx);\n      const reportKey = (key, sub) => reportKeyBase(sourceIdx, key, sub);\n      const result = await (0,_zarrita_indexing__WEBPACK_IMPORTED_MODULE_13__.get)(level, sliceSpec, {\n        opts: {\n          subscriber,\n          reportKey\n        }\n      }).catch((0,_VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__.wrapVolumeLoadError)(\"Could not load OME-Zarr volume data\", _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_6__.VolumeLoadErrorType.LOAD_DATA_FAILED, CHUNK_REQUEST_CANCEL_REASON));\n      if (result?.data === undefined) {\n        return;\n      }\n      const converted = convertChannel(result.data);\n      if (syncChannels) {\n        resultChannelData.push(converted[0]);\n        resultChannelIndices.push(ch);\n        resultChannelRanges.push([converted[1], converted[2]]);\n      } else {\n        onData([ch], [converted[0]], [[converted[1], converted[2]]]);\n      }\n    });\n\n    // Cancel any in-flight requests from previous loads that aren't useful to this one\n    if (this.loadSubscriber !== undefined) {\n      this.requestQueue.removeSubscriber(this.loadSubscriber, CHUNK_REQUEST_CANCEL_REASON);\n    }\n    this.loadSubscriber = subscriber;\n    this.beginPrefetch(keys, multiscaleLevel);\n    await Promise.all(channelPromises);\n    if (syncChannels) {\n      onData(resultChannelIndices, resultChannelData, resultChannelRanges);\n    }\n    this.requestQueue.removeSubscriber(subscriber, CHUNK_REQUEST_CANCEL_REASON);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/OmeZarrLoader.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/RawArrayLoader.js":
/*!*****************************************************!*\
  !*** ../volume-viewer/es/loaders/RawArrayLoader.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RawArrayLoader: () => (/* binding */ RawArrayLoader)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"../volume-viewer/node_modules/three/build/three.module.js\");\n/* harmony import */ var _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IVolumeLoader.js */ \"../volume-viewer/es/loaders/IVolumeLoader.js\");\n/* harmony import */ var _VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VolumeLoaderUtils.js */ \"../volume-viewer/es/loaders/VolumeLoaderUtils.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types.js */ \"../volume-viewer/es/types.js\");\n\n\n\n\n\n// this is the form in which a 4D numpy array arrives as converted\n// by jupyterlab into a js object.\n// This loader does not yet support multiple time samples.\n\n// minimal metadata for visualization\n\nconst convertImageInfo = json => ({\n  name: json.name,\n  // assumption: the data is already sized to fit in our viewer's preferred\n  // memory footprint (a tiled atlas texture as of this writing)\n  originalSize: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(json.sizeX, json.sizeY, json.sizeZ),\n  atlasTileDims: (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_1__.computePackedAtlasDims)(json.sizeZ, json.sizeX, json.sizeY),\n  volumeSize: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(json.sizeX, json.sizeY, json.sizeZ),\n  subregionSize: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(json.sizeX, json.sizeY, json.sizeZ),\n  subregionOffset: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0),\n  physicalPixelSize: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(json.physicalPixelSize[0], json.physicalPixelSize[1], json.physicalPixelSize[2]),\n  spatialUnit: json.spatialUnit || \"μm\",\n  numChannels: json.sizeC,\n  channelNames: json.channelNames,\n  channelColors: undefined,\n  //json.channelColors,\n\n  times: 1,\n  timeScale: 1,\n  timeUnit: \"s\",\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n  transform: {\n    translation: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0),\n    rotation: new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0)\n  },\n  userData: json.userData\n});\nclass RawArrayLoader extends _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_0__.ThreadableVolumeLoader {\n  constructor(rawData, rawDataInfo) {\n    super();\n    this.jsonInfo = rawDataInfo;\n    this.data = rawData;\n    // check consistent dims\n    if (this.data.shape[0] !== this.jsonInfo.sizeC || this.data.shape[1] !== this.jsonInfo.sizeZ || this.data.shape[2] !== this.jsonInfo.sizeY || this.data.shape[3] !== this.jsonInfo.sizeX) {\n      throw new Error(\"RawArrayLoader: data shape does not match metadata\");\n    }\n  }\n  async loadDims(_loadSpec) {\n    const jsonInfo = this.jsonInfo;\n    const d = new _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_0__.VolumeDims();\n    d.shape = [1, jsonInfo.sizeC, jsonInfo.sizeZ, jsonInfo.sizeY, jsonInfo.sizeX];\n    d.spacing = [1, 1, jsonInfo.physicalPixelSize[2], jsonInfo.physicalPixelSize[1], jsonInfo.physicalPixelSize[0]];\n    d.spaceUnit = jsonInfo.spatialUnit || \"μm\";\n    d.dataType = \"uint8\";\n    return [d];\n  }\n  async createImageInfo(loadSpec) {\n    return {\n      imageInfo: convertImageInfo(this.jsonInfo),\n      loadSpec\n    };\n  }\n  loadRawChannelData(imageInfo, loadSpec, onUpdateMetadata, onData) {\n    const requestedChannels = loadSpec.channels;\n    const adjustedLoadSpec = {\n      ...loadSpec,\n      // `subregion` and `multiscaleLevel` are unused by this loader\n      subregion: new three__WEBPACK_IMPORTED_MODULE_3__.Box3(new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0), new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(1, 1, 1)),\n      multiscaleLevel: 0\n    };\n    onUpdateMetadata(undefined, adjustedLoadSpec);\n    for (let chindex = 0; chindex < imageInfo.numChannels; ++chindex) {\n      if (requestedChannels && requestedChannels.length > 0 && !requestedChannels.includes(chindex)) {\n        continue;\n      }\n      const volSizeBytes = this.data.shape[3] * this.data.shape[2] * this.data.shape[1]; // x*y*z pixels * 1 byte/pixel\n      const channelData = new Uint8Array(this.data.buffer.buffer, chindex * volSizeBytes, volSizeBytes);\n      // all data coming from this loader is natively 8-bit\n      onData([chindex], [channelData], [_types_js__WEBPACK_IMPORTED_MODULE_2__.DATARANGE_UINT8]);\n    }\n    return Promise.resolve();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy9sb2FkZXJzL1Jhd0FycmF5TG9hZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNDO0FBQ2tDO0FBQ1I7QUFDbEI7O0FBRTlDO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxNQUFNTSxnQkFBZ0IsR0FBR0MsSUFBSSxLQUFLO0VBQ2hDQyxJQUFJLEVBQUVELElBQUksQ0FBQ0MsSUFBSTtFQUNmO0VBQ0E7RUFDQUMsWUFBWSxFQUFFLElBQUlSLDBDQUFPLENBQUNNLElBQUksQ0FBQ0csS0FBSyxFQUFFSCxJQUFJLENBQUNJLEtBQUssRUFBRUosSUFBSSxDQUFDSyxLQUFLLENBQUM7RUFDN0RDLGFBQWEsRUFBRVQsNkVBQXNCLENBQUNHLElBQUksQ0FBQ0ssS0FBSyxFQUFFTCxJQUFJLENBQUNHLEtBQUssRUFBRUgsSUFBSSxDQUFDSSxLQUFLLENBQUM7RUFDekVHLFVBQVUsRUFBRSxJQUFJYiwwQ0FBTyxDQUFDTSxJQUFJLENBQUNHLEtBQUssRUFBRUgsSUFBSSxDQUFDSSxLQUFLLEVBQUVKLElBQUksQ0FBQ0ssS0FBSyxDQUFDO0VBQzNERyxhQUFhLEVBQUUsSUFBSWQsMENBQU8sQ0FBQ00sSUFBSSxDQUFDRyxLQUFLLEVBQUVILElBQUksQ0FBQ0ksS0FBSyxFQUFFSixJQUFJLENBQUNLLEtBQUssQ0FBQztFQUM5REksZUFBZSxFQUFFLElBQUlmLDBDQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDckNnQixpQkFBaUIsRUFBRSxJQUFJaEIsMENBQU8sQ0FBQ00sSUFBSSxDQUFDVSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRVYsSUFBSSxDQUFDVSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRVYsSUFBSSxDQUFDVSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMvR0MsV0FBVyxFQUFFWCxJQUFJLENBQUNXLFdBQVcsSUFBSSxJQUFJO0VBQ3JDQyxXQUFXLEVBQUVaLElBQUksQ0FBQ2EsS0FBSztFQUN2QkMsWUFBWSxFQUFFZCxJQUFJLENBQUNjLFlBQVk7RUFDL0JDLGFBQWEsRUFBRUMsU0FBUztFQUN4Qjs7RUFFQUMsS0FBSyxFQUFFLENBQUM7RUFDUkMsU0FBUyxFQUFFLENBQUM7RUFDWkMsUUFBUSxFQUFFLEdBQUc7RUFDYkMsbUJBQW1CLEVBQUUsQ0FBQztFQUN0QkMsZUFBZSxFQUFFLENBQUM7RUFDbEJDLFNBQVMsRUFBRTtJQUNUQyxXQUFXLEVBQUUsSUFBSTdCLDBDQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakM4QixRQUFRLEVBQUUsSUFBSTlCLDBDQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0VBQy9CLENBQUM7RUFDRCtCLFFBQVEsRUFBRXpCLElBQUksQ0FBQ3lCO0FBQ2pCLENBQUMsQ0FBQztBQUNGLE1BQU1DLGNBQWMsU0FBUy9CLHFFQUFzQixDQUFDO0VBQ2xEZ0MsV0FBV0EsQ0FBQ0MsT0FBTyxFQUFFQyxXQUFXLEVBQUU7SUFDaEMsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNDLFFBQVEsR0FBR0QsV0FBVztJQUMzQixJQUFJLENBQUNFLElBQUksR0FBR0gsT0FBTztJQUNuQjtJQUNBLElBQUksSUFBSSxDQUFDRyxJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUNGLFFBQVEsQ0FBQ2pCLEtBQUssSUFBSSxJQUFJLENBQUNrQixJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUNGLFFBQVEsQ0FBQ3pCLEtBQUssSUFBSSxJQUFJLENBQUMwQixJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUNGLFFBQVEsQ0FBQzFCLEtBQUssSUFBSSxJQUFJLENBQUMyQixJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUNGLFFBQVEsQ0FBQzNCLEtBQUssRUFBRTtNQUN4TCxNQUFNLElBQUk4QixLQUFLLENBQUMsb0RBQW9ELENBQUM7SUFDdkU7RUFDRjtFQUNBLE1BQU1DLFFBQVFBLENBQUNDLFNBQVMsRUFBRTtJQUN4QixNQUFNTCxRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRO0lBQzlCLE1BQU1NLENBQUMsR0FBRyxJQUFJeEMseURBQVUsQ0FBQyxDQUFDO0lBQzFCd0MsQ0FBQyxDQUFDSixLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUVGLFFBQVEsQ0FBQ2pCLEtBQUssRUFBRWlCLFFBQVEsQ0FBQ3pCLEtBQUssRUFBRXlCLFFBQVEsQ0FBQzFCLEtBQUssRUFBRTBCLFFBQVEsQ0FBQzNCLEtBQUssQ0FBQztJQUM3RWlDLENBQUMsQ0FBQ0MsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRVAsUUFBUSxDQUFDcEIsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQUVvQixRQUFRLENBQUNwQixpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRW9CLFFBQVEsQ0FBQ3BCLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9HMEIsQ0FBQyxDQUFDRSxTQUFTLEdBQUdSLFFBQVEsQ0FBQ25CLFdBQVcsSUFBSSxJQUFJO0lBQzFDeUIsQ0FBQyxDQUFDRyxRQUFRLEdBQUcsT0FBTztJQUNwQixPQUFPLENBQUNILENBQUMsQ0FBQztFQUNaO0VBQ0EsTUFBTUksZUFBZUEsQ0FBQ0MsUUFBUSxFQUFFO0lBQzlCLE9BQU87TUFDTEMsU0FBUyxFQUFFM0MsZ0JBQWdCLENBQUMsSUFBSSxDQUFDK0IsUUFBUSxDQUFDO01BQzFDVztJQUNGLENBQUM7RUFDSDtFQUNBRSxrQkFBa0JBLENBQUNELFNBQVMsRUFBRUQsUUFBUSxFQUFFRyxnQkFBZ0IsRUFBRUMsTUFBTSxFQUFFO0lBQ2hFLE1BQU1DLGlCQUFpQixHQUFHTCxRQUFRLENBQUNNLFFBQVE7SUFDM0MsTUFBTUMsZ0JBQWdCLEdBQUc7TUFDdkIsR0FBR1AsUUFBUTtNQUNYO01BQ0FRLFNBQVMsRUFBRSxJQUFJeEQsdUNBQUksQ0FBQyxJQUFJQywwQ0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsMENBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO01BQy9EMkIsZUFBZSxFQUFFO0lBQ25CLENBQUM7SUFDRHVCLGdCQUFnQixDQUFDNUIsU0FBUyxFQUFFZ0MsZ0JBQWdCLENBQUM7SUFDN0MsS0FBSyxJQUFJRSxPQUFPLEdBQUcsQ0FBQyxFQUFFQSxPQUFPLEdBQUdSLFNBQVMsQ0FBQzlCLFdBQVcsRUFBRSxFQUFFc0MsT0FBTyxFQUFFO01BQ2hFLElBQUlKLGlCQUFpQixJQUFJQSxpQkFBaUIsQ0FBQ0ssTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDTCxpQkFBaUIsQ0FBQ00sUUFBUSxDQUFDRixPQUFPLENBQUMsRUFBRTtRQUM3RjtNQUNGO01BQ0EsTUFBTUcsWUFBWSxHQUFHLElBQUksQ0FBQ3RCLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ0QsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDRCxJQUFJLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ25GLE1BQU1zQixXQUFXLEdBQUcsSUFBSUMsVUFBVSxDQUFDLElBQUksQ0FBQ3hCLElBQUksQ0FBQ3lCLE1BQU0sQ0FBQ0EsTUFBTSxFQUFFTixPQUFPLEdBQUdHLFlBQVksRUFBRUEsWUFBWSxDQUFDO01BQ2pHO01BQ0FSLE1BQU0sQ0FBQyxDQUFDSyxPQUFPLENBQUMsRUFBRSxDQUFDSSxXQUFXLENBQUMsRUFBRSxDQUFDeEQsc0RBQWUsQ0FBQyxDQUFDO0lBQ3JEO0lBQ0EsT0FBTzJELE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDMUI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL0BhaWNzL3dlYi0zZC12aWV3ZXIvLi4vdm9sdW1lLXZpZXdlci9lcy9sb2FkZXJzL1Jhd0FycmF5TG9hZGVyLmpzPzVkZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm94MywgVmVjdG9yMyB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgVGhyZWFkYWJsZVZvbHVtZUxvYWRlciwgVm9sdW1lRGltcyB9IGZyb20gXCIuL0lWb2x1bWVMb2FkZXIuanNcIjtcbmltcG9ydCB7IGNvbXB1dGVQYWNrZWRBdGxhc0RpbXMgfSBmcm9tIFwiLi9Wb2x1bWVMb2FkZXJVdGlscy5qc1wiO1xuaW1wb3J0IHsgREFUQVJBTkdFX1VJTlQ4IH0gZnJvbSBcIi4uL3R5cGVzLmpzXCI7XG5cbi8vIHRoaXMgaXMgdGhlIGZvcm0gaW4gd2hpY2ggYSA0RCBudW1weSBhcnJheSBhcnJpdmVzIGFzIGNvbnZlcnRlZFxuLy8gYnkganVweXRlcmxhYiBpbnRvIGEganMgb2JqZWN0LlxuLy8gVGhpcyBsb2FkZXIgZG9lcyBub3QgeWV0IHN1cHBvcnQgbXVsdGlwbGUgdGltZSBzYW1wbGVzLlxuXG4vLyBtaW5pbWFsIG1ldGFkYXRhIGZvciB2aXN1YWxpemF0aW9uXG5cbmNvbnN0IGNvbnZlcnRJbWFnZUluZm8gPSBqc29uID0+ICh7XG4gIG5hbWU6IGpzb24ubmFtZSxcbiAgLy8gYXNzdW1wdGlvbjogdGhlIGRhdGEgaXMgYWxyZWFkeSBzaXplZCB0byBmaXQgaW4gb3VyIHZpZXdlcidzIHByZWZlcnJlZFxuICAvLyBtZW1vcnkgZm9vdHByaW50IChhIHRpbGVkIGF0bGFzIHRleHR1cmUgYXMgb2YgdGhpcyB3cml0aW5nKVxuICBvcmlnaW5hbFNpemU6IG5ldyBWZWN0b3IzKGpzb24uc2l6ZVgsIGpzb24uc2l6ZVksIGpzb24uc2l6ZVopLFxuICBhdGxhc1RpbGVEaW1zOiBjb21wdXRlUGFja2VkQXRsYXNEaW1zKGpzb24uc2l6ZVosIGpzb24uc2l6ZVgsIGpzb24uc2l6ZVkpLFxuICB2b2x1bWVTaXplOiBuZXcgVmVjdG9yMyhqc29uLnNpemVYLCBqc29uLnNpemVZLCBqc29uLnNpemVaKSxcbiAgc3VicmVnaW9uU2l6ZTogbmV3IFZlY3RvcjMoanNvbi5zaXplWCwganNvbi5zaXplWSwganNvbi5zaXplWiksXG4gIHN1YnJlZ2lvbk9mZnNldDogbmV3IFZlY3RvcjMoMCwgMCwgMCksXG4gIHBoeXNpY2FsUGl4ZWxTaXplOiBuZXcgVmVjdG9yMyhqc29uLnBoeXNpY2FsUGl4ZWxTaXplWzBdLCBqc29uLnBoeXNpY2FsUGl4ZWxTaXplWzFdLCBqc29uLnBoeXNpY2FsUGl4ZWxTaXplWzJdKSxcbiAgc3BhdGlhbFVuaXQ6IGpzb24uc3BhdGlhbFVuaXQgfHwgXCLOvG1cIixcbiAgbnVtQ2hhbm5lbHM6IGpzb24uc2l6ZUMsXG4gIGNoYW5uZWxOYW1lczoganNvbi5jaGFubmVsTmFtZXMsXG4gIGNoYW5uZWxDb2xvcnM6IHVuZGVmaW5lZCxcbiAgLy9qc29uLmNoYW5uZWxDb2xvcnMsXG5cbiAgdGltZXM6IDEsXG4gIHRpbWVTY2FsZTogMSxcbiAgdGltZVVuaXQ6IFwic1wiLFxuICBudW1NdWx0aXNjYWxlTGV2ZWxzOiAxLFxuICBtdWx0aXNjYWxlTGV2ZWw6IDAsXG4gIHRyYW5zZm9ybToge1xuICAgIHRyYW5zbGF0aW9uOiBuZXcgVmVjdG9yMygwLCAwLCAwKSxcbiAgICByb3RhdGlvbjogbmV3IFZlY3RvcjMoMCwgMCwgMClcbiAgfSxcbiAgdXNlckRhdGE6IGpzb24udXNlckRhdGFcbn0pO1xuY2xhc3MgUmF3QXJyYXlMb2FkZXIgZXh0ZW5kcyBUaHJlYWRhYmxlVm9sdW1lTG9hZGVyIHtcbiAgY29uc3RydWN0b3IocmF3RGF0YSwgcmF3RGF0YUluZm8pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuanNvbkluZm8gPSByYXdEYXRhSW5mbztcbiAgICB0aGlzLmRhdGEgPSByYXdEYXRhO1xuICAgIC8vIGNoZWNrIGNvbnNpc3RlbnQgZGltc1xuICAgIGlmICh0aGlzLmRhdGEuc2hhcGVbMF0gIT09IHRoaXMuanNvbkluZm8uc2l6ZUMgfHwgdGhpcy5kYXRhLnNoYXBlWzFdICE9PSB0aGlzLmpzb25JbmZvLnNpemVaIHx8IHRoaXMuZGF0YS5zaGFwZVsyXSAhPT0gdGhpcy5qc29uSW5mby5zaXplWSB8fCB0aGlzLmRhdGEuc2hhcGVbM10gIT09IHRoaXMuanNvbkluZm8uc2l6ZVgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJhd0FycmF5TG9hZGVyOiBkYXRhIHNoYXBlIGRvZXMgbm90IG1hdGNoIG1ldGFkYXRhXCIpO1xuICAgIH1cbiAgfVxuICBhc3luYyBsb2FkRGltcyhfbG9hZFNwZWMpIHtcbiAgICBjb25zdCBqc29uSW5mbyA9IHRoaXMuanNvbkluZm87XG4gICAgY29uc3QgZCA9IG5ldyBWb2x1bWVEaW1zKCk7XG4gICAgZC5zaGFwZSA9IFsxLCBqc29uSW5mby5zaXplQywganNvbkluZm8uc2l6ZVosIGpzb25JbmZvLnNpemVZLCBqc29uSW5mby5zaXplWF07XG4gICAgZC5zcGFjaW5nID0gWzEsIDEsIGpzb25JbmZvLnBoeXNpY2FsUGl4ZWxTaXplWzJdLCBqc29uSW5mby5waHlzaWNhbFBpeGVsU2l6ZVsxXSwganNvbkluZm8ucGh5c2ljYWxQaXhlbFNpemVbMF1dO1xuICAgIGQuc3BhY2VVbml0ID0ganNvbkluZm8uc3BhdGlhbFVuaXQgfHwgXCLOvG1cIjtcbiAgICBkLmRhdGFUeXBlID0gXCJ1aW50OFwiO1xuICAgIHJldHVybiBbZF07XG4gIH1cbiAgYXN5bmMgY3JlYXRlSW1hZ2VJbmZvKGxvYWRTcGVjKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGltYWdlSW5mbzogY29udmVydEltYWdlSW5mbyh0aGlzLmpzb25JbmZvKSxcbiAgICAgIGxvYWRTcGVjXG4gICAgfTtcbiAgfVxuICBsb2FkUmF3Q2hhbm5lbERhdGEoaW1hZ2VJbmZvLCBsb2FkU3BlYywgb25VcGRhdGVNZXRhZGF0YSwgb25EYXRhKSB7XG4gICAgY29uc3QgcmVxdWVzdGVkQ2hhbm5lbHMgPSBsb2FkU3BlYy5jaGFubmVscztcbiAgICBjb25zdCBhZGp1c3RlZExvYWRTcGVjID0ge1xuICAgICAgLi4ubG9hZFNwZWMsXG4gICAgICAvLyBgc3VicmVnaW9uYCBhbmQgYG11bHRpc2NhbGVMZXZlbGAgYXJlIHVudXNlZCBieSB0aGlzIGxvYWRlclxuICAgICAgc3VicmVnaW9uOiBuZXcgQm94MyhuZXcgVmVjdG9yMygwLCAwLCAwKSwgbmV3IFZlY3RvcjMoMSwgMSwgMSkpLFxuICAgICAgbXVsdGlzY2FsZUxldmVsOiAwXG4gICAgfTtcbiAgICBvblVwZGF0ZU1ldGFkYXRhKHVuZGVmaW5lZCwgYWRqdXN0ZWRMb2FkU3BlYyk7XG4gICAgZm9yIChsZXQgY2hpbmRleCA9IDA7IGNoaW5kZXggPCBpbWFnZUluZm8ubnVtQ2hhbm5lbHM7ICsrY2hpbmRleCkge1xuICAgICAgaWYgKHJlcXVlc3RlZENoYW5uZWxzICYmIHJlcXVlc3RlZENoYW5uZWxzLmxlbmd0aCA+IDAgJiYgIXJlcXVlc3RlZENoYW5uZWxzLmluY2x1ZGVzKGNoaW5kZXgpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3Qgdm9sU2l6ZUJ5dGVzID0gdGhpcy5kYXRhLnNoYXBlWzNdICogdGhpcy5kYXRhLnNoYXBlWzJdICogdGhpcy5kYXRhLnNoYXBlWzFdOyAvLyB4KnkqeiBwaXhlbHMgKiAxIGJ5dGUvcGl4ZWxcbiAgICAgIGNvbnN0IGNoYW5uZWxEYXRhID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kYXRhLmJ1ZmZlci5idWZmZXIsIGNoaW5kZXggKiB2b2xTaXplQnl0ZXMsIHZvbFNpemVCeXRlcyk7XG4gICAgICAvLyBhbGwgZGF0YSBjb21pbmcgZnJvbSB0aGlzIGxvYWRlciBpcyBuYXRpdmVseSA4LWJpdFxuICAgICAgb25EYXRhKFtjaGluZGV4XSwgW2NoYW5uZWxEYXRhXSwgW0RBVEFSQU5HRV9VSU5UOF0pO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbn1cbmV4cG9ydCB7IFJhd0FycmF5TG9hZGVyIH07Il0sIm5hbWVzIjpbIkJveDMiLCJWZWN0b3IzIiwiVGhyZWFkYWJsZVZvbHVtZUxvYWRlciIsIlZvbHVtZURpbXMiLCJjb21wdXRlUGFja2VkQXRsYXNEaW1zIiwiREFUQVJBTkdFX1VJTlQ4IiwiY29udmVydEltYWdlSW5mbyIsImpzb24iLCJuYW1lIiwib3JpZ2luYWxTaXplIiwic2l6ZVgiLCJzaXplWSIsInNpemVaIiwiYXRsYXNUaWxlRGltcyIsInZvbHVtZVNpemUiLCJzdWJyZWdpb25TaXplIiwic3VicmVnaW9uT2Zmc2V0IiwicGh5c2ljYWxQaXhlbFNpemUiLCJzcGF0aWFsVW5pdCIsIm51bUNoYW5uZWxzIiwic2l6ZUMiLCJjaGFubmVsTmFtZXMiLCJjaGFubmVsQ29sb3JzIiwidW5kZWZpbmVkIiwidGltZXMiLCJ0aW1lU2NhbGUiLCJ0aW1lVW5pdCIsIm51bU11bHRpc2NhbGVMZXZlbHMiLCJtdWx0aXNjYWxlTGV2ZWwiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2xhdGlvbiIsInJvdGF0aW9uIiwidXNlckRhdGEiLCJSYXdBcnJheUxvYWRlciIsImNvbnN0cnVjdG9yIiwicmF3RGF0YSIsInJhd0RhdGFJbmZvIiwianNvbkluZm8iLCJkYXRhIiwic2hhcGUiLCJFcnJvciIsImxvYWREaW1zIiwiX2xvYWRTcGVjIiwiZCIsInNwYWNpbmciLCJzcGFjZVVuaXQiLCJkYXRhVHlwZSIsImNyZWF0ZUltYWdlSW5mbyIsImxvYWRTcGVjIiwiaW1hZ2VJbmZvIiwibG9hZFJhd0NoYW5uZWxEYXRhIiwib25VcGRhdGVNZXRhZGF0YSIsIm9uRGF0YSIsInJlcXVlc3RlZENoYW5uZWxzIiwiY2hhbm5lbHMiLCJhZGp1c3RlZExvYWRTcGVjIiwic3VicmVnaW9uIiwiY2hpbmRleCIsImxlbmd0aCIsImluY2x1ZGVzIiwidm9sU2l6ZUJ5dGVzIiwiY2hhbm5lbERhdGEiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwiUHJvbWlzZSIsInJlc29sdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/RawArrayLoader.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/TiffLoader.js":
/*!*************************************************!*\
  !*** ../volume-viewer/es/loaders/TiffLoader.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TiffLoader: () => (/* binding */ TiffLoader)\n/* harmony export */ });\n/* harmony import */ var geotiff__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! geotiff */ \"../volume-viewer/node_modules/geotiff/dist-module/geotiff.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ \"../volume-viewer/node_modules/three/build/three.module.js\");\n/* harmony import */ var serialize_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! serialize-error */ \"../volume-viewer/node_modules/serialize-error/index.js\");\n/* harmony import */ var _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IVolumeLoader.js */ \"../volume-viewer/es/loaders/IVolumeLoader.js\");\n/* harmony import */ var _VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VolumeLoaderUtils.js */ \"../volume-viewer/es/loaders/VolumeLoaderUtils.js\");\n/* harmony import */ var _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VolumeLoadError.js */ \"../volume-viewer/es/loaders/VolumeLoadError.js\");\n\n\n\n\n\n\nfunction prepareXML(xml) {\n  // trim trailing unicode zeros?\n  // eslint-disable-next-line no-control-regex\n  const expr = /[\\u0000]$/g;\n  return xml.trim().replace(expr, \"\").trim();\n}\nfunction getOME(xml) {\n  const parser = new DOMParser();\n  try {\n    const xmlDoc = parser.parseFromString(xml, \"text/xml\");\n    return xmlDoc.getElementsByTagName(\"OME\")[0];\n  } catch (e) {\n    throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.VolumeLoadError(\"Could not find OME metadata in TIFF file\", {\n      type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.VolumeLoadErrorType.INVALID_METADATA,\n      cause: e\n    });\n  }\n}\nclass OMEDims {\n  sizex = 0;\n  sizey = 0;\n  sizez = 1;\n  sizec = 1;\n  sizet = 1;\n  unit = \"\";\n  pixeltype = \"\";\n  dimensionorder = \"\";\n  pixelsizex = 1;\n  pixelsizey = 1;\n  pixelsizez = 1;\n  channelnames = [];\n}\nfunction getAttributeOrError(el, attr) {\n  const val = el.getAttribute(attr);\n  if (val === null) {\n    throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.VolumeLoadError(`Missing attribute ${attr} in OME-TIFF metadata`, {\n      type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.VolumeLoadErrorType.INVALID_METADATA\n    });\n  }\n  return val;\n}\nfunction getOMEDims(imageEl) {\n  const dims = new OMEDims();\n  const pixelsEl = imageEl.getElementsByTagName(\"Pixels\")[0];\n  dims.sizex = Number(getAttributeOrError(pixelsEl, \"SizeX\"));\n  dims.sizey = Number(getAttributeOrError(pixelsEl, \"SizeY\"));\n  dims.sizez = Number(pixelsEl.getAttribute(\"SizeZ\"));\n  dims.sizec = Number(pixelsEl.getAttribute(\"SizeC\"));\n  dims.sizet = Number(pixelsEl.getAttribute(\"SizeT\"));\n  dims.unit = pixelsEl.getAttribute(\"PhysicalSizeXUnit\") || \"\";\n  dims.pixeltype = pixelsEl.getAttribute(\"Type\") || \"\";\n  dims.dimensionorder = pixelsEl.getAttribute(\"DimensionOrder\") || \"XYZCT\";\n  dims.pixelsizex = Number(pixelsEl.getAttribute(\"PhysicalSizeX\"));\n  dims.pixelsizey = Number(pixelsEl.getAttribute(\"PhysicalSizeY\"));\n  dims.pixelsizez = Number(pixelsEl.getAttribute(\"PhysicalSizeZ\"));\n  const channelsEls = pixelsEl.getElementsByTagName(\"Channel\");\n  for (let i = 0; i < channelsEls.length; ++i) {\n    const name = channelsEls[i].getAttribute(\"Name\");\n    const id = channelsEls[i].getAttribute(\"ID\");\n    dims.channelnames.push(name ? name : id ? id : \"Channel\" + i);\n  }\n  return dims;\n}\nconst getBytesPerSample = type => type === \"uint8\" ? 1 : type === \"uint16\" ? 2 : 4;\n\n// Despite the class `TiffLoader` extends, this loader is not threadable, since geotiff internally uses features that\n// aren't available on workers. It uses its own specialized workers anyways.\nclass TiffLoader extends _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_0__.ThreadableVolumeLoader {\n  constructor(url) {\n    super();\n    this.url = url;\n  }\n  async loadOmeDims() {\n    if (!this.dims) {\n      const tiff = await (0,geotiff__WEBPACK_IMPORTED_MODULE_3__.fromUrl)(this.url, {\n        allowFullFile: true\n      }).catch((0,_VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.wrapVolumeLoadError)(`Could not open TIFF file at ${this.url}`, _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.VolumeLoadErrorType.NOT_FOUND));\n      // DO NOT DO THIS, ITS SLOW\n      // const imagecount = await tiff.getImageCount();\n      // read the FIRST image\n      const image = await tiff.getImage().catch((0,_VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.wrapVolumeLoadError)(\"Failed to open TIFF image\", _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.VolumeLoadErrorType.NOT_FOUND));\n      const tiffimgdesc = prepareXML(image.getFileDirectory().ImageDescription);\n      const omeEl = getOME(tiffimgdesc);\n      const image0El = omeEl.getElementsByTagName(\"Image\")[0];\n      this.dims = getOMEDims(image0El);\n    }\n    return this.dims;\n  }\n  async loadDims(_loadSpec) {\n    const dims = await this.loadOmeDims();\n    const d = new _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_0__.VolumeDims();\n    d.shape = [dims.sizet, dims.sizec, dims.sizez, dims.sizey, dims.sizex];\n    d.spacing = [1, 1, dims.pixelsizez, dims.pixelsizey, dims.pixelsizex];\n    d.spaceUnit = dims.unit ? dims.unit : \"micron\";\n    d.dataType = dims.pixeltype ? dims.pixeltype : \"uint8\";\n    return [d];\n  }\n  async createImageInfo(_loadSpec) {\n    const dims = await this.loadOmeDims();\n    // compare with sizex, sizey\n    //const width = image.getWidth();\n    //const height = image.getHeight();\n\n    // TODO allow user setting of this downsampling info?\n    // TODO allow ROI selection: range of x,y,z,c for a given t\n    const atlasDims = (0,_VolumeLoaderUtils_js__WEBPACK_IMPORTED_MODULE_1__.computePackedAtlasDims)(dims.sizez, dims.sizex, dims.sizey);\n    // fit tiles to max of 2048x2048?\n    const targetSize = 2048;\n    const tilesizex = Math.floor(targetSize / atlasDims.x);\n    const tilesizey = Math.floor(targetSize / atlasDims.y);\n\n    // load tiff and check metadata\n\n    const imgdata = {\n      name: \"TEST\",\n      originalSize: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(dims.sizex, dims.sizey, dims.sizez),\n      atlasTileDims: atlasDims,\n      volumeSize: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(tilesizex, tilesizey, dims.sizez),\n      subregionSize: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(tilesizex, tilesizey, dims.sizez),\n      subregionOffset: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0),\n      physicalPixelSize: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(dims.pixelsizex, dims.pixelsizey, dims.pixelsizez),\n      spatialUnit: dims.unit || \"\",\n      numChannels: dims.sizec,\n      channelNames: dims.channelnames,\n      times: dims.sizet,\n      timeScale: 1,\n      timeUnit: \"\",\n      numMultiscaleLevels: 1,\n      multiscaleLevel: 0,\n      transform: {\n        translation: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0),\n        rotation: new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(0, 0, 0)\n      }\n    };\n\n    // This loader uses no fields from `LoadSpec`. Initialize volume with defaults.\n    return {\n      imageInfo: imgdata,\n      loadSpec: new _IVolumeLoader_js__WEBPACK_IMPORTED_MODULE_0__.LoadSpec()\n    };\n  }\n  async loadRawChannelData(imageInfo, _loadSpec, _onUpdateMetadata, onData) {\n    const dims = await this.loadOmeDims();\n    const channelProms = [];\n    // do each channel on a worker?\n    for (let channel = 0; channel < imageInfo.numChannels; ++channel) {\n      const thisChannelProm = new Promise((resolve, reject) => {\n        const params = {\n          channel: channel,\n          // these are target xy sizes for the in-memory volume data\n          // they may or may not be the same size as original xy sizes\n          tilesizex: imageInfo.volumeSize.x,\n          tilesizey: imageInfo.volumeSize.y,\n          sizec: imageInfo.numChannels,\n          sizez: imageInfo.volumeSize.z,\n          dimensionOrder: dims.dimensionorder,\n          bytesPerSample: getBytesPerSample(dims.pixeltype),\n          url: this.url\n        };\n        const worker = new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(\"volume-viewer_es_workers_FetchTiffWorker_js\"), __webpack_require__.b));\n        worker.onmessage = e => {\n          if (e.data.isError) {\n            reject((0,serialize_error__WEBPACK_IMPORTED_MODULE_5__.deserializeError)(e.data.error));\n            return;\n          }\n          const {\n            data,\n            channel,\n            range\n          } = e.data;\n          onData([channel], [data], [range]);\n          worker.terminate();\n          resolve();\n        };\n        worker.postMessage(params);\n      });\n      channelProms.push(thisChannelProm);\n    }\n\n    // waiting for all channels to load allows errors to propagate to the caller via this promise\n    await Promise.all(channelProms);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy9sb2FkZXJzL1RpZmZMb2FkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFrQztBQUNGO0FBQ21CO0FBQytCO0FBQ2xCO0FBQ2lDO0FBQ2pHLFNBQVNVLFVBQVVBLENBQUNDLEdBQUcsRUFBRTtFQUN2QjtFQUNBO0VBQ0EsTUFBTUMsSUFBSSxHQUFHLFlBQVk7RUFDekIsT0FBT0QsR0FBRyxDQUFDRSxJQUFJLENBQUMsQ0FBQyxDQUFDQyxPQUFPLENBQUNGLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7QUFDNUM7QUFDQSxTQUFTRSxNQUFNQSxDQUFDSixHQUFHLEVBQUU7RUFDbkIsTUFBTUssTUFBTSxHQUFHLElBQUlDLFNBQVMsQ0FBQyxDQUFDO0VBQzlCLElBQUk7SUFDRixNQUFNQyxNQUFNLEdBQUdGLE1BQU0sQ0FBQ0csZUFBZSxDQUFDUixHQUFHLEVBQUUsVUFBVSxDQUFDO0lBQ3RELE9BQU9PLE1BQU0sQ0FBQ0Usb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQyxPQUFPQyxDQUFDLEVBQUU7SUFDVixNQUFNLElBQUlkLGdFQUFlLENBQUMsMENBQTBDLEVBQUU7TUFDcEVlLElBQUksRUFBRWQsb0VBQW1CLENBQUNlLGdCQUFnQjtNQUMxQ0MsS0FBSyxFQUFFSDtJQUNULENBQUMsQ0FBQztFQUNKO0FBQ0Y7QUFDQSxNQUFNSSxPQUFPLENBQUM7RUFDWkMsS0FBSyxHQUFHLENBQUM7RUFDVEMsS0FBSyxHQUFHLENBQUM7RUFDVEMsS0FBSyxHQUFHLENBQUM7RUFDVEMsS0FBSyxHQUFHLENBQUM7RUFDVEMsS0FBSyxHQUFHLENBQUM7RUFDVEMsSUFBSSxHQUFHLEVBQUU7RUFDVEMsU0FBUyxHQUFHLEVBQUU7RUFDZEMsY0FBYyxHQUFHLEVBQUU7RUFDbkJDLFVBQVUsR0FBRyxDQUFDO0VBQ2RDLFVBQVUsR0FBRyxDQUFDO0VBQ2RDLFVBQVUsR0FBRyxDQUFDO0VBQ2RDLFlBQVksR0FBRyxFQUFFO0FBQ25CO0FBQ0EsU0FBU0MsbUJBQW1CQSxDQUFDQyxFQUFFLEVBQUVDLElBQUksRUFBRTtFQUNyQyxNQUFNQyxHQUFHLEdBQUdGLEVBQUUsQ0FBQ0csWUFBWSxDQUFDRixJQUFJLENBQUM7RUFDakMsSUFBSUMsR0FBRyxLQUFLLElBQUksRUFBRTtJQUNoQixNQUFNLElBQUlsQyxnRUFBZSxDQUFFLHFCQUFvQmlDLElBQUssdUJBQXNCLEVBQUU7TUFDMUVsQixJQUFJLEVBQUVkLG9FQUFtQixDQUFDZTtJQUM1QixDQUFDLENBQUM7RUFDSjtFQUNBLE9BQU9rQixHQUFHO0FBQ1o7QUFDQSxTQUFTRSxVQUFVQSxDQUFDQyxPQUFPLEVBQUU7RUFDM0IsTUFBTUMsSUFBSSxHQUFHLElBQUlwQixPQUFPLENBQUMsQ0FBQztFQUMxQixNQUFNcUIsUUFBUSxHQUFHRixPQUFPLENBQUN4QixvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDMUR5QixJQUFJLENBQUNuQixLQUFLLEdBQUdxQixNQUFNLENBQUNULG1CQUFtQixDQUFDUSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7RUFDM0RELElBQUksQ0FBQ2xCLEtBQUssR0FBR29CLE1BQU0sQ0FBQ1QsbUJBQW1CLENBQUNRLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztFQUMzREQsSUFBSSxDQUFDakIsS0FBSyxHQUFHbUIsTUFBTSxDQUFDRCxRQUFRLENBQUNKLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNuREcsSUFBSSxDQUFDaEIsS0FBSyxHQUFHa0IsTUFBTSxDQUFDRCxRQUFRLENBQUNKLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNuREcsSUFBSSxDQUFDZixLQUFLLEdBQUdpQixNQUFNLENBQUNELFFBQVEsQ0FBQ0osWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ25ERyxJQUFJLENBQUNkLElBQUksR0FBR2UsUUFBUSxDQUFDSixZQUFZLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFO0VBQzVERyxJQUFJLENBQUNiLFNBQVMsR0FBR2MsUUFBUSxDQUFDSixZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtFQUNwREcsSUFBSSxDQUFDWixjQUFjLEdBQUdhLFFBQVEsQ0FBQ0osWUFBWSxDQUFDLGdCQUFnQixDQUFDLElBQUksT0FBTztFQUN4RUcsSUFBSSxDQUFDWCxVQUFVLEdBQUdhLE1BQU0sQ0FBQ0QsUUFBUSxDQUFDSixZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7RUFDaEVHLElBQUksQ0FBQ1YsVUFBVSxHQUFHWSxNQUFNLENBQUNELFFBQVEsQ0FBQ0osWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0VBQ2hFRyxJQUFJLENBQUNULFVBQVUsR0FBR1csTUFBTSxDQUFDRCxRQUFRLENBQUNKLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztFQUNoRSxNQUFNTSxXQUFXLEdBQUdGLFFBQVEsQ0FBQzFCLG9CQUFvQixDQUFDLFNBQVMsQ0FBQztFQUM1RCxLQUFLLElBQUk2QixDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELFdBQVcsQ0FBQ0UsTUFBTSxFQUFFLEVBQUVELENBQUMsRUFBRTtJQUMzQyxNQUFNRSxJQUFJLEdBQUdILFdBQVcsQ0FBQ0MsQ0FBQyxDQUFDLENBQUNQLFlBQVksQ0FBQyxNQUFNLENBQUM7SUFDaEQsTUFBTVUsRUFBRSxHQUFHSixXQUFXLENBQUNDLENBQUMsQ0FBQyxDQUFDUCxZQUFZLENBQUMsSUFBSSxDQUFDO0lBQzVDRyxJQUFJLENBQUNSLFlBQVksQ0FBQ2dCLElBQUksQ0FBQ0YsSUFBSSxHQUFHQSxJQUFJLEdBQUdDLEVBQUUsR0FBR0EsRUFBRSxHQUFHLFNBQVMsR0FBR0gsQ0FBQyxDQUFDO0VBQy9EO0VBQ0EsT0FBT0osSUFBSTtBQUNiO0FBQ0EsTUFBTVMsaUJBQWlCLEdBQUdoQyxJQUFJLElBQUlBLElBQUksS0FBSyxPQUFPLEdBQUcsQ0FBQyxHQUFHQSxJQUFJLEtBQUssUUFBUSxHQUFHLENBQUMsR0FBRyxDQUFDOztBQUVsRjtBQUNBO0FBQ0EsTUFBTWlDLFVBQVUsU0FBU3BELHFFQUFzQixDQUFDO0VBQzlDcUQsV0FBV0EsQ0FBQ0MsR0FBRyxFQUFFO0lBQ2YsS0FBSyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUNBLEdBQUcsR0FBR0EsR0FBRztFQUNoQjtFQUNBLE1BQU1DLFdBQVdBLENBQUEsRUFBRztJQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDYixJQUFJLEVBQUU7TUFDZCxNQUFNYyxJQUFJLEdBQUcsTUFBTTNELGdEQUFPLENBQUMsSUFBSSxDQUFDeUQsR0FBRyxFQUFFO1FBQ25DRyxhQUFhLEVBQUU7TUFDakIsQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQ3BELHdFQUFtQixDQUFFLCtCQUE4QixJQUFJLENBQUNnRCxHQUFJLEVBQUMsRUFBRWpELG9FQUFtQixDQUFDc0QsU0FBUyxDQUFDLENBQUM7TUFDdkc7TUFDQTtNQUNBO01BQ0EsTUFBTUMsS0FBSyxHQUFHLE1BQU1KLElBQUksQ0FBQ0ssUUFBUSxDQUFDLENBQUMsQ0FBQ0gsS0FBSyxDQUFDcEQsd0VBQW1CLENBQUMsMkJBQTJCLEVBQUVELG9FQUFtQixDQUFDc0QsU0FBUyxDQUFDLENBQUM7TUFDMUgsTUFBTUcsV0FBVyxHQUFHdkQsVUFBVSxDQUFDcUQsS0FBSyxDQUFDRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUNDLGdCQUFnQixDQUFDO01BQ3pFLE1BQU1DLEtBQUssR0FBR3JELE1BQU0sQ0FBQ2tELFdBQVcsQ0FBQztNQUNqQyxNQUFNSSxRQUFRLEdBQUdELEtBQUssQ0FBQ2hELG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUN2RCxJQUFJLENBQUN5QixJQUFJLEdBQUdGLFVBQVUsQ0FBQzBCLFFBQVEsQ0FBQztJQUNsQztJQUNBLE9BQU8sSUFBSSxDQUFDeEIsSUFBSTtFQUNsQjtFQUNBLE1BQU15QixRQUFRQSxDQUFDQyxTQUFTLEVBQUU7SUFDeEIsTUFBTTFCLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQ2EsV0FBVyxDQUFDLENBQUM7SUFDckMsTUFBTWMsQ0FBQyxHQUFHLElBQUluRSx5REFBVSxDQUFDLENBQUM7SUFDMUJtRSxDQUFDLENBQUNDLEtBQUssR0FBRyxDQUFDNUIsSUFBSSxDQUFDZixLQUFLLEVBQUVlLElBQUksQ0FBQ2hCLEtBQUssRUFBRWdCLElBQUksQ0FBQ2pCLEtBQUssRUFBRWlCLElBQUksQ0FBQ2xCLEtBQUssRUFBRWtCLElBQUksQ0FBQ25CLEtBQUssQ0FBQztJQUN0RThDLENBQUMsQ0FBQ0UsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTdCLElBQUksQ0FBQ1QsVUFBVSxFQUFFUyxJQUFJLENBQUNWLFVBQVUsRUFBRVUsSUFBSSxDQUFDWCxVQUFVLENBQUM7SUFDckVzQyxDQUFDLENBQUNHLFNBQVMsR0FBRzlCLElBQUksQ0FBQ2QsSUFBSSxHQUFHYyxJQUFJLENBQUNkLElBQUksR0FBRyxRQUFRO0lBQzlDeUMsQ0FBQyxDQUFDSSxRQUFRLEdBQUcvQixJQUFJLENBQUNiLFNBQVMsR0FBR2EsSUFBSSxDQUFDYixTQUFTLEdBQUcsT0FBTztJQUN0RCxPQUFPLENBQUN3QyxDQUFDLENBQUM7RUFDWjtFQUNBLE1BQU1LLGVBQWVBLENBQUNOLFNBQVMsRUFBRTtJQUMvQixNQUFNMUIsSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDYSxXQUFXLENBQUMsQ0FBQztJQUNyQztJQUNBO0lBQ0E7O0lBRUE7SUFDQTtJQUNBLE1BQU1vQixTQUFTLEdBQUd4RSw2RUFBc0IsQ0FBQ3VDLElBQUksQ0FBQ2pCLEtBQUssRUFBRWlCLElBQUksQ0FBQ25CLEtBQUssRUFBRW1CLElBQUksQ0FBQ2xCLEtBQUssQ0FBQztJQUM1RTtJQUNBLE1BQU1vRCxVQUFVLEdBQUcsSUFBSTtJQUN2QixNQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDSCxVQUFVLEdBQUdELFNBQVMsQ0FBQ0ssQ0FBQyxDQUFDO0lBQ3RELE1BQU1DLFNBQVMsR0FBR0gsSUFBSSxDQUFDQyxLQUFLLENBQUNILFVBQVUsR0FBR0QsU0FBUyxDQUFDTyxDQUFDLENBQUM7O0lBRXREOztJQUVBLE1BQU1DLE9BQU8sR0FBRztNQUNkbkMsSUFBSSxFQUFFLE1BQU07TUFDWm9DLFlBQVksRUFBRSxJQUFJdEYsMENBQU8sQ0FBQzRDLElBQUksQ0FBQ25CLEtBQUssRUFBRW1CLElBQUksQ0FBQ2xCLEtBQUssRUFBRWtCLElBQUksQ0FBQ2pCLEtBQUssQ0FBQztNQUM3RDRELGFBQWEsRUFBRVYsU0FBUztNQUN4QlcsVUFBVSxFQUFFLElBQUl4RiwwQ0FBTyxDQUFDK0UsU0FBUyxFQUFFSSxTQUFTLEVBQUV2QyxJQUFJLENBQUNqQixLQUFLLENBQUM7TUFDekQ4RCxhQUFhLEVBQUUsSUFBSXpGLDBDQUFPLENBQUMrRSxTQUFTLEVBQUVJLFNBQVMsRUFBRXZDLElBQUksQ0FBQ2pCLEtBQUssQ0FBQztNQUM1RCtELGVBQWUsRUFBRSxJQUFJMUYsMENBQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztNQUNyQzJGLGlCQUFpQixFQUFFLElBQUkzRiwwQ0FBTyxDQUFDNEMsSUFBSSxDQUFDWCxVQUFVLEVBQUVXLElBQUksQ0FBQ1YsVUFBVSxFQUFFVSxJQUFJLENBQUNULFVBQVUsQ0FBQztNQUNqRnlELFdBQVcsRUFBRWhELElBQUksQ0FBQ2QsSUFBSSxJQUFJLEVBQUU7TUFDNUIrRCxXQUFXLEVBQUVqRCxJQUFJLENBQUNoQixLQUFLO01BQ3ZCa0UsWUFBWSxFQUFFbEQsSUFBSSxDQUFDUixZQUFZO01BQy9CMkQsS0FBSyxFQUFFbkQsSUFBSSxDQUFDZixLQUFLO01BQ2pCbUUsU0FBUyxFQUFFLENBQUM7TUFDWkMsUUFBUSxFQUFFLEVBQUU7TUFDWkMsbUJBQW1CLEVBQUUsQ0FBQztNQUN0QkMsZUFBZSxFQUFFLENBQUM7TUFDbEJDLFNBQVMsRUFBRTtRQUNUQyxXQUFXLEVBQUUsSUFBSXJHLDBDQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakNzRyxRQUFRLEVBQUUsSUFBSXRHLDBDQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO01BQy9CO0lBQ0YsQ0FBQzs7SUFFRDtJQUNBLE9BQU87TUFDTHVHLFNBQVMsRUFBRWxCLE9BQU87TUFDbEJtQixRQUFRLEVBQUUsSUFBSXJHLHVEQUFRLENBQUM7SUFDekIsQ0FBQztFQUNIO0VBQ0EsTUFBTXNHLGtCQUFrQkEsQ0FBQ0YsU0FBUyxFQUFFakMsU0FBUyxFQUFFb0MsaUJBQWlCLEVBQUVDLE1BQU0sRUFBRTtJQUN4RSxNQUFNL0QsSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDYSxXQUFXLENBQUMsQ0FBQztJQUNyQyxNQUFNbUQsWUFBWSxHQUFHLEVBQUU7SUFDdkI7SUFDQSxLQUFLLElBQUlDLE9BQU8sR0FBRyxDQUFDLEVBQUVBLE9BQU8sR0FBR04sU0FBUyxDQUFDVixXQUFXLEVBQUUsRUFBRWdCLE9BQU8sRUFBRTtNQUNoRSxNQUFNQyxlQUFlLEdBQUcsSUFBSUMsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO1FBQ3ZELE1BQU1DLE1BQU0sR0FBRztVQUNiTCxPQUFPLEVBQUVBLE9BQU87VUFDaEI7VUFDQTtVQUNBOUIsU0FBUyxFQUFFd0IsU0FBUyxDQUFDZixVQUFVLENBQUNOLENBQUM7VUFDakNDLFNBQVMsRUFBRW9CLFNBQVMsQ0FBQ2YsVUFBVSxDQUFDSixDQUFDO1VBQ2pDeEQsS0FBSyxFQUFFMkUsU0FBUyxDQUFDVixXQUFXO1VBQzVCbEUsS0FBSyxFQUFFNEUsU0FBUyxDQUFDZixVQUFVLENBQUMyQixDQUFDO1VBQzdCQyxjQUFjLEVBQUV4RSxJQUFJLENBQUNaLGNBQWM7VUFDbkNxRixjQUFjLEVBQUVoRSxpQkFBaUIsQ0FBQ1QsSUFBSSxDQUFDYixTQUFTLENBQUM7VUFDakR5QixHQUFHLEVBQUUsSUFBSSxDQUFDQTtRQUNaLENBQUM7UUFDRCxNQUFNOEQsTUFBTSxHQUFHLElBQUlDLE1BQU0sQ0FBQyxJQUFJQyxHQUFHLENBQUMsdUlBQTZDLENBQUMsQ0FBQztRQUNqRkYsTUFBTSxDQUFDSyxTQUFTLEdBQUd2RyxDQUFDLElBQUk7VUFDdEIsSUFBSUEsQ0FBQyxDQUFDd0csSUFBSSxDQUFDQyxPQUFPLEVBQUU7WUFDbEJaLE1BQU0sQ0FBQ2hILGlFQUFnQixDQUFDbUIsQ0FBQyxDQUFDd0csSUFBSSxDQUFDRSxLQUFLLENBQUMsQ0FBQztZQUN0QztVQUNGO1VBQ0EsTUFBTTtZQUNKRixJQUFJO1lBQ0pmLE9BQU87WUFDUGtCO1VBQ0YsQ0FBQyxHQUFHM0csQ0FBQyxDQUFDd0csSUFBSTtVQUNWakIsTUFBTSxDQUFDLENBQUNFLE9BQU8sQ0FBQyxFQUFFLENBQUNlLElBQUksQ0FBQyxFQUFFLENBQUNHLEtBQUssQ0FBQyxDQUFDO1VBQ2xDVCxNQUFNLENBQUNVLFNBQVMsQ0FBQyxDQUFDO1VBQ2xCaEIsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDO1FBQ0RNLE1BQU0sQ0FBQ1csV0FBVyxDQUFDZixNQUFNLENBQUM7TUFDNUIsQ0FBQyxDQUFDO01BQ0ZOLFlBQVksQ0FBQ3hELElBQUksQ0FBQzBELGVBQWUsQ0FBQztJQUNwQzs7SUFFQTtJQUNBLE1BQU1DLE9BQU8sQ0FBQ21CLEdBQUcsQ0FBQ3RCLFlBQVksQ0FBQztFQUNqQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFpY3Mvd2ViLTNkLXZpZXdlci8uLi92b2x1bWUtdmlld2VyL2VzL2xvYWRlcnMvVGlmZkxvYWRlci5qcz9hNGE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyb21VcmwgfSBmcm9tIFwiZ2VvdGlmZlwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgZGVzZXJpYWxpemVFcnJvciB9IGZyb20gXCJzZXJpYWxpemUtZXJyb3JcIjtcbmltcG9ydCB7IFRocmVhZGFibGVWb2x1bWVMb2FkZXIsIExvYWRTcGVjLCBWb2x1bWVEaW1zIH0gZnJvbSBcIi4vSVZvbHVtZUxvYWRlci5qc1wiO1xuaW1wb3J0IHsgY29tcHV0ZVBhY2tlZEF0bGFzRGltcyB9IGZyb20gXCIuL1ZvbHVtZUxvYWRlclV0aWxzLmpzXCI7XG5pbXBvcnQgeyBWb2x1bWVMb2FkRXJyb3IsIFZvbHVtZUxvYWRFcnJvclR5cGUsIHdyYXBWb2x1bWVMb2FkRXJyb3IgfSBmcm9tIFwiLi9Wb2x1bWVMb2FkRXJyb3IuanNcIjtcbmZ1bmN0aW9uIHByZXBhcmVYTUwoeG1sKSB7XG4gIC8vIHRyaW0gdHJhaWxpbmcgdW5pY29kZSB6ZXJvcz9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbiAgY29uc3QgZXhwciA9IC9bXFx1MDAwMF0kL2c7XG4gIHJldHVybiB4bWwudHJpbSgpLnJlcGxhY2UoZXhwciwgXCJcIikudHJpbSgpO1xufVxuZnVuY3Rpb24gZ2V0T01FKHhtbCkge1xuICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgeG1sRG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWwsIFwidGV4dC94bWxcIik7XG4gICAgcmV0dXJuIHhtbERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcIk9NRVwiKVswXTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBWb2x1bWVMb2FkRXJyb3IoXCJDb3VsZCBub3QgZmluZCBPTUUgbWV0YWRhdGEgaW4gVElGRiBmaWxlXCIsIHtcbiAgICAgIHR5cGU6IFZvbHVtZUxvYWRFcnJvclR5cGUuSU5WQUxJRF9NRVRBREFUQSxcbiAgICAgIGNhdXNlOiBlXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIE9NRURpbXMge1xuICBzaXpleCA9IDA7XG4gIHNpemV5ID0gMDtcbiAgc2l6ZXogPSAxO1xuICBzaXplYyA9IDE7XG4gIHNpemV0ID0gMTtcbiAgdW5pdCA9IFwiXCI7XG4gIHBpeGVsdHlwZSA9IFwiXCI7XG4gIGRpbWVuc2lvbm9yZGVyID0gXCJcIjtcbiAgcGl4ZWxzaXpleCA9IDE7XG4gIHBpeGVsc2l6ZXkgPSAxO1xuICBwaXhlbHNpemV6ID0gMTtcbiAgY2hhbm5lbG5hbWVzID0gW107XG59XG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVPckVycm9yKGVsLCBhdHRyKSB7XG4gIGNvbnN0IHZhbCA9IGVsLmdldEF0dHJpYnV0ZShhdHRyKTtcbiAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBWb2x1bWVMb2FkRXJyb3IoYE1pc3NpbmcgYXR0cmlidXRlICR7YXR0cn0gaW4gT01FLVRJRkYgbWV0YWRhdGFgLCB7XG4gICAgICB0eXBlOiBWb2x1bWVMb2FkRXJyb3JUeXBlLklOVkFMSURfTUVUQURBVEFcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdmFsO1xufVxuZnVuY3Rpb24gZ2V0T01FRGltcyhpbWFnZUVsKSB7XG4gIGNvbnN0IGRpbXMgPSBuZXcgT01FRGltcygpO1xuICBjb25zdCBwaXhlbHNFbCA9IGltYWdlRWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJQaXhlbHNcIilbMF07XG4gIGRpbXMuc2l6ZXggPSBOdW1iZXIoZ2V0QXR0cmlidXRlT3JFcnJvcihwaXhlbHNFbCwgXCJTaXplWFwiKSk7XG4gIGRpbXMuc2l6ZXkgPSBOdW1iZXIoZ2V0QXR0cmlidXRlT3JFcnJvcihwaXhlbHNFbCwgXCJTaXplWVwiKSk7XG4gIGRpbXMuc2l6ZXogPSBOdW1iZXIocGl4ZWxzRWwuZ2V0QXR0cmlidXRlKFwiU2l6ZVpcIikpO1xuICBkaW1zLnNpemVjID0gTnVtYmVyKHBpeGVsc0VsLmdldEF0dHJpYnV0ZShcIlNpemVDXCIpKTtcbiAgZGltcy5zaXpldCA9IE51bWJlcihwaXhlbHNFbC5nZXRBdHRyaWJ1dGUoXCJTaXplVFwiKSk7XG4gIGRpbXMudW5pdCA9IHBpeGVsc0VsLmdldEF0dHJpYnV0ZShcIlBoeXNpY2FsU2l6ZVhVbml0XCIpIHx8IFwiXCI7XG4gIGRpbXMucGl4ZWx0eXBlID0gcGl4ZWxzRWwuZ2V0QXR0cmlidXRlKFwiVHlwZVwiKSB8fCBcIlwiO1xuICBkaW1zLmRpbWVuc2lvbm9yZGVyID0gcGl4ZWxzRWwuZ2V0QXR0cmlidXRlKFwiRGltZW5zaW9uT3JkZXJcIikgfHwgXCJYWVpDVFwiO1xuICBkaW1zLnBpeGVsc2l6ZXggPSBOdW1iZXIocGl4ZWxzRWwuZ2V0QXR0cmlidXRlKFwiUGh5c2ljYWxTaXplWFwiKSk7XG4gIGRpbXMucGl4ZWxzaXpleSA9IE51bWJlcihwaXhlbHNFbC5nZXRBdHRyaWJ1dGUoXCJQaHlzaWNhbFNpemVZXCIpKTtcbiAgZGltcy5waXhlbHNpemV6ID0gTnVtYmVyKHBpeGVsc0VsLmdldEF0dHJpYnV0ZShcIlBoeXNpY2FsU2l6ZVpcIikpO1xuICBjb25zdCBjaGFubmVsc0VscyA9IHBpeGVsc0VsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiQ2hhbm5lbFwiKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFubmVsc0Vscy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IG5hbWUgPSBjaGFubmVsc0Vsc1tpXS5nZXRBdHRyaWJ1dGUoXCJOYW1lXCIpO1xuICAgIGNvbnN0IGlkID0gY2hhbm5lbHNFbHNbaV0uZ2V0QXR0cmlidXRlKFwiSURcIik7XG4gICAgZGltcy5jaGFubmVsbmFtZXMucHVzaChuYW1lID8gbmFtZSA6IGlkID8gaWQgOiBcIkNoYW5uZWxcIiArIGkpO1xuICB9XG4gIHJldHVybiBkaW1zO1xufVxuY29uc3QgZ2V0Qnl0ZXNQZXJTYW1wbGUgPSB0eXBlID0+IHR5cGUgPT09IFwidWludDhcIiA/IDEgOiB0eXBlID09PSBcInVpbnQxNlwiID8gMiA6IDQ7XG5cbi8vIERlc3BpdGUgdGhlIGNsYXNzIGBUaWZmTG9hZGVyYCBleHRlbmRzLCB0aGlzIGxvYWRlciBpcyBub3QgdGhyZWFkYWJsZSwgc2luY2UgZ2VvdGlmZiBpbnRlcm5hbGx5IHVzZXMgZmVhdHVyZXMgdGhhdFxuLy8gYXJlbid0IGF2YWlsYWJsZSBvbiB3b3JrZXJzLiBJdCB1c2VzIGl0cyBvd24gc3BlY2lhbGl6ZWQgd29ya2VycyBhbnl3YXlzLlxuY2xhc3MgVGlmZkxvYWRlciBleHRlbmRzIFRocmVhZGFibGVWb2x1bWVMb2FkZXIge1xuICBjb25zdHJ1Y3Rvcih1cmwpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudXJsID0gdXJsO1xuICB9XG4gIGFzeW5jIGxvYWRPbWVEaW1zKCkge1xuICAgIGlmICghdGhpcy5kaW1zKSB7XG4gICAgICBjb25zdCB0aWZmID0gYXdhaXQgZnJvbVVybCh0aGlzLnVybCwge1xuICAgICAgICBhbGxvd0Z1bGxGaWxlOiB0cnVlXG4gICAgICB9KS5jYXRjaCh3cmFwVm9sdW1lTG9hZEVycm9yKGBDb3VsZCBub3Qgb3BlbiBUSUZGIGZpbGUgYXQgJHt0aGlzLnVybH1gLCBWb2x1bWVMb2FkRXJyb3JUeXBlLk5PVF9GT1VORCkpO1xuICAgICAgLy8gRE8gTk9UIERPIFRISVMsIElUUyBTTE9XXG4gICAgICAvLyBjb25zdCBpbWFnZWNvdW50ID0gYXdhaXQgdGlmZi5nZXRJbWFnZUNvdW50KCk7XG4gICAgICAvLyByZWFkIHRoZSBGSVJTVCBpbWFnZVxuICAgICAgY29uc3QgaW1hZ2UgPSBhd2FpdCB0aWZmLmdldEltYWdlKCkuY2F0Y2god3JhcFZvbHVtZUxvYWRFcnJvcihcIkZhaWxlZCB0byBvcGVuIFRJRkYgaW1hZ2VcIiwgVm9sdW1lTG9hZEVycm9yVHlwZS5OT1RfRk9VTkQpKTtcbiAgICAgIGNvbnN0IHRpZmZpbWdkZXNjID0gcHJlcGFyZVhNTChpbWFnZS5nZXRGaWxlRGlyZWN0b3J5KCkuSW1hZ2VEZXNjcmlwdGlvbik7XG4gICAgICBjb25zdCBvbWVFbCA9IGdldE9NRSh0aWZmaW1nZGVzYyk7XG4gICAgICBjb25zdCBpbWFnZTBFbCA9IG9tZUVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiSW1hZ2VcIilbMF07XG4gICAgICB0aGlzLmRpbXMgPSBnZXRPTUVEaW1zKGltYWdlMEVsKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGltcztcbiAgfVxuICBhc3luYyBsb2FkRGltcyhfbG9hZFNwZWMpIHtcbiAgICBjb25zdCBkaW1zID0gYXdhaXQgdGhpcy5sb2FkT21lRGltcygpO1xuICAgIGNvbnN0IGQgPSBuZXcgVm9sdW1lRGltcygpO1xuICAgIGQuc2hhcGUgPSBbZGltcy5zaXpldCwgZGltcy5zaXplYywgZGltcy5zaXpleiwgZGltcy5zaXpleSwgZGltcy5zaXpleF07XG4gICAgZC5zcGFjaW5nID0gWzEsIDEsIGRpbXMucGl4ZWxzaXpleiwgZGltcy5waXhlbHNpemV5LCBkaW1zLnBpeGVsc2l6ZXhdO1xuICAgIGQuc3BhY2VVbml0ID0gZGltcy51bml0ID8gZGltcy51bml0IDogXCJtaWNyb25cIjtcbiAgICBkLmRhdGFUeXBlID0gZGltcy5waXhlbHR5cGUgPyBkaW1zLnBpeGVsdHlwZSA6IFwidWludDhcIjtcbiAgICByZXR1cm4gW2RdO1xuICB9XG4gIGFzeW5jIGNyZWF0ZUltYWdlSW5mbyhfbG9hZFNwZWMpIHtcbiAgICBjb25zdCBkaW1zID0gYXdhaXQgdGhpcy5sb2FkT21lRGltcygpO1xuICAgIC8vIGNvbXBhcmUgd2l0aCBzaXpleCwgc2l6ZXlcbiAgICAvL2NvbnN0IHdpZHRoID0gaW1hZ2UuZ2V0V2lkdGgoKTtcbiAgICAvL2NvbnN0IGhlaWdodCA9IGltYWdlLmdldEhlaWdodCgpO1xuXG4gICAgLy8gVE9ETyBhbGxvdyB1c2VyIHNldHRpbmcgb2YgdGhpcyBkb3duc2FtcGxpbmcgaW5mbz9cbiAgICAvLyBUT0RPIGFsbG93IFJPSSBzZWxlY3Rpb246IHJhbmdlIG9mIHgseSx6LGMgZm9yIGEgZ2l2ZW4gdFxuICAgIGNvbnN0IGF0bGFzRGltcyA9IGNvbXB1dGVQYWNrZWRBdGxhc0RpbXMoZGltcy5zaXpleiwgZGltcy5zaXpleCwgZGltcy5zaXpleSk7XG4gICAgLy8gZml0IHRpbGVzIHRvIG1heCBvZiAyMDQ4eDIwNDg/XG4gICAgY29uc3QgdGFyZ2V0U2l6ZSA9IDIwNDg7XG4gICAgY29uc3QgdGlsZXNpemV4ID0gTWF0aC5mbG9vcih0YXJnZXRTaXplIC8gYXRsYXNEaW1zLngpO1xuICAgIGNvbnN0IHRpbGVzaXpleSA9IE1hdGguZmxvb3IodGFyZ2V0U2l6ZSAvIGF0bGFzRGltcy55KTtcblxuICAgIC8vIGxvYWQgdGlmZiBhbmQgY2hlY2sgbWV0YWRhdGFcblxuICAgIGNvbnN0IGltZ2RhdGEgPSB7XG4gICAgICBuYW1lOiBcIlRFU1RcIixcbiAgICAgIG9yaWdpbmFsU2l6ZTogbmV3IFZlY3RvcjMoZGltcy5zaXpleCwgZGltcy5zaXpleSwgZGltcy5zaXpleiksXG4gICAgICBhdGxhc1RpbGVEaW1zOiBhdGxhc0RpbXMsXG4gICAgICB2b2x1bWVTaXplOiBuZXcgVmVjdG9yMyh0aWxlc2l6ZXgsIHRpbGVzaXpleSwgZGltcy5zaXpleiksXG4gICAgICBzdWJyZWdpb25TaXplOiBuZXcgVmVjdG9yMyh0aWxlc2l6ZXgsIHRpbGVzaXpleSwgZGltcy5zaXpleiksXG4gICAgICBzdWJyZWdpb25PZmZzZXQ6IG5ldyBWZWN0b3IzKDAsIDAsIDApLFxuICAgICAgcGh5c2ljYWxQaXhlbFNpemU6IG5ldyBWZWN0b3IzKGRpbXMucGl4ZWxzaXpleCwgZGltcy5waXhlbHNpemV5LCBkaW1zLnBpeGVsc2l6ZXopLFxuICAgICAgc3BhdGlhbFVuaXQ6IGRpbXMudW5pdCB8fCBcIlwiLFxuICAgICAgbnVtQ2hhbm5lbHM6IGRpbXMuc2l6ZWMsXG4gICAgICBjaGFubmVsTmFtZXM6IGRpbXMuY2hhbm5lbG5hbWVzLFxuICAgICAgdGltZXM6IGRpbXMuc2l6ZXQsXG4gICAgICB0aW1lU2NhbGU6IDEsXG4gICAgICB0aW1lVW5pdDogXCJcIixcbiAgICAgIG51bU11bHRpc2NhbGVMZXZlbHM6IDEsXG4gICAgICBtdWx0aXNjYWxlTGV2ZWw6IDAsXG4gICAgICB0cmFuc2Zvcm06IHtcbiAgICAgICAgdHJhbnNsYXRpb246IG5ldyBWZWN0b3IzKDAsIDAsIDApLFxuICAgICAgICByb3RhdGlvbjogbmV3IFZlY3RvcjMoMCwgMCwgMClcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVGhpcyBsb2FkZXIgdXNlcyBubyBmaWVsZHMgZnJvbSBgTG9hZFNwZWNgLiBJbml0aWFsaXplIHZvbHVtZSB3aXRoIGRlZmF1bHRzLlxuICAgIHJldHVybiB7XG4gICAgICBpbWFnZUluZm86IGltZ2RhdGEsXG4gICAgICBsb2FkU3BlYzogbmV3IExvYWRTcGVjKClcbiAgICB9O1xuICB9XG4gIGFzeW5jIGxvYWRSYXdDaGFubmVsRGF0YShpbWFnZUluZm8sIF9sb2FkU3BlYywgX29uVXBkYXRlTWV0YWRhdGEsIG9uRGF0YSkge1xuICAgIGNvbnN0IGRpbXMgPSBhd2FpdCB0aGlzLmxvYWRPbWVEaW1zKCk7XG4gICAgY29uc3QgY2hhbm5lbFByb21zID0gW107XG4gICAgLy8gZG8gZWFjaCBjaGFubmVsIG9uIGEgd29ya2VyP1xuICAgIGZvciAobGV0IGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgaW1hZ2VJbmZvLm51bUNoYW5uZWxzOyArK2NoYW5uZWwpIHtcbiAgICAgIGNvbnN0IHRoaXNDaGFubmVsUHJvbSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgIGNoYW5uZWw6IGNoYW5uZWwsXG4gICAgICAgICAgLy8gdGhlc2UgYXJlIHRhcmdldCB4eSBzaXplcyBmb3IgdGhlIGluLW1lbW9yeSB2b2x1bWUgZGF0YVxuICAgICAgICAgIC8vIHRoZXkgbWF5IG9yIG1heSBub3QgYmUgdGhlIHNhbWUgc2l6ZSBhcyBvcmlnaW5hbCB4eSBzaXplc1xuICAgICAgICAgIHRpbGVzaXpleDogaW1hZ2VJbmZvLnZvbHVtZVNpemUueCxcbiAgICAgICAgICB0aWxlc2l6ZXk6IGltYWdlSW5mby52b2x1bWVTaXplLnksXG4gICAgICAgICAgc2l6ZWM6IGltYWdlSW5mby5udW1DaGFubmVscyxcbiAgICAgICAgICBzaXplejogaW1hZ2VJbmZvLnZvbHVtZVNpemUueixcbiAgICAgICAgICBkaW1lbnNpb25PcmRlcjogZGltcy5kaW1lbnNpb25vcmRlcixcbiAgICAgICAgICBieXRlc1BlclNhbXBsZTogZ2V0Qnl0ZXNQZXJTYW1wbGUoZGltcy5waXhlbHR5cGUpLFxuICAgICAgICAgIHVybDogdGhpcy51cmxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcihuZXcgVVJMKFwiLi4vd29ya2Vycy9GZXRjaFRpZmZXb3JrZXJcIiwgaW1wb3J0Lm1ldGEudXJsKSk7XG4gICAgICAgIHdvcmtlci5vbm1lc3NhZ2UgPSBlID0+IHtcbiAgICAgICAgICBpZiAoZS5kYXRhLmlzRXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChkZXNlcmlhbGl6ZUVycm9yKGUuZGF0YS5lcnJvcikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgY2hhbm5lbCxcbiAgICAgICAgICAgIHJhbmdlXG4gICAgICAgICAgfSA9IGUuZGF0YTtcbiAgICAgICAgICBvbkRhdGEoW2NoYW5uZWxdLCBbZGF0YV0sIFtyYW5nZV0pO1xuICAgICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZShwYXJhbXMpO1xuICAgICAgfSk7XG4gICAgICBjaGFubmVsUHJvbXMucHVzaCh0aGlzQ2hhbm5lbFByb20pO1xuICAgIH1cblxuICAgIC8vIHdhaXRpbmcgZm9yIGFsbCBjaGFubmVscyB0byBsb2FkIGFsbG93cyBlcnJvcnMgdG8gcHJvcGFnYXRlIHRvIHRoZSBjYWxsZXIgdmlhIHRoaXMgcHJvbWlzZVxuICAgIGF3YWl0IFByb21pc2UuYWxsKGNoYW5uZWxQcm9tcyk7XG4gIH1cbn1cbmV4cG9ydCB7IFRpZmZMb2FkZXIgfTsiXSwibmFtZXMiOlsiZnJvbVVybCIsIlZlY3RvcjMiLCJkZXNlcmlhbGl6ZUVycm9yIiwiVGhyZWFkYWJsZVZvbHVtZUxvYWRlciIsIkxvYWRTcGVjIiwiVm9sdW1lRGltcyIsImNvbXB1dGVQYWNrZWRBdGxhc0RpbXMiLCJWb2x1bWVMb2FkRXJyb3IiLCJWb2x1bWVMb2FkRXJyb3JUeXBlIiwid3JhcFZvbHVtZUxvYWRFcnJvciIsInByZXBhcmVYTUwiLCJ4bWwiLCJleHByIiwidHJpbSIsInJlcGxhY2UiLCJnZXRPTUUiLCJwYXJzZXIiLCJET01QYXJzZXIiLCJ4bWxEb2MiLCJwYXJzZUZyb21TdHJpbmciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImUiLCJ0eXBlIiwiSU5WQUxJRF9NRVRBREFUQSIsImNhdXNlIiwiT01FRGltcyIsInNpemV4Iiwic2l6ZXkiLCJzaXpleiIsInNpemVjIiwic2l6ZXQiLCJ1bml0IiwicGl4ZWx0eXBlIiwiZGltZW5zaW9ub3JkZXIiLCJwaXhlbHNpemV4IiwicGl4ZWxzaXpleSIsInBpeGVsc2l6ZXoiLCJjaGFubmVsbmFtZXMiLCJnZXRBdHRyaWJ1dGVPckVycm9yIiwiZWwiLCJhdHRyIiwidmFsIiwiZ2V0QXR0cmlidXRlIiwiZ2V0T01FRGltcyIsImltYWdlRWwiLCJkaW1zIiwicGl4ZWxzRWwiLCJOdW1iZXIiLCJjaGFubmVsc0VscyIsImkiLCJsZW5ndGgiLCJuYW1lIiwiaWQiLCJwdXNoIiwiZ2V0Qnl0ZXNQZXJTYW1wbGUiLCJUaWZmTG9hZGVyIiwiY29uc3RydWN0b3IiLCJ1cmwiLCJsb2FkT21lRGltcyIsInRpZmYiLCJhbGxvd0Z1bGxGaWxlIiwiY2F0Y2giLCJOT1RfRk9VTkQiLCJpbWFnZSIsImdldEltYWdlIiwidGlmZmltZ2Rlc2MiLCJnZXRGaWxlRGlyZWN0b3J5IiwiSW1hZ2VEZXNjcmlwdGlvbiIsIm9tZUVsIiwiaW1hZ2UwRWwiLCJsb2FkRGltcyIsIl9sb2FkU3BlYyIsImQiLCJzaGFwZSIsInNwYWNpbmciLCJzcGFjZVVuaXQiLCJkYXRhVHlwZSIsImNyZWF0ZUltYWdlSW5mbyIsImF0bGFzRGltcyIsInRhcmdldFNpemUiLCJ0aWxlc2l6ZXgiLCJNYXRoIiwiZmxvb3IiLCJ4IiwidGlsZXNpemV5IiwieSIsImltZ2RhdGEiLCJvcmlnaW5hbFNpemUiLCJhdGxhc1RpbGVEaW1zIiwidm9sdW1lU2l6ZSIsInN1YnJlZ2lvblNpemUiLCJzdWJyZWdpb25PZmZzZXQiLCJwaHlzaWNhbFBpeGVsU2l6ZSIsInNwYXRpYWxVbml0IiwibnVtQ2hhbm5lbHMiLCJjaGFubmVsTmFtZXMiLCJ0aW1lcyIsInRpbWVTY2FsZSIsInRpbWVVbml0IiwibnVtTXVsdGlzY2FsZUxldmVscyIsIm11bHRpc2NhbGVMZXZlbCIsInRyYW5zZm9ybSIsInRyYW5zbGF0aW9uIiwicm90YXRpb24iLCJpbWFnZUluZm8iLCJsb2FkU3BlYyIsImxvYWRSYXdDaGFubmVsRGF0YSIsIl9vblVwZGF0ZU1ldGFkYXRhIiwib25EYXRhIiwiY2hhbm5lbFByb21zIiwiY2hhbm5lbCIsInRoaXNDaGFubmVsUHJvbSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicGFyYW1zIiwieiIsImRpbWVuc2lvbk9yZGVyIiwiYnl0ZXNQZXJTYW1wbGUiLCJ3b3JrZXIiLCJXb3JrZXIiLCJVUkwiLCJpbXBvcnQiLCJtZXRhIiwib25tZXNzYWdlIiwiZGF0YSIsImlzRXJyb3IiLCJlcnJvciIsInJhbmdlIiwidGVybWluYXRlIiwicG9zdE1lc3NhZ2UiLCJhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/TiffLoader.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/VolumeLoadError.js":
/*!******************************************************!*\
  !*** ../volume-viewer/es/loaders/VolumeLoadError.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VolumeLoadError: () => (/* binding */ VolumeLoadError),\n/* harmony export */   VolumeLoadErrorType: () => (/* binding */ VolumeLoadErrorType),\n/* harmony export */   wrapVolumeLoadError: () => (/* binding */ wrapVolumeLoadError)\n/* harmony export */ });\n/* harmony import */ var serialize_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! serialize-error */ \"../volume-viewer/node_modules/serialize-error/error-constructors.js\");\n/* harmony import */ var _zarrita_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zarrita/core */ \"../volume-viewer/node_modules/@zarrita/core/dist/src/errors.js\");\n\n\n// geotiff doesn't export its error types...\n\n/** Groups possible load errors into a few broad categories which we can give similar guidance to the user about. */\nlet VolumeLoadErrorType = /*#__PURE__*/function (VolumeLoadErrorType) {\n  VolumeLoadErrorType[\"UNKNOWN\"] = \"unknown\";\n  VolumeLoadErrorType[\"NOT_FOUND\"] = \"not_found\";\n  VolumeLoadErrorType[\"TOO_LARGE\"] = \"too_large\";\n  VolumeLoadErrorType[\"LOAD_DATA_FAILED\"] = \"load_data_failed\";\n  VolumeLoadErrorType[\"INVALID_METADATA\"] = \"invalid_metadata\";\n  VolumeLoadErrorType[\"INVALID_MULTI_SOURCE_ZARR\"] = \"invalid_multi_source_zarr\";\n  return VolumeLoadErrorType;\n}({});\nclass VolumeLoadError extends Error {\n  constructor(message, options) {\n    super(message, options);\n    this.name = \"VolumeLoadError\";\n    this.type = options?.type ?? VolumeLoadErrorType.UNKNOWN;\n  }\n}\n\n// serialize-error only ever calls an error constructor with zero arguments. The required `ErrorConstructor`\n// type is a bit too restrictive - as long as the constructor can be called with no arguments it's fine.\nserialize_error__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(\"NodeNotFoundError\", _zarrita_core__WEBPACK_IMPORTED_MODULE_1__.NodeNotFoundError);\nserialize_error__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(\"KeyError\", _zarrita_core__WEBPACK_IMPORTED_MODULE_1__.KeyError);\nserialize_error__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(\"VolumeLoadError\", VolumeLoadError);\n\n/** Curried function to re-throw an error wrapped in a `VolumeLoadError` with the given `message` and `type`. */\nfunction wrapVolumeLoadError(message = \"Unknown error occurred while loading volume data\", type = VolumeLoadErrorType.UNKNOWN, ignore) {\n  return e => {\n    if (ignore !== undefined && e === ignore) {\n      return e;\n    }\n    if (e instanceof VolumeLoadError) {\n      throw e;\n    }\n    throw new VolumeLoadError(message, {\n      type,\n      cause: e\n    });\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy9sb2FkZXJzL1ZvbHVtZUxvYWRFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFvRDtBQUNRO0FBQzVEOztBQUVBO0FBQ08sSUFBSUcsbUJBQW1CLEdBQUcsYUFBYSxVQUFVQSxtQkFBbUIsRUFBRTtFQUMzRUEsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUztFQUMxQ0EsbUJBQW1CLENBQUMsV0FBVyxDQUFDLEdBQUcsV0FBVztFQUM5Q0EsbUJBQW1CLENBQUMsV0FBVyxDQUFDLEdBQUcsV0FBVztFQUM5Q0EsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsR0FBRyxrQkFBa0I7RUFDNURBLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLEdBQUcsa0JBQWtCO0VBQzVEQSxtQkFBbUIsQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLDJCQUEyQjtFQUM5RSxPQUFPQSxtQkFBbUI7QUFDNUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ0UsTUFBTUMsZUFBZSxTQUFTQyxLQUFLLENBQUM7RUFDekNDLFdBQVdBLENBQUNDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0lBQzVCLEtBQUssQ0FBQ0QsT0FBTyxFQUFFQyxPQUFPLENBQUM7SUFDdkIsSUFBSSxDQUFDQyxJQUFJLEdBQUcsaUJBQWlCO0lBQzdCLElBQUksQ0FBQ0MsSUFBSSxHQUFHRixPQUFPLEVBQUVFLElBQUksSUFBSVAsbUJBQW1CLENBQUNRLE9BQU87RUFDMUQ7QUFDRjs7QUFFQTtBQUNBO0FBQ0FYLHVEQUFpQixDQUFDWSxHQUFHLENBQUMsbUJBQW1CLEVBQUVYLDREQUFpQixDQUFDO0FBQzdERCx1REFBaUIsQ0FBQ1ksR0FBRyxDQUFDLFVBQVUsRUFBRVYsbURBQVEsQ0FBQztBQUMzQ0YsdURBQWlCLENBQUNZLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRVIsZUFBZSxDQUFDOztBQUV6RDtBQUNPLFNBQVNTLG1CQUFtQkEsQ0FBQ04sT0FBTyxHQUFHLGtEQUFrRCxFQUFFRyxJQUFJLEdBQUdQLG1CQUFtQixDQUFDUSxPQUFPLEVBQUVHLE1BQU0sRUFBRTtFQUM1SSxPQUFPQyxDQUFDLElBQUk7SUFDVixJQUFJRCxNQUFNLEtBQUtFLFNBQVMsSUFBSUQsQ0FBQyxLQUFLRCxNQUFNLEVBQUU7TUFDeEMsT0FBT0MsQ0FBQztJQUNWO0lBQ0EsSUFBSUEsQ0FBQyxZQUFZWCxlQUFlLEVBQUU7TUFDaEMsTUFBTVcsQ0FBQztJQUNUO0lBQ0EsTUFBTSxJQUFJWCxlQUFlLENBQUNHLE9BQU8sRUFBRTtNQUNqQ0csSUFBSTtNQUNKTyxLQUFLLEVBQUVGO0lBQ1QsQ0FBQyxDQUFDO0VBQ0osQ0FBQztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFpY3Mvd2ViLTNkLXZpZXdlci8uLi92b2x1bWUtdmlld2VyL2VzL2xvYWRlcnMvVm9sdW1lTG9hZEVycm9yLmpzP2VkMWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JDb25zdHJ1Y3RvcnMgfSBmcm9tIFwic2VyaWFsaXplLWVycm9yXCI7XG5pbXBvcnQgeyBOb2RlTm90Rm91bmRFcnJvciwgS2V5RXJyb3IgfSBmcm9tIFwiQHphcnJpdGEvY29yZVwiO1xuLy8gZ2VvdGlmZiBkb2Vzbid0IGV4cG9ydCBpdHMgZXJyb3IgdHlwZXMuLi5cblxuLyoqIEdyb3VwcyBwb3NzaWJsZSBsb2FkIGVycm9ycyBpbnRvIGEgZmV3IGJyb2FkIGNhdGVnb3JpZXMgd2hpY2ggd2UgY2FuIGdpdmUgc2ltaWxhciBndWlkYW5jZSB0byB0aGUgdXNlciBhYm91dC4gKi9cbmV4cG9ydCBsZXQgVm9sdW1lTG9hZEVycm9yVHlwZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoVm9sdW1lTG9hZEVycm9yVHlwZSkge1xuICBWb2x1bWVMb2FkRXJyb3JUeXBlW1wiVU5LTk9XTlwiXSA9IFwidW5rbm93blwiO1xuICBWb2x1bWVMb2FkRXJyb3JUeXBlW1wiTk9UX0ZPVU5EXCJdID0gXCJub3RfZm91bmRcIjtcbiAgVm9sdW1lTG9hZEVycm9yVHlwZVtcIlRPT19MQVJHRVwiXSA9IFwidG9vX2xhcmdlXCI7XG4gIFZvbHVtZUxvYWRFcnJvclR5cGVbXCJMT0FEX0RBVEFfRkFJTEVEXCJdID0gXCJsb2FkX2RhdGFfZmFpbGVkXCI7XG4gIFZvbHVtZUxvYWRFcnJvclR5cGVbXCJJTlZBTElEX01FVEFEQVRBXCJdID0gXCJpbnZhbGlkX21ldGFkYXRhXCI7XG4gIFZvbHVtZUxvYWRFcnJvclR5cGVbXCJJTlZBTElEX01VTFRJX1NPVVJDRV9aQVJSXCJdID0gXCJpbnZhbGlkX211bHRpX3NvdXJjZV96YXJyXCI7XG4gIHJldHVybiBWb2x1bWVMb2FkRXJyb3JUeXBlO1xufSh7fSk7XG5leHBvcnQgY2xhc3MgVm9sdW1lTG9hZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgdGhpcy5uYW1lID0gXCJWb2x1bWVMb2FkRXJyb3JcIjtcbiAgICB0aGlzLnR5cGUgPSBvcHRpb25zPy50eXBlID8/IFZvbHVtZUxvYWRFcnJvclR5cGUuVU5LTk9XTjtcbiAgfVxufVxuXG4vLyBzZXJpYWxpemUtZXJyb3Igb25seSBldmVyIGNhbGxzIGFuIGVycm9yIGNvbnN0cnVjdG9yIHdpdGggemVybyBhcmd1bWVudHMuIFRoZSByZXF1aXJlZCBgRXJyb3JDb25zdHJ1Y3RvcmBcbi8vIHR5cGUgaXMgYSBiaXQgdG9vIHJlc3RyaWN0aXZlIC0gYXMgbG9uZyBhcyB0aGUgY29uc3RydWN0b3IgY2FuIGJlIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyBpdCdzIGZpbmUuXG5lcnJvckNvbnN0cnVjdG9ycy5zZXQoXCJOb2RlTm90Rm91bmRFcnJvclwiLCBOb2RlTm90Rm91bmRFcnJvcik7XG5lcnJvckNvbnN0cnVjdG9ycy5zZXQoXCJLZXlFcnJvclwiLCBLZXlFcnJvcik7XG5lcnJvckNvbnN0cnVjdG9ycy5zZXQoXCJWb2x1bWVMb2FkRXJyb3JcIiwgVm9sdW1lTG9hZEVycm9yKTtcblxuLyoqIEN1cnJpZWQgZnVuY3Rpb24gdG8gcmUtdGhyb3cgYW4gZXJyb3Igd3JhcHBlZCBpbiBhIGBWb2x1bWVMb2FkRXJyb3JgIHdpdGggdGhlIGdpdmVuIGBtZXNzYWdlYCBhbmQgYHR5cGVgLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBWb2x1bWVMb2FkRXJyb3IobWVzc2FnZSA9IFwiVW5rbm93biBlcnJvciBvY2N1cnJlZCB3aGlsZSBsb2FkaW5nIHZvbHVtZSBkYXRhXCIsIHR5cGUgPSBWb2x1bWVMb2FkRXJyb3JUeXBlLlVOS05PV04sIGlnbm9yZSkge1xuICByZXR1cm4gZSA9PiB7XG4gICAgaWYgKGlnbm9yZSAhPT0gdW5kZWZpbmVkICYmIGUgPT09IGlnbm9yZSkge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIGlmIChlIGluc3RhbmNlb2YgVm9sdW1lTG9hZEVycm9yKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVm9sdW1lTG9hZEVycm9yKG1lc3NhZ2UsIHtcbiAgICAgIHR5cGUsXG4gICAgICBjYXVzZTogZVxuICAgIH0pO1xuICB9O1xufSJdLCJuYW1lcyI6WyJlcnJvckNvbnN0cnVjdG9ycyIsIk5vZGVOb3RGb3VuZEVycm9yIiwiS2V5RXJyb3IiLCJWb2x1bWVMb2FkRXJyb3JUeXBlIiwiVm9sdW1lTG9hZEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJvcHRpb25zIiwibmFtZSIsInR5cGUiLCJVTktOT1dOIiwic2V0Iiwid3JhcFZvbHVtZUxvYWRFcnJvciIsImlnbm9yZSIsImUiLCJ1bmRlZmluZWQiLCJjYXVzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/VolumeLoadError.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/VolumeLoaderUtils.js":
/*!********************************************************!*\
  !*** ../volume-viewer/es/loaders/VolumeLoaderUtils.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_ATLAS_EDGE: () => (/* binding */ MAX_ATLAS_EDGE),\n/* harmony export */   buildDefaultMetadata: () => (/* binding */ buildDefaultMetadata),\n/* harmony export */   composeSubregion: () => (/* binding */ composeSubregion),\n/* harmony export */   computePackedAtlasDims: () => (/* binding */ computePackedAtlasDims),\n/* harmony export */   convertSubregionToPixels: () => (/* binding */ convertSubregionToPixels),\n/* harmony export */   estimateLevelForAtlas: () => (/* binding */ estimateLevelForAtlas),\n/* harmony export */   pickLevelToLoad: () => (/* binding */ pickLevelToLoad),\n/* harmony export */   pickLevelToLoadUnscaled: () => (/* binding */ pickLevelToLoadUnscaled),\n/* harmony export */   scaleDimsToSubregion: () => (/* binding */ scaleDimsToSubregion),\n/* harmony export */   scaleMultipleDimsToSubregion: () => (/* binding */ scaleMultipleDimsToSubregion),\n/* harmony export */   unitNameToSymbol: () => (/* binding */ unitNameToSymbol)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"../volume-viewer/node_modules/three/build/three.module.js\");\n/* harmony import */ var _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VolumeLoadError.js */ \"../volume-viewer/es/loaders/VolumeLoadError.js\");\n\n\nconst MAX_ATLAS_EDGE = 4096;\n\n// Map from units to their symbols\nconst UNIT_SYMBOLS = {\n  angstrom: \"Å\",\n  day: \"d\",\n  foot: \"ft\",\n  hour: \"h\",\n  inch: \"in\",\n  meter: \"m\",\n  micron: \"μm\",\n  mile: \"mi\",\n  minute: \"min\",\n  parsec: \"pc\",\n  second: \"s\",\n  yard: \"yd\"\n};\n\n// Units which may take SI prefixes (e.g. micro-, tera-)\nconst SI_UNITS = [\"meter\", \"second\"];\n\n// SI prefixes which abbreviate in nonstandard ways\nconst SI_PREFIX_ABBVS = {\n  micro: \"μ\",\n  deca: \"da\"\n};\n\n/** Converts a full spatial or temporal unit name supported by OME-Zarr to its unit symbol */\n// (see https://ngff.openmicroscopy.org/latest/#axes-md)\nfunction unitNameToSymbol(unitName) {\n  if (unitName === undefined) {\n    return null;\n  }\n  if (UNIT_SYMBOLS[unitName]) {\n    return UNIT_SYMBOLS[unitName];\n  }\n  const prefixedSIUnit = SI_UNITS.find(siUnit => unitName.endsWith(siUnit));\n  if (prefixedSIUnit) {\n    const prefix = unitName.substring(0, unitName.length - prefixedSIUnit.length);\n    if (SI_PREFIX_ABBVS[prefix]) {\n      // \"special\" SI prefix\n      return SI_PREFIX_ABBVS[prefix] + UNIT_SYMBOLS[prefixedSIUnit];\n    }\n\n    // almost all SI prefixes are abbreviated by first letter, capitalized if prefix ends with \"a\"\n    const capitalize = prefix.endsWith(\"a\");\n    const prefixAbbr = capitalize ? prefix[0].toUpperCase() : prefix[0];\n    return prefixAbbr + UNIT_SYMBOLS[prefixedSIUnit];\n  }\n  return null;\n}\n\n// We want to find the most \"square\" packing of z tw by th tiles.\n// Compute number of rows and columns.\nfunction computePackedAtlasDims(z, tw, th) {\n  let nextrows = 1;\n  let nextcols = z;\n  let ratio = nextcols * tw / (nextrows * th);\n  let nrows = nextrows;\n  let ncols = nextcols;\n  while (ratio > 1) {\n    nrows = nextrows;\n    ncols = nextcols;\n    nextcols -= 1;\n    nextrows = Math.ceil(z / nextcols);\n    ratio = nextcols * tw / (nextrows * th);\n  }\n  return new three__WEBPACK_IMPORTED_MODULE_1__.Vector2(nrows, ncols);\n}\nfunction doesSpatialDimensionFitInAtlas(spatialDimZYX, maxAtlasEdge = MAX_ATLAS_EDGE) {\n  // Estimate atlas size\n  const x = spatialDimZYX[2];\n  const y = spatialDimZYX[1];\n  const z = spatialDimZYX[0];\n  const xtiles = Math.floor(maxAtlasEdge / x);\n  const ytiles = Math.floor(maxAtlasEdge / y);\n  return xtiles * ytiles >= z;\n}\n\n/** Picks the largest scale level that can fit into a texture atlas with edges no longer than `maxAtlasEdge`. */\nfunction estimateLevelForAtlas(spatialDimsZYX, maxAtlasEdge = MAX_ATLAS_EDGE) {\n  if (spatialDimsZYX.length <= 1) {\n    return 0;\n  }\n  for (let i = 0; i < spatialDimsZYX.length; ++i) {\n    // estimate atlas size:\n    if (doesSpatialDimensionFitInAtlas(spatialDimsZYX[i], maxAtlasEdge)) {\n      return i;\n    }\n  }\n  return undefined;\n}\nconst maxCeil = val => Math.max(Math.ceil(val), 1);\nconst scaleDims = (size, [z, y, x]) => [maxCeil(z * size.z), maxCeil(y * size.y), maxCeil(x * size.x)];\nfunction scaleDimsToSubregion(subregion, dims) {\n  const size = subregion.getSize(new three__WEBPACK_IMPORTED_MODULE_1__.Vector3());\n  return scaleDims(size, dims);\n}\nfunction scaleMultipleDimsToSubregion(subregion, dims) {\n  const size = subregion.getSize(new three__WEBPACK_IMPORTED_MODULE_1__.Vector3());\n  return dims.map(dim => scaleDims(size, dim));\n}\n\n/**\r\n * Picks the best scale level to load based on scale level dimensions and a `LoadSpec`. This calls\r\n * `estimateLevelForAtlas`, then accounts for `LoadSpec`'s scale level picking properties:\r\n * - `multiscaleLevel` imposes a minimum scale level (or *maximum* resolution level) to load\r\n * - `maxAtlasEdge` sets the maximum size of the texture atlas that may be produced by a load\r\n * - `scaleLevelBias` offsets the scale level index after the optimal level is picked based on `maxAtlasEdge`\r\n *\r\n *  This function assumes that `spatialDimsZYX` has already been appropriately scaled to match `loadSpec`'s `subregion`.\r\n */\nfunction pickLevelToLoadUnscaled(loadSpec, spatialDimsZYX) {\n  let levelToLoad = estimateLevelForAtlas(spatialDimsZYX, loadSpec.maxAtlasEdge);\n  // Check here for whether levelToLoad is within max atlas size?\n  if (levelToLoad !== undefined) {\n    levelToLoad = Math.max(levelToLoad + (loadSpec.scaleLevelBias ?? 0), loadSpec.multiscaleLevel ?? 0);\n    levelToLoad = Math.max(0, Math.min(spatialDimsZYX.length - 1, levelToLoad));\n    if (doesSpatialDimensionFitInAtlas(spatialDimsZYX[levelToLoad], loadSpec.maxAtlasEdge)) {\n      return levelToLoad;\n    }\n  }\n\n  // Level to load could not be loaded due to atlas size constraints.\n  if (levelToLoad === undefined) {\n    // No optimal level exists so choose the smallest level to report out\n    levelToLoad = spatialDimsZYX.length - 1;\n  }\n  const smallestDims = spatialDimsZYX[levelToLoad];\n  console.error(`Volume is too large; no multiscale level found that fits in preferred memory footprint. Selected level ${levelToLoad}  has dimensions `, smallestDims, `. Max atlas edge allowed is ${loadSpec.maxAtlasEdge}.`);\n  console.log(\"All available levels: \", spatialDimsZYX);\n  throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadError(`Volume is too large; multiscale level does not fit in preferred memory footprint.`, {\n    type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadErrorType.TOO_LARGE\n  });\n}\n\n/**\r\n * Picks the best scale level to load based on scale level dimensions and a `LoadSpec`. This calls\r\n * `estimateLevelForAtlas` and accounts for all properties of `LoadSpec` considered by\r\n * `pickLevelToLoadUnscaled`, and additionally scales the dimensions of the scale levels to account for the\r\n * `LoadSpec`'s `subregion` property.\r\n */\nfunction pickLevelToLoad(loadSpec, spatialDimsZYX) {\n  const scaledDims = scaleMultipleDimsToSubregion(loadSpec.subregion, spatialDimsZYX);\n  return pickLevelToLoadUnscaled(loadSpec, scaledDims);\n}\n\n/** Given the size of a volume in pixels, convert a `Box3` in the 0-1 range to pixels */\nfunction convertSubregionToPixels(region, size) {\n  const min = region.min.clone().multiply(size).floor();\n  const max = region.max.clone().multiply(size).ceil();\n\n  // ensure it's always valid to specify the same number at both ends and get a single slice\n  if (min.x === max.x && min.x < size.x) {\n    max.x += 1;\n  }\n  if (min.y === max.y && min.y < size.y) {\n    max.y += 1;\n  }\n  if (min.z === max.z && min.z < size.z) {\n    max.z += 1;\n  }\n  return new three__WEBPACK_IMPORTED_MODULE_1__.Box3(min, max);\n}\n\n/**\r\n * Return the subset of `container` specified by `region`, assuming that `region` contains fractional values (between 0\r\n * and 1). i.e. if `container`'s range on the X axis is 0-4 and `region`'s is 0.25-0.5, the result will have range 1-2.\r\n */\nfunction composeSubregion(region, container) {\n  const size = container.getSize(new three__WEBPACK_IMPORTED_MODULE_1__.Vector3());\n  const min = region.min.clone().multiply(size).add(container.min);\n  const max = region.max.clone().multiply(size).add(container.min);\n  return new three__WEBPACK_IMPORTED_MODULE_1__.Box3(min, max);\n}\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// currently everything needed can come from the imageInfo\n// but in the future each IVolumeLoader could have a completely separate implementation.\nfunction buildDefaultMetadata(imageInfo) {\n  const physicalSize = imageInfo.volumeSize.clone().multiply(imageInfo.physicalPixelSize);\n  const metadata = {};\n  metadata[\"Dimensions\"] = {\n    ...imageInfo.subregionSize\n  };\n  metadata[\"Original dimensions\"] = {\n    ...imageInfo.originalSize\n  };\n  metadata[\"Physical size\"] = {\n    x: physicalSize.x + imageInfo.spatialUnit,\n    y: physicalSize.y + imageInfo.spatialUnit,\n    z: physicalSize.z + imageInfo.spatialUnit\n  };\n  metadata[\"Physical size per pixel\"] = {\n    x: imageInfo.physicalPixelSize.x + imageInfo.spatialUnit,\n    y: imageInfo.physicalPixelSize.y + imageInfo.spatialUnit,\n    z: imageInfo.physicalPixelSize.z + imageInfo.spatialUnit\n  };\n  metadata[\"Channels\"] = imageInfo.numChannels;\n  metadata[\"Time series frames\"] = imageInfo.times || 1;\n  // don't add User data if it's empty\n  if (imageInfo.userData && !isEmpty(imageInfo.userData)) {\n    metadata[\"User data\"] = imageInfo.userData;\n  }\n  return metadata;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/VolumeLoaderUtils.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/index.js":
/*!********************************************!*\
  !*** ../volume-viewer/es/loaders/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrefetchDirection: () => (/* reexport safe */ _zarr_utils_types_js__WEBPACK_IMPORTED_MODULE_4__.PrefetchDirection),\n/* harmony export */   VolumeFileFormat: () => (/* binding */ VolumeFileFormat),\n/* harmony export */   createVolumeLoader: () => (/* binding */ createVolumeLoader),\n/* harmony export */   pathToFileType: () => (/* binding */ pathToFileType)\n/* harmony export */ });\n/* harmony import */ var _OmeZarrLoader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OmeZarrLoader.js */ \"../volume-viewer/es/loaders/OmeZarrLoader.js\");\n/* harmony import */ var _JsonImageInfoLoader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./JsonImageInfoLoader.js */ \"../volume-viewer/es/loaders/JsonImageInfoLoader.js\");\n/* harmony import */ var _RawArrayLoader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RawArrayLoader.js */ \"../volume-viewer/es/loaders/RawArrayLoader.js\");\n/* harmony import */ var _TiffLoader_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TiffLoader.js */ \"../volume-viewer/es/loaders/TiffLoader.js\");\n/* harmony import */ var _zarr_utils_types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./zarr_utils/types.js */ \"../volume-viewer/es/loaders/zarr_utils/types.js\");\n\n\n\n\n\nlet VolumeFileFormat = /*#__PURE__*/function (VolumeFileFormat) {\n  VolumeFileFormat[\"ZARR\"] = \"zarr\";\n  VolumeFileFormat[\"JSON\"] = \"json\";\n  VolumeFileFormat[\"TIFF\"] = \"tiff\";\n  VolumeFileFormat[\"DATA\"] = \"data\";\n  return VolumeFileFormat;\n}({});\n\n// superset of all necessary loader options\n\nfunction pathToFileType(path) {\n  if (path.endsWith(\".json\")) {\n    return VolumeFileFormat.JSON;\n  } else if (path.endsWith(\".tif\") || path.endsWith(\".tiff\")) {\n    return VolumeFileFormat.TIFF;\n  }\n  return VolumeFileFormat.ZARR;\n}\nasync function createVolumeLoader(path, options) {\n  const pathString = Array.isArray(path) ? path[0] : path;\n  const fileType = options?.fileType || pathToFileType(pathString);\n  switch (fileType) {\n    case VolumeFileFormat.ZARR:\n      return await _OmeZarrLoader_js__WEBPACK_IMPORTED_MODULE_0__.OMEZarrLoader.createLoader(path, options?.scene, options?.cache, options?.queue, options?.fetchOptions);\n    case VolumeFileFormat.JSON:\n      return new _JsonImageInfoLoader_js__WEBPACK_IMPORTED_MODULE_1__.JsonImageInfoLoader(path, options?.cache);\n    case VolumeFileFormat.TIFF:\n      return new _TiffLoader_js__WEBPACK_IMPORTED_MODULE_3__.TiffLoader(pathString);\n    case VolumeFileFormat.DATA:\n      if (!options?.rawArrayOptions) {\n        throw new Error(\"Must provide RawArrayOptions for RawArrayLoader\");\n      }\n      return new _RawArrayLoader_js__WEBPACK_IMPORTED_MODULE_2__.RawArrayLoader(options?.rawArrayOptions.data, options?.rawArrayOptions.metadata);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy9sb2FkZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFtRDtBQUNZO0FBQ1Y7QUFDUjtBQUNhO0FBQ25ELElBQUlLLGdCQUFnQixHQUFHLGFBQWEsVUFBVUEsZ0JBQWdCLEVBQUU7RUFDckVBLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU07RUFDakNBLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU07RUFDakNBLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU07RUFDakNBLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU07RUFDakMsT0FBT0EsZ0JBQWdCO0FBQ3pCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFTDs7QUFFTyxTQUFTQyxjQUFjQSxDQUFDQyxJQUFJLEVBQUU7RUFDbkMsSUFBSUEsSUFBSSxDQUFDQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7SUFDMUIsT0FBT0gsZ0JBQWdCLENBQUNJLElBQUk7RUFDOUIsQ0FBQyxNQUFNLElBQUlGLElBQUksQ0FBQ0MsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJRCxJQUFJLENBQUNDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtJQUMxRCxPQUFPSCxnQkFBZ0IsQ0FBQ0ssSUFBSTtFQUM5QjtFQUNBLE9BQU9MLGdCQUFnQixDQUFDTSxJQUFJO0FBQzlCO0FBQ08sZUFBZUMsa0JBQWtCQSxDQUFDTCxJQUFJLEVBQUVNLE9BQU8sRUFBRTtFQUN0RCxNQUFNQyxVQUFVLEdBQUdDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDVCxJQUFJLENBQUMsR0FBR0EsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHQSxJQUFJO0VBQ3ZELE1BQU1VLFFBQVEsR0FBR0osT0FBTyxFQUFFSSxRQUFRLElBQUlYLGNBQWMsQ0FBQ1EsVUFBVSxDQUFDO0VBQ2hFLFFBQVFHLFFBQVE7SUFDZCxLQUFLWixnQkFBZ0IsQ0FBQ00sSUFBSTtNQUN4QixPQUFPLE1BQU1YLDREQUFhLENBQUNrQixZQUFZLENBQUNYLElBQUksRUFBRU0sT0FBTyxFQUFFTSxLQUFLLEVBQUVOLE9BQU8sRUFBRU8sS0FBSyxFQUFFUCxPQUFPLEVBQUVRLEtBQUssRUFBRVIsT0FBTyxFQUFFUyxZQUFZLENBQUM7SUFDdEgsS0FBS2pCLGdCQUFnQixDQUFDSSxJQUFJO01BQ3hCLE9BQU8sSUFBSVIsd0VBQW1CLENBQUNNLElBQUksRUFBRU0sT0FBTyxFQUFFTyxLQUFLLENBQUM7SUFDdEQsS0FBS2YsZ0JBQWdCLENBQUNLLElBQUk7TUFDeEIsT0FBTyxJQUFJUCxzREFBVSxDQUFDVyxVQUFVLENBQUM7SUFDbkMsS0FBS1QsZ0JBQWdCLENBQUNrQixJQUFJO01BQ3hCLElBQUksQ0FBQ1YsT0FBTyxFQUFFVyxlQUFlLEVBQUU7UUFDN0IsTUFBTSxJQUFJQyxLQUFLLENBQUMsaURBQWlELENBQUM7TUFDcEU7TUFDQSxPQUFPLElBQUl2Qiw4REFBYyxDQUFDVyxPQUFPLEVBQUVXLGVBQWUsQ0FBQ0UsSUFBSSxFQUFFYixPQUFPLEVBQUVXLGVBQWUsQ0FBQ0csUUFBUSxDQUFDO0VBQy9GO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWljcy93ZWItM2Qtdmlld2VyLy4uL3ZvbHVtZS12aWV3ZXIvZXMvbG9hZGVycy9pbmRleC5qcz85ZTFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9NRVphcnJMb2FkZXIgfSBmcm9tIFwiLi9PbWVaYXJyTG9hZGVyLmpzXCI7XG5pbXBvcnQgeyBKc29uSW1hZ2VJbmZvTG9hZGVyIH0gZnJvbSBcIi4vSnNvbkltYWdlSW5mb0xvYWRlci5qc1wiO1xuaW1wb3J0IHsgUmF3QXJyYXlMb2FkZXIgfSBmcm9tIFwiLi9SYXdBcnJheUxvYWRlci5qc1wiO1xuaW1wb3J0IHsgVGlmZkxvYWRlciB9IGZyb20gXCIuL1RpZmZMb2FkZXIuanNcIjtcbmV4cG9ydCB7IFByZWZldGNoRGlyZWN0aW9uIH0gZnJvbSBcIi4vemFycl91dGlscy90eXBlcy5qc1wiO1xuZXhwb3J0IGxldCBWb2x1bWVGaWxlRm9ybWF0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChWb2x1bWVGaWxlRm9ybWF0KSB7XG4gIFZvbHVtZUZpbGVGb3JtYXRbXCJaQVJSXCJdID0gXCJ6YXJyXCI7XG4gIFZvbHVtZUZpbGVGb3JtYXRbXCJKU09OXCJdID0gXCJqc29uXCI7XG4gIFZvbHVtZUZpbGVGb3JtYXRbXCJUSUZGXCJdID0gXCJ0aWZmXCI7XG4gIFZvbHVtZUZpbGVGb3JtYXRbXCJEQVRBXCJdID0gXCJkYXRhXCI7XG4gIHJldHVybiBWb2x1bWVGaWxlRm9ybWF0O1xufSh7fSk7XG5cbi8vIHN1cGVyc2V0IG9mIGFsbCBuZWNlc3NhcnkgbG9hZGVyIG9wdGlvbnNcblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhUb0ZpbGVUeXBlKHBhdGgpIHtcbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIuanNvblwiKSkge1xuICAgIHJldHVybiBWb2x1bWVGaWxlRm9ybWF0LkpTT047XG4gIH0gZWxzZSBpZiAocGF0aC5lbmRzV2l0aChcIi50aWZcIikgfHwgcGF0aC5lbmRzV2l0aChcIi50aWZmXCIpKSB7XG4gICAgcmV0dXJuIFZvbHVtZUZpbGVGb3JtYXQuVElGRjtcbiAgfVxuICByZXR1cm4gVm9sdW1lRmlsZUZvcm1hdC5aQVJSO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVZvbHVtZUxvYWRlcihwYXRoLCBvcHRpb25zKSB7XG4gIGNvbnN0IHBhdGhTdHJpbmcgPSBBcnJheS5pc0FycmF5KHBhdGgpID8gcGF0aFswXSA6IHBhdGg7XG4gIGNvbnN0IGZpbGVUeXBlID0gb3B0aW9ucz8uZmlsZVR5cGUgfHwgcGF0aFRvRmlsZVR5cGUocGF0aFN0cmluZyk7XG4gIHN3aXRjaCAoZmlsZVR5cGUpIHtcbiAgICBjYXNlIFZvbHVtZUZpbGVGb3JtYXQuWkFSUjpcbiAgICAgIHJldHVybiBhd2FpdCBPTUVaYXJyTG9hZGVyLmNyZWF0ZUxvYWRlcihwYXRoLCBvcHRpb25zPy5zY2VuZSwgb3B0aW9ucz8uY2FjaGUsIG9wdGlvbnM/LnF1ZXVlLCBvcHRpb25zPy5mZXRjaE9wdGlvbnMpO1xuICAgIGNhc2UgVm9sdW1lRmlsZUZvcm1hdC5KU09OOlxuICAgICAgcmV0dXJuIG5ldyBKc29uSW1hZ2VJbmZvTG9hZGVyKHBhdGgsIG9wdGlvbnM/LmNhY2hlKTtcbiAgICBjYXNlIFZvbHVtZUZpbGVGb3JtYXQuVElGRjpcbiAgICAgIHJldHVybiBuZXcgVGlmZkxvYWRlcihwYXRoU3RyaW5nKTtcbiAgICBjYXNlIFZvbHVtZUZpbGVGb3JtYXQuREFUQTpcbiAgICAgIGlmICghb3B0aW9ucz8ucmF3QXJyYXlPcHRpb25zKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk11c3QgcHJvdmlkZSBSYXdBcnJheU9wdGlvbnMgZm9yIFJhd0FycmF5TG9hZGVyXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBSYXdBcnJheUxvYWRlcihvcHRpb25zPy5yYXdBcnJheU9wdGlvbnMuZGF0YSwgb3B0aW9ucz8ucmF3QXJyYXlPcHRpb25zLm1ldGFkYXRhKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJPTUVaYXJyTG9hZGVyIiwiSnNvbkltYWdlSW5mb0xvYWRlciIsIlJhd0FycmF5TG9hZGVyIiwiVGlmZkxvYWRlciIsIlByZWZldGNoRGlyZWN0aW9uIiwiVm9sdW1lRmlsZUZvcm1hdCIsInBhdGhUb0ZpbGVUeXBlIiwicGF0aCIsImVuZHNXaXRoIiwiSlNPTiIsIlRJRkYiLCJaQVJSIiwiY3JlYXRlVm9sdW1lTG9hZGVyIiwib3B0aW9ucyIsInBhdGhTdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJmaWxlVHlwZSIsImNyZWF0ZUxvYWRlciIsInNjZW5lIiwiY2FjaGUiLCJxdWV1ZSIsImZldGNoT3B0aW9ucyIsIkRBVEEiLCJyYXdBcnJheU9wdGlvbnMiLCJFcnJvciIsImRhdGEiLCJtZXRhZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/index.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/zarr_utils/ChunkPrefetchIterator.js":
/*!***********************************************************************!*\
  !*** ../volume-viewer/es/loaders/zarr_utils/ChunkPrefetchIterator.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ChunkPrefetchIterator)\n/* harmony export */ });\nconst allEqual = arr => arr.every(v => v === arr[0]);\nconst pushN = (arr, val, n) => {\n  for (let i = 0; i < n; i++) {\n    arr.push(val);\n  }\n};\nconst directionToIndex = dir => {\n  const absDir = dir >> 1; // shave off sign bit to get index in TZYX\n  return absDir + Number(absDir !== 0); // convert TZYX -> TCZYX by skipping c (index 1)\n};\nfunction updateMinMax(val, minmax) {\n  if (val < minmax[0]) {\n    minmax[0] = val;\n  }\n  if (val > minmax[1]) {\n    minmax[1] = val;\n  }\n}\n\n/**\r\n * Since the user is most likely to want nearby data (in space or time) first, we should prefetch those chunks first.\r\n *\r\n * Given a list of just-loaded chunks and some bounds, `ChunkPrefetchIterator` iterates evenly outwards in T/Z/Y/X.\r\n */\n// NOTE: Assumes `chunks` form a rectangular prism! Will create gaps otherwise! (in practice they always should)\nclass ChunkPrefetchIterator {\n  constructor(chunks, tzyxMaxPrefetchOffset, tczyxChunksPerSource, priorityDirections) {\n    // Get min and max chunk coordinates for T/Z/Y/X\n    const extrema = [[Infinity, -Infinity], [Infinity, -Infinity], [Infinity, -Infinity], [Infinity, -Infinity]];\n    for (const chunk of chunks) {\n      updateMinMax(chunk[0], extrema[0]);\n      updateMinMax(chunk[2], extrema[1]);\n      updateMinMax(chunk[3], extrema[2]);\n      updateMinMax(chunk[4], extrema[3]);\n    }\n\n    // Create `PrefetchDirectionState`s for each direction\n    this.directionStates = [];\n    this.priorityDirectionStates = [];\n    for (const [direction, start] of extrema.flat().entries()) {\n      const dimension = direction >> 1; // shave off sign bit to get index in TZYX\n      const tczyxIndex = dimension + Number(dimension !== 0); // convert TZYX -> TCZYX by skipping c (index 1)\n      let end;\n      if (direction & 1) {\n        // Positive direction - end is either the max coordinate in the fetched set plus the max offset in this\n        // dimension, or the max chunk coordinate in this dimension, whichever comes first\n        const endsPerSource = tczyxChunksPerSource.map(chunkDims => {\n          return Math.min(start + tzyxMaxPrefetchOffset[dimension], chunkDims[tczyxIndex] - 1);\n        });\n\n        // Save some time: if all sources have the same end, we can just store that\n        if (allEqual(endsPerSource)) {\n          end = endsPerSource[0];\n        } else {\n          // Otherwise, expand our ends per source array to ends per channel\n          end = [];\n          for (const [i, sourceEnd] of endsPerSource.entries()) {\n            pushN(end, sourceEnd, tczyxChunksPerSource[i][1]);\n          }\n        }\n        // end = Math.min(start + tzyxMaxPrefetchOffset[dimension], tczyxChunksPerDimension[dimension] - 1);\n      } else {\n        // Negative direction - end is either the min coordinate in the fetched set minus the max offset in this\n        // dimension, or 0, whichever comes first\n        end = Math.max(start - tzyxMaxPrefetchOffset[dimension], 0);\n      }\n      const directionState = {\n        direction,\n        start,\n        end,\n        chunks: []\n      };\n      if (priorityDirections && priorityDirections.includes(direction)) {\n        this.priorityDirectionStates.push(directionState);\n      } else {\n        this.directionStates.push(directionState);\n      }\n    }\n\n    // Fill each `PrefetchDirectionState` with chunks at the border of the fetched set\n    for (const chunk of chunks) {\n      for (const dir of this.directionStates) {\n        if (chunk[directionToIndex(dir.direction)] === dir.start) {\n          dir.chunks.push(chunk);\n        }\n      }\n      for (const dir of this.priorityDirectionStates) {\n        if (chunk[directionToIndex(dir.direction)] === dir.start) {\n          dir.chunks.push(chunk);\n        }\n      }\n    }\n  }\n  static *iterateDirections(directions) {\n    let offset = 1;\n    while (directions.length > 0) {\n      // Remove directions in which we have reached the end (or, if per-channel ends, the end for all channels)\n      directions = directions.filter(dir => {\n        const end = Array.isArray(dir.end) ? Math.max(...dir.end) : dir.end;\n        if (dir.direction & 1) {\n          return dir.start + offset <= end;\n        } else {\n          return dir.start - offset >= end;\n        }\n      });\n\n      // Yield chunks one chunk farther out in every remaining direction\n      for (const dir of directions) {\n        const offsetDir = offset * (dir.direction & 1 ? 1 : -1);\n        for (const chunk of dir.chunks) {\n          // Skip this chunk if this channel has a specific per-channel end and we've reached it\n          if (Array.isArray(dir.end) && chunk[directionToIndex(dir.direction)] + offsetDir > dir.end[chunk[1]]) {\n            continue;\n          }\n          const newChunk = chunk.slice();\n          newChunk[directionToIndex(dir.direction)] += offsetDir;\n          yield newChunk;\n        }\n      }\n      offset += 1;\n    }\n  }\n  *[Symbol.iterator]() {\n    // Yield all chunks in priority direction(s) first, if any\n    if (this.priorityDirectionStates.length > 0) {\n      for (const chunk of ChunkPrefetchIterator.iterateDirections(this.priorityDirectionStates)) {\n        yield chunk;\n      }\n    }\n\n    // Then yield all chunks in other directions\n    for (const chunk of ChunkPrefetchIterator.iterateDirections(this.directionStates)) {\n      yield chunk;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/zarr_utils/ChunkPrefetchIterator.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/zarr_utils/WrappedStore.js":
/*!**************************************************************!*\
  !*** ../volume-viewer/es/loaders/zarr_utils/WrappedStore.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * `Readable` is zarrita's minimal abstraction for any source of data.\r\n * `WrappedStore` wraps another `Readable` and adds (optional) connections to `VolumeCache` and `RequestQueue`.\r\n */\nclass WrappedStore {\n  constructor(baseStore, cache, queue) {\n    this.baseStore = baseStore;\n    this.cache = cache;\n    this.queue = queue;\n  }\n  // Dummy implementation to make this class easier to use in tests\n  set(_key, _value) {\n    return Promise.resolve();\n  }\n  async getAndCache(key, cacheKey, opts) {\n    const result = await this.baseStore.get(key, opts);\n    if (this.cache && result) {\n      this.cache.insert(cacheKey, result);\n    }\n    return result;\n  }\n  async get(key, opts) {\n    const ZARR_EXTS = [\".zarray\", \".zgroup\", \".zattrs\", \"zarr.json\"];\n    if (!this.cache || ZARR_EXTS.some(s => key.endsWith(s))) {\n      return this.baseStore.get(key, opts?.options);\n    }\n    if (opts?.reportKey) {\n      opts.reportKey(key, opts.subscriber);\n    }\n    let keyPrefix = this.baseStore.url ?? \"\";\n    if (keyPrefix !== \"\" && !(keyPrefix instanceof URL) && !keyPrefix.endsWith(\"/\")) {\n      keyPrefix += \"/\";\n    }\n    const fullKey = keyPrefix + key.slice(1);\n\n    // Check the cache\n    const cacheResult = this.cache.get(fullKey);\n    if (cacheResult) {\n      return new Uint8Array(cacheResult);\n    }\n\n    // Not in cache; load the chunk and cache it\n    if (this.queue && opts) {\n      return this.queue.addRequest(fullKey, opts.subscriber, () => this.getAndCache(key, fullKey, opts?.options), opts.isPrefetch);\n    } else {\n      // Should we ever hit this code?  We should always have a request queue.\n      return this.getAndCache(key, fullKey, opts?.options);\n    }\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WrappedStore);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy9sb2FkZXJzL3phcnJfdXRpbHMvV3JhcHBlZFN0b3JlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLFlBQVksQ0FBQztFQUNqQkMsV0FBV0EsQ0FBQ0MsU0FBUyxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRTtJQUNuQyxJQUFJLENBQUNGLFNBQVMsR0FBR0EsU0FBUztJQUMxQixJQUFJLENBQUNDLEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUNDLEtBQUssR0FBR0EsS0FBSztFQUNwQjtFQUNBO0VBQ0FDLEdBQUdBLENBQUNDLElBQUksRUFBRUMsTUFBTSxFQUFFO0lBQ2hCLE9BQU9DLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDMUI7RUFDQSxNQUFNQyxXQUFXQSxDQUFDQyxHQUFHLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFO0lBQ3JDLE1BQU1DLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQ1osU0FBUyxDQUFDYSxHQUFHLENBQUNKLEdBQUcsRUFBRUUsSUFBSSxDQUFDO0lBQ2xELElBQUksSUFBSSxDQUFDVixLQUFLLElBQUlXLE1BQU0sRUFBRTtNQUN4QixJQUFJLENBQUNYLEtBQUssQ0FBQ2EsTUFBTSxDQUFDSixRQUFRLEVBQUVFLE1BQU0sQ0FBQztJQUNyQztJQUNBLE9BQU9BLE1BQU07RUFDZjtFQUNBLE1BQU1DLEdBQUdBLENBQUNKLEdBQUcsRUFBRUUsSUFBSSxFQUFFO0lBQ25CLE1BQU1JLFNBQVMsR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQztJQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDZCxLQUFLLElBQUljLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDQyxDQUFDLElBQUlSLEdBQUcsQ0FBQ1MsUUFBUSxDQUFDRCxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ3ZELE9BQU8sSUFBSSxDQUFDakIsU0FBUyxDQUFDYSxHQUFHLENBQUNKLEdBQUcsRUFBRUUsSUFBSSxFQUFFUSxPQUFPLENBQUM7SUFDL0M7SUFDQSxJQUFJUixJQUFJLEVBQUVTLFNBQVMsRUFBRTtNQUNuQlQsSUFBSSxDQUFDUyxTQUFTLENBQUNYLEdBQUcsRUFBRUUsSUFBSSxDQUFDVSxVQUFVLENBQUM7SUFDdEM7SUFDQSxJQUFJQyxTQUFTLEdBQUcsSUFBSSxDQUFDdEIsU0FBUyxDQUFDdUIsR0FBRyxJQUFJLEVBQUU7SUFDeEMsSUFBSUQsU0FBUyxLQUFLLEVBQUUsSUFBSSxFQUFFQSxTQUFTLFlBQVlFLEdBQUcsQ0FBQyxJQUFJLENBQUNGLFNBQVMsQ0FBQ0osUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO01BQy9FSSxTQUFTLElBQUksR0FBRztJQUNsQjtJQUNBLE1BQU1HLE9BQU8sR0FBR0gsU0FBUyxHQUFHYixHQUFHLENBQUNpQixLQUFLLENBQUMsQ0FBQyxDQUFDOztJQUV4QztJQUNBLE1BQU1DLFdBQVcsR0FBRyxJQUFJLENBQUMxQixLQUFLLENBQUNZLEdBQUcsQ0FBQ1ksT0FBTyxDQUFDO0lBQzNDLElBQUlFLFdBQVcsRUFBRTtNQUNmLE9BQU8sSUFBSUMsVUFBVSxDQUFDRCxXQUFXLENBQUM7SUFDcEM7O0lBRUE7SUFDQSxJQUFJLElBQUksQ0FBQ3pCLEtBQUssSUFBSVMsSUFBSSxFQUFFO01BQ3RCLE9BQU8sSUFBSSxDQUFDVCxLQUFLLENBQUMyQixVQUFVLENBQUNKLE9BQU8sRUFBRWQsSUFBSSxDQUFDVSxVQUFVLEVBQUUsTUFBTSxJQUFJLENBQUNiLFdBQVcsQ0FBQ0MsR0FBRyxFQUFFZ0IsT0FBTyxFQUFFZCxJQUFJLEVBQUVRLE9BQU8sQ0FBQyxFQUFFUixJQUFJLENBQUNtQixVQUFVLENBQUM7SUFDOUgsQ0FBQyxNQUFNO01BQ0w7TUFDQSxPQUFPLElBQUksQ0FBQ3RCLFdBQVcsQ0FBQ0MsR0FBRyxFQUFFZ0IsT0FBTyxFQUFFZCxJQUFJLEVBQUVRLE9BQU8sQ0FBQztJQUN0RDtFQUNGO0FBQ0Y7QUFDQSxpRUFBZXJCLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWljcy93ZWItM2Qtdmlld2VyLy4uL3ZvbHVtZS12aWV3ZXIvZXMvbG9hZGVycy96YXJyX3V0aWxzL1dyYXBwZWRTdG9yZS5qcz85YzFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBgUmVhZGFibGVgIGlzIHphcnJpdGEncyBtaW5pbWFsIGFic3RyYWN0aW9uIGZvciBhbnkgc291cmNlIG9mIGRhdGEuXHJcbiAqIGBXcmFwcGVkU3RvcmVgIHdyYXBzIGFub3RoZXIgYFJlYWRhYmxlYCBhbmQgYWRkcyAob3B0aW9uYWwpIGNvbm5lY3Rpb25zIHRvIGBWb2x1bWVDYWNoZWAgYW5kIGBSZXF1ZXN0UXVldWVgLlxyXG4gKi9cbmNsYXNzIFdyYXBwZWRTdG9yZSB7XG4gIGNvbnN0cnVjdG9yKGJhc2VTdG9yZSwgY2FjaGUsIHF1ZXVlKSB7XG4gICAgdGhpcy5iYXNlU3RvcmUgPSBiYXNlU3RvcmU7XG4gICAgdGhpcy5jYWNoZSA9IGNhY2hlO1xuICAgIHRoaXMucXVldWUgPSBxdWV1ZTtcbiAgfVxuICAvLyBEdW1teSBpbXBsZW1lbnRhdGlvbiB0byBtYWtlIHRoaXMgY2xhc3MgZWFzaWVyIHRvIHVzZSBpbiB0ZXN0c1xuICBzZXQoX2tleSwgX3ZhbHVlKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIGFzeW5jIGdldEFuZENhY2hlKGtleSwgY2FjaGVLZXksIG9wdHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmJhc2VTdG9yZS5nZXQoa2V5LCBvcHRzKTtcbiAgICBpZiAodGhpcy5jYWNoZSAmJiByZXN1bHQpIHtcbiAgICAgIHRoaXMuY2FjaGUuaW5zZXJ0KGNhY2hlS2V5LCByZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGFzeW5jIGdldChrZXksIG9wdHMpIHtcbiAgICBjb25zdCBaQVJSX0VYVFMgPSBbXCIuemFycmF5XCIsIFwiLnpncm91cFwiLCBcIi56YXR0cnNcIiwgXCJ6YXJyLmpzb25cIl07XG4gICAgaWYgKCF0aGlzLmNhY2hlIHx8IFpBUlJfRVhUUy5zb21lKHMgPT4ga2V5LmVuZHNXaXRoKHMpKSkge1xuICAgICAgcmV0dXJuIHRoaXMuYmFzZVN0b3JlLmdldChrZXksIG9wdHM/Lm9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAob3B0cz8ucmVwb3J0S2V5KSB7XG4gICAgICBvcHRzLnJlcG9ydEtleShrZXksIG9wdHMuc3Vic2NyaWJlcik7XG4gICAgfVxuICAgIGxldCBrZXlQcmVmaXggPSB0aGlzLmJhc2VTdG9yZS51cmwgPz8gXCJcIjtcbiAgICBpZiAoa2V5UHJlZml4ICE9PSBcIlwiICYmICEoa2V5UHJlZml4IGluc3RhbmNlb2YgVVJMKSAmJiAha2V5UHJlZml4LmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAga2V5UHJlZml4ICs9IFwiL1wiO1xuICAgIH1cbiAgICBjb25zdCBmdWxsS2V5ID0ga2V5UHJlZml4ICsga2V5LnNsaWNlKDEpO1xuXG4gICAgLy8gQ2hlY2sgdGhlIGNhY2hlXG4gICAgY29uc3QgY2FjaGVSZXN1bHQgPSB0aGlzLmNhY2hlLmdldChmdWxsS2V5KTtcbiAgICBpZiAoY2FjaGVSZXN1bHQpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShjYWNoZVJlc3VsdCk7XG4gICAgfVxuXG4gICAgLy8gTm90IGluIGNhY2hlOyBsb2FkIHRoZSBjaHVuayBhbmQgY2FjaGUgaXRcbiAgICBpZiAodGhpcy5xdWV1ZSAmJiBvcHRzKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWV1ZS5hZGRSZXF1ZXN0KGZ1bGxLZXksIG9wdHMuc3Vic2NyaWJlciwgKCkgPT4gdGhpcy5nZXRBbmRDYWNoZShrZXksIGZ1bGxLZXksIG9wdHM/Lm9wdGlvbnMpLCBvcHRzLmlzUHJlZmV0Y2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTaG91bGQgd2UgZXZlciBoaXQgdGhpcyBjb2RlPyAgV2Ugc2hvdWxkIGFsd2F5cyBoYXZlIGEgcmVxdWVzdCBxdWV1ZS5cbiAgICAgIHJldHVybiB0aGlzLmdldEFuZENhY2hlKGtleSwgZnVsbEtleSwgb3B0cz8ub3B0aW9ucyk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBXcmFwcGVkU3RvcmU7Il0sIm5hbWVzIjpbIldyYXBwZWRTdG9yZSIsImNvbnN0cnVjdG9yIiwiYmFzZVN0b3JlIiwiY2FjaGUiLCJxdWV1ZSIsInNldCIsIl9rZXkiLCJfdmFsdWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldEFuZENhY2hlIiwia2V5IiwiY2FjaGVLZXkiLCJvcHRzIiwicmVzdWx0IiwiZ2V0IiwiaW5zZXJ0IiwiWkFSUl9FWFRTIiwic29tZSIsInMiLCJlbmRzV2l0aCIsIm9wdGlvbnMiLCJyZXBvcnRLZXkiLCJzdWJzY3JpYmVyIiwia2V5UHJlZml4IiwidXJsIiwiVVJMIiwiZnVsbEtleSIsInNsaWNlIiwiY2FjaGVSZXN1bHQiLCJVaW50OEFycmF5IiwiYWRkUmVxdWVzdCIsImlzUHJlZmV0Y2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/zarr_utils/WrappedStore.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/zarr_utils/types.js":
/*!*******************************************************!*\
  !*** ../volume-viewer/es/loaders/zarr_utils/types.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrefetchDirection: () => (/* binding */ PrefetchDirection)\n/* harmony export */ });\n/**\r\n * Directions in which to move outward from the loaded set of chunks while prefetching.\r\n *\r\n * Ordered in pairs of opposite directions both because that's a sensible order in which to prefetch for our purposes,\r\n * and because it lets us treat the least significant bit as the sign. So `direction >> 1` gives the index of the\r\n * direction in TZYX-ordered arrays, and `direction & 1` gives the sign of the direction (e.g. positive vs negative Z).\r\n */\nlet PrefetchDirection = /*#__PURE__*/function (PrefetchDirection) {\n  PrefetchDirection[PrefetchDirection[\"T_MINUS\"] = 0] = \"T_MINUS\";\n  PrefetchDirection[PrefetchDirection[\"T_PLUS\"] = 1] = \"T_PLUS\";\n  PrefetchDirection[PrefetchDirection[\"Z_MINUS\"] = 2] = \"Z_MINUS\";\n  PrefetchDirection[PrefetchDirection[\"Z_PLUS\"] = 3] = \"Z_PLUS\";\n  PrefetchDirection[PrefetchDirection[\"Y_MINUS\"] = 4] = \"Y_MINUS\";\n  PrefetchDirection[PrefetchDirection[\"Y_PLUS\"] = 5] = \"Y_PLUS\";\n  PrefetchDirection[PrefetchDirection[\"X_MINUS\"] = 6] = \"X_MINUS\";\n  PrefetchDirection[PrefetchDirection[\"X_PLUS\"] = 7] = \"X_PLUS\";\n  return PrefetchDirection;\n}({});\n\n/** https://ngff.openmicroscopy.org/latest/#multiscale-md */\n\n/** https://ngff.openmicroscopy.org/latest/#omero-md */\n\n/** A record with everything we need to access and use a single remote source of multiscale OME-Zarr data. *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy9sb2FkZXJzL3phcnJfdXRpbHMvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBSUEsaUJBQWlCLEdBQUcsYUFBYSxVQUFVQSxpQkFBaUIsRUFBRTtFQUN2RUEsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVM7RUFDL0RBLGlCQUFpQixDQUFDQSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0VBQzdEQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsU0FBUztFQUMvREEsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7RUFDN0RBLGlCQUFpQixDQUFDQSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxTQUFTO0VBQy9EQSxpQkFBaUIsQ0FBQ0EsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUTtFQUM3REEsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVM7RUFDL0RBLGlCQUFpQixDQUFDQSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0VBQzdELE9BQU9BLGlCQUFpQjtBQUMxQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRUw7O0FBRUE7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWljcy93ZWItM2Qtdmlld2VyLy4uL3ZvbHVtZS12aWV3ZXIvZXMvbG9hZGVycy96YXJyX3V0aWxzL3R5cGVzLmpzPzNkMmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERpcmVjdGlvbnMgaW4gd2hpY2ggdG8gbW92ZSBvdXR3YXJkIGZyb20gdGhlIGxvYWRlZCBzZXQgb2YgY2h1bmtzIHdoaWxlIHByZWZldGNoaW5nLlxyXG4gKlxyXG4gKiBPcmRlcmVkIGluIHBhaXJzIG9mIG9wcG9zaXRlIGRpcmVjdGlvbnMgYm90aCBiZWNhdXNlIHRoYXQncyBhIHNlbnNpYmxlIG9yZGVyIGluIHdoaWNoIHRvIHByZWZldGNoIGZvciBvdXIgcHVycG9zZXMsXHJcbiAqIGFuZCBiZWNhdXNlIGl0IGxldHMgdXMgdHJlYXQgdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdCBhcyB0aGUgc2lnbi4gU28gYGRpcmVjdGlvbiA+PiAxYCBnaXZlcyB0aGUgaW5kZXggb2YgdGhlXHJcbiAqIGRpcmVjdGlvbiBpbiBUWllYLW9yZGVyZWQgYXJyYXlzLCBhbmQgYGRpcmVjdGlvbiAmIDFgIGdpdmVzIHRoZSBzaWduIG9mIHRoZSBkaXJlY3Rpb24gKGUuZy4gcG9zaXRpdmUgdnMgbmVnYXRpdmUgWikuXHJcbiAqL1xuZXhwb3J0IGxldCBQcmVmZXRjaERpcmVjdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoUHJlZmV0Y2hEaXJlY3Rpb24pIHtcbiAgUHJlZmV0Y2hEaXJlY3Rpb25bUHJlZmV0Y2hEaXJlY3Rpb25bXCJUX01JTlVTXCJdID0gMF0gPSBcIlRfTUlOVVNcIjtcbiAgUHJlZmV0Y2hEaXJlY3Rpb25bUHJlZmV0Y2hEaXJlY3Rpb25bXCJUX1BMVVNcIl0gPSAxXSA9IFwiVF9QTFVTXCI7XG4gIFByZWZldGNoRGlyZWN0aW9uW1ByZWZldGNoRGlyZWN0aW9uW1wiWl9NSU5VU1wiXSA9IDJdID0gXCJaX01JTlVTXCI7XG4gIFByZWZldGNoRGlyZWN0aW9uW1ByZWZldGNoRGlyZWN0aW9uW1wiWl9QTFVTXCJdID0gM10gPSBcIlpfUExVU1wiO1xuICBQcmVmZXRjaERpcmVjdGlvbltQcmVmZXRjaERpcmVjdGlvbltcIllfTUlOVVNcIl0gPSA0XSA9IFwiWV9NSU5VU1wiO1xuICBQcmVmZXRjaERpcmVjdGlvbltQcmVmZXRjaERpcmVjdGlvbltcIllfUExVU1wiXSA9IDVdID0gXCJZX1BMVVNcIjtcbiAgUHJlZmV0Y2hEaXJlY3Rpb25bUHJlZmV0Y2hEaXJlY3Rpb25bXCJYX01JTlVTXCJdID0gNl0gPSBcIlhfTUlOVVNcIjtcbiAgUHJlZmV0Y2hEaXJlY3Rpb25bUHJlZmV0Y2hEaXJlY3Rpb25bXCJYX1BMVVNcIl0gPSA3XSA9IFwiWF9QTFVTXCI7XG4gIHJldHVybiBQcmVmZXRjaERpcmVjdGlvbjtcbn0oe30pO1xuXG4vKiogaHR0cHM6Ly9uZ2ZmLm9wZW5taWNyb3Njb3B5Lm9yZy9sYXRlc3QvI211bHRpc2NhbGUtbWQgKi9cblxuLyoqIGh0dHBzOi8vbmdmZi5vcGVubWljcm9zY29weS5vcmcvbGF0ZXN0LyNvbWVyby1tZCAqL1xuXG4vKiogQSByZWNvcmQgd2l0aCBldmVyeXRoaW5nIHdlIG5lZWQgdG8gYWNjZXNzIGFuZCB1c2UgYSBzaW5nbGUgcmVtb3RlIHNvdXJjZSBvZiBtdWx0aXNjYWxlIE9NRS1aYXJyIGRhdGEuICovIl0sIm5hbWVzIjpbIlByZWZldGNoRGlyZWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/zarr_utils/types.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/zarr_utils/utils.js":
/*!*******************************************************!*\
  !*** ../volume-viewer/es/loaders/zarr_utils/utils.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDimensionCount: () => (/* binding */ getDimensionCount),\n/* harmony export */   getScale: () => (/* binding */ getScale),\n/* harmony export */   getSourceChannelNames: () => (/* binding */ getSourceChannelNames),\n/* harmony export */   matchSourceScaleLevels: () => (/* binding */ matchSourceScaleLevels),\n/* harmony export */   orderByDimension: () => (/* binding */ orderByDimension),\n/* harmony export */   orderByTCZYX: () => (/* binding */ orderByTCZYX),\n/* harmony export */   remapAxesToTCZYX: () => (/* binding */ remapAxesToTCZYX)\n/* harmony export */ });\n/* harmony import */ var _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../VolumeLoadError.js */ \"../volume-viewer/es/loaders/VolumeLoadError.js\");\n\n/** Extracts channel names from a `ZarrSource`. Handles missing `omeroMetadata`. Does *not* resolve name collisions. */\nfunction getSourceChannelNames(src) {\n  if (src.omeroMetadata?.channels) {\n    return src.omeroMetadata.channels.map(({\n      label\n    }, idx) => label ?? `Channel ${idx + src.channelOffset}`);\n  }\n  const length = src.scaleLevels[0].shape[src.axesTCZYX[1]];\n  return Array.from({\n    length\n  }, (_, idx) => `Channel ${idx + src.channelOffset}`);\n}\n\n/** Turns `axesTCZYX` into the number of dimensions in the array */\nconst getDimensionCount = ([t, c, z]) => 2 + Number(t > -1) + Number(c > -1) + Number(z > -1);\nfunction remapAxesToTCZYX(axes) {\n  const axesTCZYX = [-1, -1, -1, -1, -1];\n  const axisNames = [\"t\", \"c\", \"z\", \"y\", \"x\"];\n  axes.forEach((axis, idx) => {\n    const axisIdx = axisNames.indexOf(axis.name);\n    if (axisIdx > -1) {\n      axesTCZYX[axisIdx] = idx;\n    } else {\n      throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadError(`Unrecognized axis in zarr: ${axis.name}`, {\n        type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadErrorType.INVALID_METADATA\n      });\n    }\n  });\n\n  // it is possible that Z might not exist but we require X and Y at least.\n  const noXAxis = axesTCZYX[4] === -1;\n  if (noXAxis || axesTCZYX[3] === -1) {\n    throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadError(`Did not find ${noXAxis ? \"an X\" : \"a Y\"} axis in zarr`, {\n      type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadErrorType.INVALID_METADATA\n    });\n  }\n  return axesTCZYX;\n}\n\n/** Reorder an array of values [T, C, Z, Y, X] to the given dimension order */\nfunction orderByDimension(valsTCZYX, orderTCZYX) {\n  const specLen = getDimensionCount(orderTCZYX);\n  const result = Array(specLen);\n  orderTCZYX.forEach((val, idx) => {\n    if (val >= 0) {\n      if (val >= specLen) {\n        throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadError(`Unexpected axis index in zarr: ${val}`, {\n          type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadErrorType.INVALID_METADATA\n        });\n      }\n      result[val] = valsTCZYX[idx];\n    }\n  });\n  return result;\n}\n\n/** Reorder an array of values in the given dimension order to [T, C, Z, Y, X] */\nfunction orderByTCZYX(valsDimension, orderTCZYX, defaultValue) {\n  const result = [defaultValue, defaultValue, defaultValue, defaultValue, defaultValue];\n  orderTCZYX.forEach((val, idx) => {\n    if (val >= 0) {\n      if (val >= valsDimension.length) {\n        throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadError(`Unexpected axis index in zarr: ${val}`, {\n          type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadErrorType.INVALID_METADATA\n        });\n      }\n      result[idx] = valsDimension[val];\n    }\n  });\n  return result;\n}\n\n/** Select the scale transform from an OME metadata object with coordinate transforms, and return it in TCZYX order */\nfunction getScale(dataset, orderTCZYX) {\n  const transforms = dataset.coordinateTransformations;\n  if (transforms === undefined) {\n    console.warn(\"WARNING: OMEZarrLoader: no coordinate transformations for scale level.\");\n    return [1, 1, 1, 1, 1];\n  }\n\n  // this assumes we'll never encounter the \"path\" variant\n  const isScaleTransform = t => t.type === \"scale\";\n\n  // there can be any number of coordinateTransformations\n  // but there must be only one of type \"scale\".\n  const scaleTransform = transforms.find(isScaleTransform);\n  if (!scaleTransform) {\n    console.warn(`WARNING: OMEZarrLoader: no coordinate transformation of type \"scale\" for scale level.`);\n    return [1, 1, 1, 1, 1];\n  }\n  const scale = scaleTransform.scale.slice();\n  return orderByTCZYX(scale, orderTCZYX, 1);\n}\n\n/**\r\n * Defines a partial order of zarr arrays based on their size. Specifically:\r\n * - If array size x, y, z are all equal, the arrays are equal\r\n * - otherwise, if all xyz of `a` are less than or equal to those of `b`, `a` is less than `b` (and vice versa)\r\n * - if some xyz is less and some is greater, the arrays are uncomparable\r\n */\nfunction compareZarrArraySize(aArr, aTCZYX, bArr, bTCZYX) {\n  const aZ = aTCZYX[2] > -1 ? aArr.shape[aTCZYX[2]] : 1;\n  const bZ = bTCZYX[2] > -1 ? bArr.shape[bTCZYX[2]] : 1;\n  const diffZ = aZ - bZ;\n  const diffY = aArr.shape[aTCZYX[3]] - bArr.shape[bTCZYX[3]];\n  const diffX = aArr.shape[aTCZYX[4]] - bArr.shape[bTCZYX[4]];\n  if (diffZ === 0 && diffY === 0 && diffX === 0) {\n    return 0;\n  } else if (diffZ <= 0 && diffY <= 0 && diffX <= 0) {\n    return -1;\n  } else if (diffZ >= 0 && diffY >= 0 && diffX >= 0) {\n    return 1;\n  } else {\n    return undefined;\n  }\n}\nconst EPSILON = 0.00001;\nconst aboutEquals = (a, b) => Math.abs(a - b) < EPSILON;\nfunction scaleTransformsAreEqual(aSrc, aLevel, bSrc, bLevel) {\n  const aScale = getScale(aSrc.multiscaleMetadata.datasets[aLevel], aSrc.axesTCZYX);\n  const bScale = getScale(bSrc.multiscaleMetadata.datasets[bLevel], bSrc.axesTCZYX);\n  return aboutEquals(aScale[2], bScale[2]) && aboutEquals(aScale[3], bScale[3]) && aboutEquals(aScale[4], bScale[4]);\n}\n\n/**\r\n * Ensures that all scale levels in `sources` are matched up by size. More precisely: enforces that, for any scale\r\n * level `i`, the size of zarr array `s[i]` is equal for every source `s`. We accomplish this by removing any arrays\r\n * (and their associated OME dataset metadata) which don't match up in all sources.\r\n *\r\n * Note that this function modifies the input `sources` array rather than returning a new value.\r\n *\r\n * Assumes all sources have scale levels ordered by size from largest to smallest. (This should always be true for\r\n * compliant OME-Zarr data.)\r\n */\nfunction matchSourceScaleLevels(sources) {\n  if (sources.length < 2) {\n    return;\n  }\n\n  // Save matching scale levels and metadata here\n  const matchedLevels = Array.from({\n    length: sources.length\n  }, () => []);\n  const matchedMetas = Array.from({\n    length: sources.length\n  }, () => []);\n\n  // Start as many index counters as we have sources\n  const scaleIndexes = new Array(sources.length).fill(0);\n  while (scaleIndexes.every((val, idx) => val < sources[idx].scaleLevels.length)) {\n    // First pass: find the smallest source / determine if all sources are equal\n    let allEqual = true;\n    let smallestIdx = 0;\n    let smallestSrc = sources[0];\n    let smallestArr = smallestSrc.scaleLevels[scaleIndexes[0]];\n    for (let currentIdx = 1; currentIdx < sources.length; currentIdx++) {\n      const currentSrc = sources[currentIdx];\n      const currentArr = currentSrc.scaleLevels[scaleIndexes[currentIdx]];\n      const ordering = compareZarrArraySize(smallestArr, smallestSrc.axesTCZYX, currentArr, currentSrc.axesTCZYX);\n      if (!ordering) {\n        // Arrays are equal, or they are uncomparable\n        if (ordering === undefined) {\n          throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadError(\"Incompatible zarr arrays: pixel dimensions are mismatched\", {\n            type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadErrorType.INVALID_MULTI_SOURCE_ZARR\n          });\n        }\n\n        // Now we know the arrays are equal, but they may still be invalid to match up because...\n        // ...they have different scale transformations\n        if (!scaleTransformsAreEqual(smallestSrc, scaleIndexes[smallestIdx], currentSrc, scaleIndexes[currentIdx])) {\n          // today we are going to treat this as a warning.\n          // For our implementation it is enough that the xyz pixel ranges are the same.\n          // Ideally scale*arraysize=physical size is really the quantity that should be equal, for combining two volume data sets as channels.\n          console.warn(\"Incompatible zarr arrays: scale levels of equal size have different scale transformations\");\n        }\n\n        // ...they have different numbers of timesteps\n        const largestT = smallestSrc.axesTCZYX[0] > -1 ? smallestArr.shape[smallestSrc.axesTCZYX[0]] : 1;\n        const currentT = currentSrc.axesTCZYX[0] > -1 ? currentArr.shape[currentSrc.axesTCZYX[0]] : 1;\n        if (largestT !== currentT) {\n          // we also treat this as a warning.\n          // In OmeZarrLoader we will take the minimum T size of all sources\n          console.warn(`Incompatible zarr arrays: different numbers of timesteps: ${largestT} vs ${currentT}`);\n        }\n      } else {\n        allEqual = false;\n        if (ordering > 0) {\n          smallestIdx = currentIdx;\n          smallestSrc = currentSrc;\n          smallestArr = currentArr;\n        }\n      }\n    }\n    if (allEqual) {\n      // We've found a matching set of scale levels! Save it and increment all indexes\n      for (let i = 0; i < scaleIndexes.length; i++) {\n        const currentSrc = sources[i];\n        const matchedScaleLevel = scaleIndexes[i];\n        matchedLevels[i].push(currentSrc.scaleLevels[matchedScaleLevel]);\n        matchedMetas[i].push(currentSrc.multiscaleMetadata.datasets[matchedScaleLevel]);\n        scaleIndexes[i] += 1;\n      }\n    } else {\n      // Increment the indexes of the sources which are larger than the smallest\n      for (const [idx, srcIdx] of scaleIndexes.entries()) {\n        const currentSrc = sources[idx];\n        const currentArr = currentSrc.scaleLevels[srcIdx];\n        const ordering = compareZarrArraySize(smallestArr, smallestSrc.axesTCZYX, currentArr, currentSrc.axesTCZYX);\n        if (ordering !== 0) {\n          scaleIndexes[idx] += 1;\n        }\n      }\n    }\n  }\n  if (sources[0].scaleLevels.length === 0) {\n    throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadError(\"Incompatible zarr arrays: no sets of scale levels found that matched in all sources\", {\n      type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadErrorType.INVALID_MULTI_SOURCE_ZARR\n    });\n  }\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].scaleLevels = matchedLevels[i];\n    sources[i].multiscaleMetadata.datasets = matchedMetas[i];\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/zarr_utils/utils.js\n");

/***/ }),

/***/ "../volume-viewer/es/loaders/zarr_utils/validation.js":
/*!************************************************************!*\
  !*** ../volume-viewer/es/loaders/zarr_utils/validation.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateOMEZarrMetadata: () => (/* binding */ validateOMEZarrMetadata)\n/* harmony export */ });\n/* harmony import */ var _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../VolumeLoadError.js */ \"../volume-viewer/es/loaders/VolumeLoadError.js\");\n\nfunction isObjectWithProp(obj, prop) {\n  return typeof obj === \"object\" && obj !== null && prop in obj;\n}\nfunction assertMetadataHasProp(obj, prop, name = \"zarr\") {\n  if (!isObjectWithProp(obj, prop)) {\n    throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadError(`${name} metadata is missing required entry \"${prop}\"`, {\n      type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadErrorType.INVALID_METADATA\n    });\n  }\n}\nfunction assertPropIsArray(obj, prop, name = \"zarr\") {\n  if (!Array.isArray(obj[prop])) {\n    throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadError(`${name} metadata entry \"${prop}\" is not an array`, {\n      type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadErrorType.INVALID_METADATA\n    });\n  }\n}\n\n/**\r\n * Validates that the `OMEZarrMetadata` record `data` has the minimal amount of data required to open a volume. Since\r\n * we only ever open one multiscale, we only validate the multiscale metadata record at index `multiscaleIdx` here.\r\n * `name` is used in error messages to identify the source of the metadata.\r\n */\nfunction validateOMEZarrMetadata(data, multiscaleIdx = 0, name = \"zarr\") {\n  // data is an object with a key \"multiscales\", which is an array\n  assertMetadataHasProp(data, \"multiscales\", name);\n  assertPropIsArray(data, \"multiscales\", name);\n\n  // check that a multiscale metadata entry exists at `multiscaleIdx`\n  const multiscaleMeta = data.multiscales[multiscaleIdx];\n  if (!multiscaleMeta) {\n    throw new _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadError(`${name} metadata does not have requested multiscale level ${multiscaleIdx}`, {\n      type: _VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_0__.VolumeLoadErrorType.INVALID_METADATA\n    });\n  }\n  const multiscaleMetaName = isObjectWithProp(multiscaleMeta, \"name\") ? ` (\"${multiscaleMeta.name})` : \"\";\n  const multiscaleName = `${name} multiscale ${multiscaleIdx}${multiscaleMetaName}`;\n\n  // multiscale has a key \"axes\", which is an array. Each axis has a \"name\".\n  assertMetadataHasProp(multiscaleMeta, \"axes\", multiscaleName);\n  assertPropIsArray(multiscaleMeta, \"axes\", multiscaleName);\n  multiscaleMeta.axes.forEach((axis, i) => assertMetadataHasProp(axis, \"name\", `${multiscaleName} axis ${i}`));\n\n  // multiscale has a key \"datasets\", which is an array. Each dataset has a \"path\".\n  assertMetadataHasProp(multiscaleMeta, \"datasets\", name);\n  assertPropIsArray(multiscaleMeta, \"datasets\", name);\n  multiscaleMeta.datasets.forEach((data, i) => assertMetadataHasProp(data, \"path\", `${multiscaleName} dataset ${i}`));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy9sb2FkZXJzL3phcnJfdXRpbHMvdmFsaWRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2RTtBQUM3RSxTQUFTRSxnQkFBZ0JBLENBQUNDLEdBQUcsRUFBRUMsSUFBSSxFQUFFO0VBQ25DLE9BQU8sT0FBT0QsR0FBRyxLQUFLLFFBQVEsSUFBSUEsR0FBRyxLQUFLLElBQUksSUFBSUMsSUFBSSxJQUFJRCxHQUFHO0FBQy9EO0FBQ0EsU0FBU0UscUJBQXFCQSxDQUFDRixHQUFHLEVBQUVDLElBQUksRUFBRUUsSUFBSSxHQUFHLE1BQU0sRUFBRTtFQUN2RCxJQUFJLENBQUNKLGdCQUFnQixDQUFDQyxHQUFHLEVBQUVDLElBQUksQ0FBQyxFQUFFO0lBQ2hDLE1BQU0sSUFBSUosZ0VBQWUsQ0FBRSxHQUFFTSxJQUFLLHdDQUF1Q0YsSUFBSyxHQUFFLEVBQUU7TUFDaEZHLElBQUksRUFBRU4sb0VBQW1CLENBQUNPO0lBQzVCLENBQUMsQ0FBQztFQUNKO0FBQ0Y7QUFDQSxTQUFTQyxpQkFBaUJBLENBQUNOLEdBQUcsRUFBRUMsSUFBSSxFQUFFRSxJQUFJLEdBQUcsTUFBTSxFQUFFO0VBQ25ELElBQUksQ0FBQ0ksS0FBSyxDQUFDQyxPQUFPLENBQUNSLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRTtJQUM3QixNQUFNLElBQUlKLGdFQUFlLENBQUUsR0FBRU0sSUFBSyxvQkFBbUJGLElBQUssbUJBQWtCLEVBQUU7TUFDNUVHLElBQUksRUFBRU4sb0VBQW1CLENBQUNPO0lBQzVCLENBQUMsQ0FBQztFQUNKO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNJLHVCQUF1QkEsQ0FBQ0MsSUFBSSxFQUFFQyxhQUFhLEdBQUcsQ0FBQyxFQUFFUixJQUFJLEdBQUcsTUFBTSxFQUFFO0VBQzlFO0VBQ0FELHFCQUFxQixDQUFDUSxJQUFJLEVBQUUsYUFBYSxFQUFFUCxJQUFJLENBQUM7RUFDaERHLGlCQUFpQixDQUFDSSxJQUFJLEVBQUUsYUFBYSxFQUFFUCxJQUFJLENBQUM7O0VBRTVDO0VBQ0EsTUFBTVMsY0FBYyxHQUFHRixJQUFJLENBQUNHLFdBQVcsQ0FBQ0YsYUFBYSxDQUFDO0VBQ3RELElBQUksQ0FBQ0MsY0FBYyxFQUFFO0lBQ25CLE1BQU0sSUFBSWYsZ0VBQWUsQ0FBRSxHQUFFTSxJQUFLLHNEQUFxRFEsYUFBYyxFQUFDLEVBQUU7TUFDdEdQLElBQUksRUFBRU4sb0VBQW1CLENBQUNPO0lBQzVCLENBQUMsQ0FBQztFQUNKO0VBQ0EsTUFBTVMsa0JBQWtCLEdBQUdmLGdCQUFnQixDQUFDYSxjQUFjLEVBQUUsTUFBTSxDQUFDLEdBQUksTUFBS0EsY0FBYyxDQUFDVCxJQUFLLEdBQUUsR0FBRyxFQUFFO0VBQ3ZHLE1BQU1ZLGNBQWMsR0FBSSxHQUFFWixJQUFLLGVBQWNRLGFBQWMsR0FBRUcsa0JBQW1CLEVBQUM7O0VBRWpGO0VBQ0FaLHFCQUFxQixDQUFDVSxjQUFjLEVBQUUsTUFBTSxFQUFFRyxjQUFjLENBQUM7RUFDN0RULGlCQUFpQixDQUFDTSxjQUFjLEVBQUUsTUFBTSxFQUFFRyxjQUFjLENBQUM7RUFDekRILGNBQWMsQ0FBQ0ksSUFBSSxDQUFDQyxPQUFPLENBQUMsQ0FBQ0MsSUFBSSxFQUFFQyxDQUFDLEtBQUtqQixxQkFBcUIsQ0FBQ2dCLElBQUksRUFBRSxNQUFNLEVBQUcsR0FBRUgsY0FBZSxTQUFRSSxDQUFFLEVBQUMsQ0FBQyxDQUFDOztFQUU1RztFQUNBakIscUJBQXFCLENBQUNVLGNBQWMsRUFBRSxVQUFVLEVBQUVULElBQUksQ0FBQztFQUN2REcsaUJBQWlCLENBQUNNLGNBQWMsRUFBRSxVQUFVLEVBQUVULElBQUksQ0FBQztFQUNuRFMsY0FBYyxDQUFDUSxRQUFRLENBQUNILE9BQU8sQ0FBQyxDQUFDUCxJQUFJLEVBQUVTLENBQUMsS0FBS2pCLHFCQUFxQixDQUFDUSxJQUFJLEVBQUUsTUFBTSxFQUFHLEdBQUVLLGNBQWUsWUFBV0ksQ0FBRSxFQUFDLENBQUMsQ0FBQztBQUNySCIsInNvdXJjZXMiOlsid2VicGFjazovL0BhaWNzL3dlYi0zZC12aWV3ZXIvLi4vdm9sdW1lLXZpZXdlci9lcy9sb2FkZXJzL3phcnJfdXRpbHMvdmFsaWRhdGlvbi5qcz9iOGFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZvbHVtZUxvYWRFcnJvciwgVm9sdW1lTG9hZEVycm9yVHlwZSB9IGZyb20gXCIuLi9Wb2x1bWVMb2FkRXJyb3IuanNcIjtcbmZ1bmN0aW9uIGlzT2JqZWN0V2l0aFByb3Aob2JqLCBwcm9wKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiICYmIG9iaiAhPT0gbnVsbCAmJiBwcm9wIGluIG9iajtcbn1cbmZ1bmN0aW9uIGFzc2VydE1ldGFkYXRhSGFzUHJvcChvYmosIHByb3AsIG5hbWUgPSBcInphcnJcIikge1xuICBpZiAoIWlzT2JqZWN0V2l0aFByb3Aob2JqLCBwcm9wKSkge1xuICAgIHRocm93IG5ldyBWb2x1bWVMb2FkRXJyb3IoYCR7bmFtZX0gbWV0YWRhdGEgaXMgbWlzc2luZyByZXF1aXJlZCBlbnRyeSBcIiR7cHJvcH1cImAsIHtcbiAgICAgIHR5cGU6IFZvbHVtZUxvYWRFcnJvclR5cGUuSU5WQUxJRF9NRVRBREFUQVxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBhc3NlcnRQcm9wSXNBcnJheShvYmosIHByb3AsIG5hbWUgPSBcInphcnJcIikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkob2JqW3Byb3BdKSkge1xuICAgIHRocm93IG5ldyBWb2x1bWVMb2FkRXJyb3IoYCR7bmFtZX0gbWV0YWRhdGEgZW50cnkgXCIke3Byb3B9XCIgaXMgbm90IGFuIGFycmF5YCwge1xuICAgICAgdHlwZTogVm9sdW1lTG9hZEVycm9yVHlwZS5JTlZBTElEX01FVEFEQVRBXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXHJcbiAqIFZhbGlkYXRlcyB0aGF0IHRoZSBgT01FWmFyck1ldGFkYXRhYCByZWNvcmQgYGRhdGFgIGhhcyB0aGUgbWluaW1hbCBhbW91bnQgb2YgZGF0YSByZXF1aXJlZCB0byBvcGVuIGEgdm9sdW1lLiBTaW5jZVxyXG4gKiB3ZSBvbmx5IGV2ZXIgb3BlbiBvbmUgbXVsdGlzY2FsZSwgd2Ugb25seSB2YWxpZGF0ZSB0aGUgbXVsdGlzY2FsZSBtZXRhZGF0YSByZWNvcmQgYXQgaW5kZXggYG11bHRpc2NhbGVJZHhgIGhlcmUuXHJcbiAqIGBuYW1lYCBpcyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzIHRvIGlkZW50aWZ5IHRoZSBzb3VyY2Ugb2YgdGhlIG1ldGFkYXRhLlxyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU9NRVphcnJNZXRhZGF0YShkYXRhLCBtdWx0aXNjYWxlSWR4ID0gMCwgbmFtZSA9IFwiemFyclwiKSB7XG4gIC8vIGRhdGEgaXMgYW4gb2JqZWN0IHdpdGggYSBrZXkgXCJtdWx0aXNjYWxlc1wiLCB3aGljaCBpcyBhbiBhcnJheVxuICBhc3NlcnRNZXRhZGF0YUhhc1Byb3AoZGF0YSwgXCJtdWx0aXNjYWxlc1wiLCBuYW1lKTtcbiAgYXNzZXJ0UHJvcElzQXJyYXkoZGF0YSwgXCJtdWx0aXNjYWxlc1wiLCBuYW1lKTtcblxuICAvLyBjaGVjayB0aGF0IGEgbXVsdGlzY2FsZSBtZXRhZGF0YSBlbnRyeSBleGlzdHMgYXQgYG11bHRpc2NhbGVJZHhgXG4gIGNvbnN0IG11bHRpc2NhbGVNZXRhID0gZGF0YS5tdWx0aXNjYWxlc1ttdWx0aXNjYWxlSWR4XTtcbiAgaWYgKCFtdWx0aXNjYWxlTWV0YSkge1xuICAgIHRocm93IG5ldyBWb2x1bWVMb2FkRXJyb3IoYCR7bmFtZX0gbWV0YWRhdGEgZG9lcyBub3QgaGF2ZSByZXF1ZXN0ZWQgbXVsdGlzY2FsZSBsZXZlbCAke211bHRpc2NhbGVJZHh9YCwge1xuICAgICAgdHlwZTogVm9sdW1lTG9hZEVycm9yVHlwZS5JTlZBTElEX01FVEFEQVRBXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgbXVsdGlzY2FsZU1ldGFOYW1lID0gaXNPYmplY3RXaXRoUHJvcChtdWx0aXNjYWxlTWV0YSwgXCJuYW1lXCIpID8gYCAoXCIke211bHRpc2NhbGVNZXRhLm5hbWV9KWAgOiBcIlwiO1xuICBjb25zdCBtdWx0aXNjYWxlTmFtZSA9IGAke25hbWV9IG11bHRpc2NhbGUgJHttdWx0aXNjYWxlSWR4fSR7bXVsdGlzY2FsZU1ldGFOYW1lfWA7XG5cbiAgLy8gbXVsdGlzY2FsZSBoYXMgYSBrZXkgXCJheGVzXCIsIHdoaWNoIGlzIGFuIGFycmF5LiBFYWNoIGF4aXMgaGFzIGEgXCJuYW1lXCIuXG4gIGFzc2VydE1ldGFkYXRhSGFzUHJvcChtdWx0aXNjYWxlTWV0YSwgXCJheGVzXCIsIG11bHRpc2NhbGVOYW1lKTtcbiAgYXNzZXJ0UHJvcElzQXJyYXkobXVsdGlzY2FsZU1ldGEsIFwiYXhlc1wiLCBtdWx0aXNjYWxlTmFtZSk7XG4gIG11bHRpc2NhbGVNZXRhLmF4ZXMuZm9yRWFjaCgoYXhpcywgaSkgPT4gYXNzZXJ0TWV0YWRhdGFIYXNQcm9wKGF4aXMsIFwibmFtZVwiLCBgJHttdWx0aXNjYWxlTmFtZX0gYXhpcyAke2l9YCkpO1xuXG4gIC8vIG11bHRpc2NhbGUgaGFzIGEga2V5IFwiZGF0YXNldHNcIiwgd2hpY2ggaXMgYW4gYXJyYXkuIEVhY2ggZGF0YXNldCBoYXMgYSBcInBhdGhcIi5cbiAgYXNzZXJ0TWV0YWRhdGFIYXNQcm9wKG11bHRpc2NhbGVNZXRhLCBcImRhdGFzZXRzXCIsIG5hbWUpO1xuICBhc3NlcnRQcm9wSXNBcnJheShtdWx0aXNjYWxlTWV0YSwgXCJkYXRhc2V0c1wiLCBuYW1lKTtcbiAgbXVsdGlzY2FsZU1ldGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YSwgaSkgPT4gYXNzZXJ0TWV0YWRhdGFIYXNQcm9wKGRhdGEsIFwicGF0aFwiLCBgJHttdWx0aXNjYWxlTmFtZX0gZGF0YXNldCAke2l9YCkpO1xufSJdLCJuYW1lcyI6WyJWb2x1bWVMb2FkRXJyb3IiLCJWb2x1bWVMb2FkRXJyb3JUeXBlIiwiaXNPYmplY3RXaXRoUHJvcCIsIm9iaiIsInByb3AiLCJhc3NlcnRNZXRhZGF0YUhhc1Byb3AiLCJuYW1lIiwidHlwZSIsIklOVkFMSURfTUVUQURBVEEiLCJhc3NlcnRQcm9wSXNBcnJheSIsIkFycmF5IiwiaXNBcnJheSIsInZhbGlkYXRlT01FWmFyck1ldGFkYXRhIiwiZGF0YSIsIm11bHRpc2NhbGVJZHgiLCJtdWx0aXNjYWxlTWV0YSIsIm11bHRpc2NhbGVzIiwibXVsdGlzY2FsZU1ldGFOYW1lIiwibXVsdGlzY2FsZU5hbWUiLCJheGVzIiwiZm9yRWFjaCIsImF4aXMiLCJpIiwiZGF0YXNldHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../volume-viewer/es/loaders/zarr_utils/validation.js\n");

/***/ }),

/***/ "../volume-viewer/es/types.js":
/*!************************************!*\
  !*** ../volume-viewer/es/types.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATARANGE_UINT8: () => (/* binding */ DATARANGE_UINT8),\n/* harmony export */   FUSE_DISABLED_RGB_COLOR: () => (/* binding */ FUSE_DISABLED_RGB_COLOR),\n/* harmony export */   RenderMode: () => (/* binding */ RenderMode),\n/* harmony export */   ViewportCorner: () => (/* binding */ ViewportCorner),\n/* harmony export */   isOrthographicCamera: () => (/* binding */ isOrthographicCamera),\n/* harmony export */   isRight: () => (/* binding */ isRight),\n/* harmony export */   isTop: () => (/* binding */ isTop)\n/* harmony export */ });\n/** If `FuseChannel.rgbColor` is this value, it is disabled from fusion. */\nconst FUSE_DISABLED_RGB_COLOR = 0;\n\n/**\r\n * Provide options to control the visual appearance of a Volume\r\n * @typedef {Object} VolumeChannelDisplayOptions\r\n * @property {boolean} enabled array of boolean per channel\r\n * @property {Array.<number>} color array of rgb per channel\r\n * @property {Array.<number>} specularColor array of rgb per channel\r\n * @property {Array.<number>} emissiveColor array of rgb per channel\r\n * @property {number} glossiness array of float per channel\r\n * @property {boolean} isosurfaceEnabled array of boolean per channel\r\n * @property {number} isovalue array of number per channel\r\n * @property {number} isosurfaceOpacity array of number per channel\r\n * @example let options = {\r\n   };\r\n */\n\nlet RenderMode = /*#__PURE__*/function (RenderMode) {\n  RenderMode[RenderMode[\"RAYMARCH\"] = 0] = \"RAYMARCH\";\n  RenderMode[RenderMode[\"PATHTRACE\"] = 1] = \"PATHTRACE\";\n  RenderMode[RenderMode[\"SLICE\"] = 2] = \"SLICE\";\n  return RenderMode;\n}({});\n\n/**\r\n * Provide options to control the visual appearance of a Volume\r\n * @typedef {Object} VolumeDisplayOptions\r\n * @property {Array.<VolumeChannelDisplayOptions>} channels array of channel display options\r\n * @property {number} density\r\n * @property {Array.<number>} translation xyz\r\n * @property {Array.<number>} rotation xyz angles in radians\r\n * @property {number} maskChannelIndex\r\n * @property {number} maskAlpha\r\n * @property {Array.<number>} clipBounds [xmin, xmax, ymin, ymax, zmin, zmax] all range from 0 to 1 as a percentage of the volume on that axis\r\n * @property {Array.<number>} scale xyz voxel size scaling\r\n * @property {boolean} maxProjection true or false (ray marching)\r\n * @property {number} renderMode 0 for raymarch, 1 for pathtrace\r\n * @property {number} shadingMethod 0 for phase, 1 for brdf, 2 for hybrid (path tracer)\r\n * @property {Array.<number>} gamma [min, max, scale]\r\n * @property {number} primaryRayStepSize in voxels\r\n * @property {number} secondaryRayStepSize in voxels\r\n * @property {boolean} showBoundingBox true or false\r\n * @property {Array.<number>} boundingBoxColor r,g,b for bounding box lines\r\n * @example let options = {\r\n   };\r\n */\n\nconst isOrthographicCamera = def => def && def.isOrthographicCamera;\nlet ViewportCorner = /*#__PURE__*/function (ViewportCorner) {\n  ViewportCorner[\"TOP_LEFT\"] = \"top_left\";\n  ViewportCorner[\"TOP_RIGHT\"] = \"top_right\";\n  ViewportCorner[\"BOTTOM_LEFT\"] = \"bottom_left\";\n  ViewportCorner[\"BOTTOM_RIGHT\"] = \"bottom_right\";\n  return ViewportCorner;\n}({});\nconst isTop = corner => corner === ViewportCorner.TOP_LEFT || corner === ViewportCorner.TOP_RIGHT;\nconst isRight = corner => corner === ViewportCorner.TOP_RIGHT || corner === ViewportCorner.BOTTOM_RIGHT;\nconst DATARANGE_UINT8 = [0, 255];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDTyxNQUFNQSx1QkFBdUIsR0FBRyxDQUFDOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPLElBQUlDLFVBQVUsR0FBRyxhQUFhLFVBQVVBLFVBQVUsRUFBRTtFQUN6REEsVUFBVSxDQUFDQSxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsVUFBVTtFQUNuREEsVUFBVSxDQUFDQSxVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsV0FBVztFQUNyREEsVUFBVSxDQUFDQSxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTztFQUM3QyxPQUFPQSxVQUFVO0FBQ25CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTyxNQUFNQyxvQkFBb0IsR0FBR0MsR0FBRyxJQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0Qsb0JBQW9CO0FBQ25FLElBQUlFLGNBQWMsR0FBRyxhQUFhLFVBQVVBLGNBQWMsRUFBRTtFQUNqRUEsY0FBYyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVU7RUFDdkNBLGNBQWMsQ0FBQyxXQUFXLENBQUMsR0FBRyxXQUFXO0VBQ3pDQSxjQUFjLENBQUMsYUFBYSxDQUFDLEdBQUcsYUFBYTtFQUM3Q0EsY0FBYyxDQUFDLGNBQWMsQ0FBQyxHQUFHLGNBQWM7RUFDL0MsT0FBT0EsY0FBYztBQUN2QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDRSxNQUFNQyxLQUFLLEdBQUdDLE1BQU0sSUFBSUEsTUFBTSxLQUFLRixjQUFjLENBQUNHLFFBQVEsSUFBSUQsTUFBTSxLQUFLRixjQUFjLENBQUNJLFNBQVM7QUFDakcsTUFBTUMsT0FBTyxHQUFHSCxNQUFNLElBQUlBLE1BQU0sS0FBS0YsY0FBYyxDQUFDSSxTQUFTLElBQUlGLE1BQU0sS0FBS0YsY0FBYyxDQUFDTSxZQUFZO0FBQ3ZHLE1BQU1DLGVBQWUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWljcy93ZWItM2Qtdmlld2VyLy4uL3ZvbHVtZS12aWV3ZXIvZXMvdHlwZXMuanM/NDE1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogSWYgYEZ1c2VDaGFubmVsLnJnYkNvbG9yYCBpcyB0aGlzIHZhbHVlLCBpdCBpcyBkaXNhYmxlZCBmcm9tIGZ1c2lvbi4gKi9cbmV4cG9ydCBjb25zdCBGVVNFX0RJU0FCTEVEX1JHQl9DT0xPUiA9IDA7XG5cbi8qKlxyXG4gKiBQcm92aWRlIG9wdGlvbnMgdG8gY29udHJvbCB0aGUgdmlzdWFsIGFwcGVhcmFuY2Ugb2YgYSBWb2x1bWVcclxuICogQHR5cGVkZWYge09iamVjdH0gVm9sdW1lQ2hhbm5lbERpc3BsYXlPcHRpb25zXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZW5hYmxlZCBhcnJheSBvZiBib29sZWFuIHBlciBjaGFubmVsXHJcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcj59IGNvbG9yIGFycmF5IG9mIHJnYiBwZXIgY2hhbm5lbFxyXG4gKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXI+fSBzcGVjdWxhckNvbG9yIGFycmF5IG9mIHJnYiBwZXIgY2hhbm5lbFxyXG4gKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXI+fSBlbWlzc2l2ZUNvbG9yIGFycmF5IG9mIHJnYiBwZXIgY2hhbm5lbFxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gZ2xvc3NpbmVzcyBhcnJheSBvZiBmbG9hdCBwZXIgY2hhbm5lbFxyXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzb3N1cmZhY2VFbmFibGVkIGFycmF5IG9mIGJvb2xlYW4gcGVyIGNoYW5uZWxcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGlzb3ZhbHVlIGFycmF5IG9mIG51bWJlciBwZXIgY2hhbm5lbFxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gaXNvc3VyZmFjZU9wYWNpdHkgYXJyYXkgb2YgbnVtYmVyIHBlciBjaGFubmVsXHJcbiAqIEBleGFtcGxlIGxldCBvcHRpb25zID0ge1xyXG4gICB9O1xyXG4gKi9cblxuZXhwb3J0IGxldCBSZW5kZXJNb2RlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChSZW5kZXJNb2RlKSB7XG4gIFJlbmRlck1vZGVbUmVuZGVyTW9kZVtcIlJBWU1BUkNIXCJdID0gMF0gPSBcIlJBWU1BUkNIXCI7XG4gIFJlbmRlck1vZGVbUmVuZGVyTW9kZVtcIlBBVEhUUkFDRVwiXSA9IDFdID0gXCJQQVRIVFJBQ0VcIjtcbiAgUmVuZGVyTW9kZVtSZW5kZXJNb2RlW1wiU0xJQ0VcIl0gPSAyXSA9IFwiU0xJQ0VcIjtcbiAgcmV0dXJuIFJlbmRlck1vZGU7XG59KHt9KTtcblxuLyoqXHJcbiAqIFByb3ZpZGUgb3B0aW9ucyB0byBjb250cm9sIHRoZSB2aXN1YWwgYXBwZWFyYW5jZSBvZiBhIFZvbHVtZVxyXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBWb2x1bWVEaXNwbGF5T3B0aW9uc1xyXG4gKiBAcHJvcGVydHkge0FycmF5LjxWb2x1bWVDaGFubmVsRGlzcGxheU9wdGlvbnM+fSBjaGFubmVscyBhcnJheSBvZiBjaGFubmVsIGRpc3BsYXkgb3B0aW9uc1xyXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGVuc2l0eVxyXG4gKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXI+fSB0cmFuc2xhdGlvbiB4eXpcclxuICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyPn0gcm90YXRpb24geHl6IGFuZ2xlcyBpbiByYWRpYW5zXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXNrQ2hhbm5lbEluZGV4XHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXNrQWxwaGFcclxuICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyPn0gY2xpcEJvdW5kcyBbeG1pbiwgeG1heCwgeW1pbiwgeW1heCwgem1pbiwgem1heF0gYWxsIHJhbmdlIGZyb20gMCB0byAxIGFzIGEgcGVyY2VudGFnZSBvZiB0aGUgdm9sdW1lIG9uIHRoYXQgYXhpc1xyXG4gKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXI+fSBzY2FsZSB4eXogdm94ZWwgc2l6ZSBzY2FsaW5nXHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbWF4UHJvamVjdGlvbiB0cnVlIG9yIGZhbHNlIChyYXkgbWFyY2hpbmcpXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByZW5kZXJNb2RlIDAgZm9yIHJheW1hcmNoLCAxIGZvciBwYXRodHJhY2VcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IHNoYWRpbmdNZXRob2QgMCBmb3IgcGhhc2UsIDEgZm9yIGJyZGYsIDIgZm9yIGh5YnJpZCAocGF0aCB0cmFjZXIpXHJcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcj59IGdhbW1hIFttaW4sIG1heCwgc2NhbGVdXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwcmltYXJ5UmF5U3RlcFNpemUgaW4gdm94ZWxzXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzZWNvbmRhcnlSYXlTdGVwU2l6ZSBpbiB2b3hlbHNcclxuICogQHByb3BlcnR5IHtib29sZWFufSBzaG93Qm91bmRpbmdCb3ggdHJ1ZSBvciBmYWxzZVxyXG4gKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXI+fSBib3VuZGluZ0JveENvbG9yIHIsZyxiIGZvciBib3VuZGluZyBib3ggbGluZXNcclxuICogQGV4YW1wbGUgbGV0IG9wdGlvbnMgPSB7XHJcbiAgIH07XHJcbiAqL1xuXG5leHBvcnQgY29uc3QgaXNPcnRob2dyYXBoaWNDYW1lcmEgPSBkZWYgPT4gZGVmICYmIGRlZi5pc09ydGhvZ3JhcGhpY0NhbWVyYTtcbmV4cG9ydCBsZXQgVmlld3BvcnRDb3JuZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKFZpZXdwb3J0Q29ybmVyKSB7XG4gIFZpZXdwb3J0Q29ybmVyW1wiVE9QX0xFRlRcIl0gPSBcInRvcF9sZWZ0XCI7XG4gIFZpZXdwb3J0Q29ybmVyW1wiVE9QX1JJR0hUXCJdID0gXCJ0b3BfcmlnaHRcIjtcbiAgVmlld3BvcnRDb3JuZXJbXCJCT1RUT01fTEVGVFwiXSA9IFwiYm90dG9tX2xlZnRcIjtcbiAgVmlld3BvcnRDb3JuZXJbXCJCT1RUT01fUklHSFRcIl0gPSBcImJvdHRvbV9yaWdodFwiO1xuICByZXR1cm4gVmlld3BvcnRDb3JuZXI7XG59KHt9KTtcbmV4cG9ydCBjb25zdCBpc1RvcCA9IGNvcm5lciA9PiBjb3JuZXIgPT09IFZpZXdwb3J0Q29ybmVyLlRPUF9MRUZUIHx8IGNvcm5lciA9PT0gVmlld3BvcnRDb3JuZXIuVE9QX1JJR0hUO1xuZXhwb3J0IGNvbnN0IGlzUmlnaHQgPSBjb3JuZXIgPT4gY29ybmVyID09PSBWaWV3cG9ydENvcm5lci5UT1BfUklHSFQgfHwgY29ybmVyID09PSBWaWV3cG9ydENvcm5lci5CT1RUT01fUklHSFQ7XG5leHBvcnQgY29uc3QgREFUQVJBTkdFX1VJTlQ4ID0gWzAsIDI1NV07Il0sIm5hbWVzIjpbIkZVU0VfRElTQUJMRURfUkdCX0NPTE9SIiwiUmVuZGVyTW9kZSIsImlzT3J0aG9ncmFwaGljQ2FtZXJhIiwiZGVmIiwiVmlld3BvcnRDb3JuZXIiLCJpc1RvcCIsImNvcm5lciIsIlRPUF9MRUZUIiwiVE9QX1JJR0hUIiwiaXNSaWdodCIsIkJPVFRPTV9SSUdIVCIsIkRBVEFSQU5HRV9VSU5UOCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../volume-viewer/es/types.js\n");

/***/ }),

/***/ "../volume-viewer/es/utils/RequestQueue.js":
/*!*************************************************!*\
  !*** ../volume-viewer/es/utils/RequestQueue.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_REQUEST_CANCEL_REASON: () => (/* binding */ DEFAULT_REQUEST_CANCEL_REASON),\n/* harmony export */   \"default\": () => (/* binding */ RequestQueue)\n/* harmony export */ });\n/** Object format used when passing multiple requests to RequestQueue at once. */\n\nconst DEFAULT_REQUEST_CANCEL_REASON = \"request cancelled\";\n\n/**\r\n * Internal object interface used by RequestQueue to store request metadata and callbacks.\r\n */\n\n/**\r\n * Manages a queue of asynchronous requests with unique string keys, which can be added to or cancelled.\r\n * If redundant requests with the same key are issued, the request action will only be run once per key\r\n * while the original request is still in the queue.\r\n */\nclass RequestQueue {\n  /**\r\n   * The maximum number of requests that can be handled concurrently.\r\n   * Once reached, additional requests will be queued up to run once a running request completes.\r\n   */\n\n  /**\r\n   * The maximum number of requests that can be handled concurrently if only low-priority requests are waiting. Set\r\n   * lower than `concurrencyLimit` to always leave space for high-priority requests. Cannot be set higher than\r\n   * `concurrencyLimit`.\r\n   */\n\n  /** A queue of requests that are ready to be executed, in order of request time. */\n\n  /** A queue of low-priority tasks that are ready to be executed. `queue` must be empty before any of these tasks run. */\n\n  /** Stores all requests, even those that are currently active. */\n\n  /** Stores requests whose actions are currently being run. */\n\n  /**\r\n   * Creates a new RequestQueue.\r\n   * @param maxActiveRequests The maximum number of requests that will be handled concurrently. This is 10 by default.\r\n   * @param maxLowPriorityRequests The maximum number of low-priority requests that will be handled concurrently. Equal\r\n   *    to `maxActiveRequests` by default, but may be set lower to always leave space for new high-priority requests.\r\n   */\n  constructor(maxActiveRequests = 10, maxLowPriorityRequests = 5) {\n    this.allRequests = new Map();\n    this.activeRequests = new Set();\n    this.queue = [];\n    this.queueLowPriority = [];\n    this.maxActiveRequests = maxActiveRequests;\n    this.maxLowPriorityRequests = Math.min(maxActiveRequests, maxLowPriorityRequests);\n  }\n\n  /**\r\n   * Stores request metadata to the internal map of all pending requests.\r\n   * @param key string identifier of the request.\r\n   * @param requestAction callable function action of the request.\r\n   * @returns a reference to the new, registered RequestItem.\r\n   */\n  registerRequest(key, requestAction) {\n    // Create a new promise and store the resolve and reject callbacks for later.\n    // This lets us perform the actual action at a later point, when the request is at the\n    // front of the processing queue.\n    let promiseResolve, promiseReject;\n    const promise = new Promise((resolve, reject) => {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n    // Store the request data.\n    const requestItem = {\n      key: key,\n      action: requestAction,\n      resolve: promiseResolve,\n      reject: promiseReject,\n      promise\n    };\n    this.allRequests.set(key, requestItem);\n    return requestItem;\n  }\n\n  /**\r\n   * Moves a registered request into the processing queue, clearing any timeouts on the request.\r\n   * @param key string identifier of the request.\r\n   * @param lowPriority Whether this request should be added with low priority. False by default.\r\n   */\n  addRequestToQueue(key, lowPriority) {\n    // Check that this request is not cancelled.\n    if (this.allRequests.has(key)) {\n      // Clear the request timeout, if it has one, since it is being added to the queue.\n      const requestItem = this.allRequests.get(key);\n      if (requestItem && requestItem.timeoutId) {\n        clearTimeout(requestItem.timeoutId);\n        requestItem.timeoutId = undefined;\n      }\n      if (!this.queue.includes(key) && !this.queueLowPriority.includes(key)) {\n        // Add to queue and check if the request can be processed right away.\n        if (lowPriority) {\n          this.queueLowPriority.push(key);\n        } else {\n          this.queue.push(key);\n        }\n        this.dequeue();\n      }\n    }\n  }\n\n  /**\r\n   * Adds a request with a unique key to the queue, if it doesn't already exist.\r\n   * @param key The key used to track the request.\r\n   * @param requestAction Function that will be called to complete the request. The function\r\n   *  will be run only once per unique key while the request exists, and may be deferred by the\r\n   *  queue at any time.\r\n   * @param lowPriority Whether this request should be added with low priority. False by default.\r\n   * @param delayMs Minimum delay, in milliseconds, before this request should be executed.\r\n   *\r\n   * NOTE: Cancelling a request while the action is running WILL NOT stop the action. If this behavior is desired,\r\n   * actions must be responsible for checking the RequestQueue, determining if the request is still valid (e.g.\r\n   * using `.hasRequest()`), and stopping or returning early.\r\n   *\r\n   * @returns A promise that will resolve on completion of the request, or reject if the request is cancelled.\r\n   *  If multiple requests are issued with the same key, a promise for the first request will be returned\r\n   *  until the request is resolved or cancelled.\r\n   *  Note that the return type of the promise will match that of the first request's instance.\r\n   */\n  addRequest(key, requestAction, lowPriority = false, delayMs = 0) {\n    if (!this.allRequests.has(key)) {\n      // New request!\n      const requestItem = this.registerRequest(key, requestAction);\n      // If a delay is set, wait to add this to the queue.\n      if (delayMs > 0) {\n        const timeoutId = setTimeout(() => this.addRequestToQueue(key, lowPriority), delayMs);\n        // Save timeout information to request metadata\n        requestItem.timeoutId = timeoutId;\n      } else {\n        // No delay, add immediately\n        this.addRequestToQueue(key, lowPriority);\n      }\n    } else {\n      const lowPriorityIndex = this.queueLowPriority.indexOf(key);\n      if (lowPriorityIndex > -1 && !lowPriority) {\n        // This request is registered and queued, but is now being requested with high priority.\n        // Promote it to high priority.\n        this.queueLowPriority.splice(lowPriorityIndex, 1);\n        this.addRequestToQueue(key);\n      } else if (delayMs <= 0) {\n        // This request is registered, but is now being requested without a delay.\n        // Move into queue immediately if it's not already added, and clear any timeouts it may have.\n        this.addRequestToQueue(key, lowPriority);\n      }\n    }\n    const promise = this.allRequests.get(key)?.promise;\n    if (!promise) {\n      throw new Error(\"Found no promise to return when getting stored request data.\");\n    }\n    return promise;\n  }\n\n  /**\r\n   * Adds multiple requests to the queue, with an optional delay between each.\r\n   * @param requests An array of RequestItems, which include a key and a request action.\r\n   * @param lowPriority Whether these requests should be added with low priority. False by default.\r\n   * @param delayMs An optional minimum delay in milliseconds to be added between each request.\r\n   *  For example, a delay of 10 ms will cause the second request to be added to the processing queue\r\n   *  after 10 ms, the third to added after 20 ms, and so on. Set to 10 ms by default.\r\n   * @returns An array of promises corresponding to the provided requests. (i.e., the `i`th value\r\n   * of the returned array will be a Promise for the resolution of `requests[i]`). If a request\r\n   *  with a matching key is already pending, returns the promise for the initial request.\r\n   */\n  addRequests(requests, lowPriority = false, delayMs = 10) {\n    const promises = [];\n    for (let i = 0; i < requests.length; i++) {\n      const item = requests[i];\n      const promise = this.addRequest(item.key, item.requestAction, lowPriority, delayMs * i);\n      promises.push(promise);\n    }\n    return promises;\n  }\n\n  /**\r\n   * Attempts to remove and run the next queued request item, if resources are available.\r\n   * @returns true if a request was started, or false if there are too many\r\n   * requests already active.\r\n   */\n  async dequeue() {\n    const numRequests = this.activeRequests.size;\n    if (numRequests >= this.maxActiveRequests || this.queue.length === 0 && (numRequests >= this.maxLowPriorityRequests || this.queueLowPriority.length === 0)) {\n      return;\n    }\n    const requestKey = this.queue.shift() ?? this.queueLowPriority.shift();\n    if (!requestKey) {\n      return;\n    }\n    if (this.activeRequests.has(requestKey)) {\n      // This request is already active, try the next one instead. (this shouldn't happen)\n      this.dequeue();\n      return;\n    }\n    const requestItem = this.allRequests.get(requestKey);\n    if (!requestItem) {\n      return;\n    }\n    const key = requestItem.key;\n    // Mark that this request is active\n    this.activeRequests.add(key);\n    await requestItem.action().then(requestItem.resolve, requestItem.reject);\n    this.activeRequests.delete(key);\n    this.allRequests.delete(key);\n    this.dequeue();\n  }\n\n  /**\r\n   * Removes any request matching the provided key from the queue and rejects its promise.\r\n   * @param key The key that should be matched against.\r\n   * @param cancelReason A message or object that will be used as the promise rejection.\r\n   */\n  cancelRequest(key, cancelReason = DEFAULT_REQUEST_CANCEL_REASON) {\n    if (!this.allRequests.has(key)) {\n      return;\n    }\n    const requestItem = this.allRequests.get(key);\n    if (requestItem) {\n      if (requestItem.timeoutId) {\n        // Cancel requests that have not been queued yet.\n        clearTimeout(requestItem.timeoutId);\n      }\n      // Reject the request, then clear from the queue and known requests.\n      requestItem.reject(cancelReason);\n    }\n    const queueIndex = this.queue.indexOf(key);\n    if (queueIndex > -1) {\n      this.queue.splice(queueIndex, 1);\n    } else {\n      const lowPriorityIndex = this.queueLowPriority.indexOf(key);\n      if (lowPriorityIndex > -1) {\n        this.queueLowPriority.splice(lowPriorityIndex, 1);\n      }\n    }\n    this.allRequests.delete(key);\n    this.activeRequests.delete(key);\n  }\n\n  /**\r\n   * Rejects all request promises and clears the queue.\r\n   * @param cancelReason A message or object that will be used as the promise rejection.\r\n   */\n  cancelAllRequests(cancelReason = DEFAULT_REQUEST_CANCEL_REASON) {\n    // Clear the queue so we don't do extra work while filtering it\n    this.queue = [];\n    this.queueLowPriority = [];\n    for (const key of this.allRequests.keys()) {\n      this.cancelRequest(key, cancelReason);\n    }\n  }\n\n  /**\r\n   * Returns whether a request with the given key exists in the RequestQueue and is not cancelled.\r\n   * @param key the key to search for.\r\n   * @returns true if the request is in the RequestQueue.\r\n   */\n  hasRequest(key) {\n    return this.allRequests.has(key);\n  }\n\n  /**\r\n   * Returns whether the request with the given key is currently running (not waiting in the queue).\r\n   * @param key the key to search for.\r\n   * @returns true if the request is actively running.\r\n   */\n  requestRunning(key) {\n    return this.activeRequests.has(key);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/utils/RequestQueue.js\n");

/***/ }),

/***/ "../volume-viewer/es/utils/SubscribableRequestQueue.js":
/*!*************************************************************!*\
  !*** ../volume-viewer/es/utils/SubscribableRequestQueue.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SubscribableRequestQueue)\n/* harmony export */ });\n/* harmony import */ var _RequestQueue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RequestQueue.js */ \"../volume-viewer/es/utils/RequestQueue.js\");\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n/**\r\n * An extension of `RequestQueue` that adds a concept of \"subscribers,\" which may share references to a single request\r\n * or cancel their subscription without disrupting the request for other subscribers.\r\n */\nclass SubscribableRequestQueue {\n  /** The next unused subscriber ID. Increments whenever a subscriber is added. */\n\n  /**\r\n   * Map of subscribers keyed by ID. Subscribers store a map to all their subscriptions by request key.\r\n   * Subscribers are only useful as handles to cancel subscriptions early, so we only need to store rejecters here.\r\n   */\n\n  /** Map from \"inner\" request (managed by `queue`) to \"outer\" promises generated per-subscriber. */\n\n  /**\r\n   * Since `SubscribableRequestQueue` wraps `RequestQueue`, its constructor may either take the same arguments as the\r\n   * `RequestQueue` constructor and create a new `RequestQueue`, or it may take an existing `RequestQueue` to wrap.\r\n   */\n\n  constructor(maxActiveRequests, maxLowPriorityRequests) {\n    if (typeof maxActiveRequests === \"number\" || maxActiveRequests === undefined) {\n      this.queue = new _RequestQueue_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](maxActiveRequests, maxLowPriorityRequests);\n    } else {\n      this.queue = maxActiveRequests;\n    }\n    this.nextSubscriberId = 0;\n    this.subscribers = new Map();\n    this.requests = new Map();\n  }\n\n  /** Resolves all subscriptions to request `key` with `value` */\n  resolveAll(key, value) {\n    const requests = this.requests.get(key);\n    if (requests) {\n      for (const {\n        resolve,\n        subscriberId\n      } of requests) {\n        resolve(value);\n        this.subscribers.get(subscriberId)?.delete(key);\n      }\n      this.requests.delete(key);\n    }\n  }\n\n  /** Rejects all subscriptions to request `key` with `reason` */\n  rejectAll(key, reason) {\n    const requests = this.requests.get(key);\n    if (requests) {\n      for (const {\n        reject,\n        subscriberId\n      } of requests) {\n        reject(reason);\n        this.subscribers.get(subscriberId)?.delete(key);\n      }\n      this.requests.delete(key);\n    }\n  }\n\n  /** Adds a new request subscriber. Returns a unique ID to identify this subscriber. */\n  addSubscriber() {\n    const subscriberId = this.nextSubscriberId;\n    this.nextSubscriberId++;\n    this.subscribers.set(subscriberId, new Map());\n    return subscriberId;\n  }\n\n  /**\r\n   * Queues a new request, or adds a subscription if the request is already queued/running.\r\n   *\r\n   * If `subscriberId` is already subscribed to the request, this rejects the existing promise and returns a new one.\r\n   */\n  addRequest(key, subscriberId, requestAction, lowPriority, delayMs) {\n    // Create single underlying request if it does not yet exist\n    this.queue.addRequest(key, requestAction, lowPriority, delayMs).then(value => this.resolveAll(key, value)).catch(reason => this.rejectAll(key, reason));\n    if (!this.requests.has(key)) {\n      this.requests.set(key, []);\n    }\n\n    // Validate subscriber\n    if (subscriberId >= this.nextSubscriberId || subscriberId < 0) {\n      throw new Error(`SubscribableRequestQueue: subscriber id ${subscriberId} has not been registered`);\n    }\n    const subscriber = this.subscribers.get(subscriberId);\n    if (!subscriber) {\n      throw new Error(`SubscribableRequestQueue: subscriber id ${subscriberId} has been removed`);\n    }\n    const existingRequest = subscriber.get(key);\n    if (existingRequest) {\n      this.rejectSubscription(key, existingRequest, \"SubscribableRequestQueue: request re-queued while running\");\n    }\n\n    // Create promise and add to list of requests\n    return new Promise((resolve, reject) => {\n      this.requests.get(key)?.push({\n        resolve,\n        reject,\n        subscriberId\n      });\n      this.subscribers.get(subscriberId)?.set(key, reject);\n    });\n  }\n\n  /**\r\n   * Rejects a subscription and removes it from the list of subscriptions for a request, then cancels the underlying\r\n   * request if it is no longer subscribed and is not running already.\r\n   */\n  rejectSubscription(key, reject, cancelReason) {\n    // Reject the outer \"subscription\" promise\n    reject(cancelReason);\n\n    // Get the list of subscriptions for this request\n    const subscriptions = this.requests.get(key);\n    if (!subscriptions) {\n      // This should never happen\n      return;\n    }\n    // Remove this request subscription by ref equality to `reject`\n    const idx = subscriptions.findIndex(sub => sub.reject === reject);\n    if (idx >= 0) {\n      subscriptions.splice(idx, 1);\n    }\n\n    // Remove the underlying request if there are no more subscribers and the request is not already running\n    if (subscriptions.length < 1 && !this.queue.requestRunning(key)) {\n      this.queue.cancelRequest(key, cancelReason);\n      this.requests.delete(key);\n    }\n  }\n\n  /** Cancels a request subscription, and cancels the underlying request if it is no longer subscribed or running. */\n  cancelRequest(key, subscriberId, cancelReason) {\n    const subscriber = this.subscribers.get(subscriberId);\n    if (!subscriber) {\n      return false;\n    }\n    const reject = subscriber.get(key);\n    if (!reject) {\n      return false;\n    }\n    this.rejectSubscription(key, reject, cancelReason);\n    subscriber.delete(key);\n    return true;\n  }\n\n  /** Removes a subscriber and cancels its remaining subscriptions. */\n  removeSubscriber(subscriberId, cancelReason) {\n    const subscriptions = this.subscribers.get(subscriberId);\n    if (subscriptions) {\n      for (const [key, reject] of subscriptions.entries()) {\n        this.rejectSubscription(key, reject, cancelReason);\n      }\n      this.subscribers.delete(subscriberId);\n    }\n  }\n\n  /** Returns whether a request with the given `key` is running or waiting in the queue */\n  hasRequest(key) {\n    return this.queue.hasRequest(key);\n  }\n\n  /** Returns whether a request with the given `key` is running */\n  requestRunning(key) {\n    return this.queue.requestRunning(key);\n  }\n\n  /** Returns whether a subscriber with the given `subscriberId` exists */\n  hasSubscriber(subscriberId) {\n    return this.subscribers.has(subscriberId);\n  }\n\n  /** Returns whether a subscriber with the given `subscriberId` is subscribed to the request with the given `key` */\n  isSubscribed(subscriberId, key) {\n    return this.subscribers.get(subscriberId)?.has(key) ?? false;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/utils/SubscribableRequestQueue.js\n");

/***/ }),

/***/ "../volume-viewer/es/workers/VolumeLoadWorker.js":
/*!*******************************************************!*\
  !*** ../volume-viewer/es/workers/VolumeLoadWorker.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var serialize_error__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! serialize-error */ \"../volume-viewer/node_modules/serialize-error/index.js\");\n/* harmony import */ var _VolumeCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../VolumeCache.js */ \"../volume-viewer/es/VolumeCache.js\");\n/* harmony import */ var _loaders_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../loaders/index.js */ \"../volume-viewer/es/loaders/index.js\");\n/* harmony import */ var _loaders_VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../loaders/VolumeLoadError.js */ \"../volume-viewer/es/loaders/VolumeLoadError.js\");\n/* harmony import */ var _utils_RequestQueue_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/RequestQueue.js */ \"../volume-viewer/es/utils/RequestQueue.js\");\n/* harmony import */ var _utils_SubscribableRequestQueue_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/SubscribableRequestQueue.js */ \"../volume-viewer/es/utils/SubscribableRequestQueue.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types.js */ \"../volume-viewer/es/workers/types.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ \"../volume-viewer/es/workers/util.js\");\n\n\n\n\n\n\n\n\nlet cache = undefined;\nlet queue = undefined;\nlet subscribableQueue = undefined;\nlet loader = undefined;\nlet initialized = false;\nlet copyOnLoad = false;\nconst messageHandlers = {\n  [_types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerMsgType.INIT]: ({\n    maxCacheSize,\n    maxActiveRequests,\n    maxLowPriorityRequests\n  }) => {\n    if (!initialized) {\n      cache = new _VolumeCache_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](maxCacheSize);\n      queue = new _utils_RequestQueue_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](maxActiveRequests, maxLowPriorityRequests);\n      subscribableQueue = new _utils_SubscribableRequestQueue_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](queue);\n      initialized = true;\n    }\n    return Promise.resolve();\n  },\n  [_types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerMsgType.CREATE_LOADER]: async ({\n    path,\n    options\n  }) => {\n    const pathString = Array.isArray(path) ? path[0] : path;\n    const fileType = options?.fileType || (0,_loaders_index_js__WEBPACK_IMPORTED_MODULE_1__.pathToFileType)(pathString);\n    copyOnLoad = fileType === _loaders_index_js__WEBPACK_IMPORTED_MODULE_1__.VolumeFileFormat.JSON;\n    loader = await (0,_loaders_index_js__WEBPACK_IMPORTED_MODULE_1__.createVolumeLoader)(path, {\n      ...options,\n      cache,\n      queue: subscribableQueue\n    });\n    return loader !== undefined;\n  },\n  [_types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerMsgType.CREATE_VOLUME]: async loadSpec => {\n    if (loader === undefined) {\n      throw new _loaders_VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.VolumeLoadError(\"No loader created\");\n    }\n    return await loader.createImageInfo((0,_util_js__WEBPACK_IMPORTED_MODULE_6__.rebuildLoadSpec)(loadSpec));\n  },\n  [_types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerMsgType.LOAD_DIMS]: async loadSpec => {\n    if (loader === undefined) {\n      throw new _loaders_VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.VolumeLoadError(\"No loader created\");\n    }\n    return await loader.loadDims((0,_util_js__WEBPACK_IMPORTED_MODULE_6__.rebuildLoadSpec)(loadSpec));\n  },\n  [_types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerMsgType.LOAD_VOLUME_DATA]: ({\n    imageInfo,\n    loadSpec,\n    loaderId,\n    loadId\n  }) => {\n    if (loader === undefined) {\n      throw new _loaders_VolumeLoadError_js__WEBPACK_IMPORTED_MODULE_2__.VolumeLoadError(\"No loader created\");\n    }\n    return loader.loadRawChannelData((0,_util_js__WEBPACK_IMPORTED_MODULE_6__.rebuildImageInfo)(imageInfo), (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.rebuildLoadSpec)(loadSpec), (imageInfo, loadSpec) => {\n      const message = {\n        responseResult: _types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerResponseResult.EVENT,\n        eventType: _types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerEventType.METADATA_UPDATE,\n        loaderId,\n        loadId,\n        imageInfo,\n        loadSpec\n      };\n      self.postMessage(message);\n    }, (channelIndex, data, ranges, atlasDims) => {\n      const message = {\n        responseResult: _types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerResponseResult.EVENT,\n        eventType: _types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerEventType.CHANNEL_LOAD,\n        loaderId,\n        loadId,\n        channelIndex,\n        data,\n        ranges,\n        atlasDims\n      };\n      self.postMessage(message, copyOnLoad ? [] : data.map(d => d.buffer));\n    });\n  },\n  [_types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerMsgType.SET_PREFETCH_PRIORITY_DIRECTIONS]: directions => {\n    // Silently does nothing if the loader isn't an `OMEZarrLoader`\n    loader?.setPrefetchPriority(directions);\n    return Promise.resolve();\n  },\n  [_types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerMsgType.SYNCHRONIZE_MULTICHANNEL_LOADING]: syncChannels => {\n    loader?.syncMultichannelLoading(syncChannels);\n    return Promise.resolve();\n  }\n};\nself.onmessage = async ({\n  data\n}) => {\n  const {\n    msgId,\n    type,\n    payload\n  } = data;\n  let message;\n  try {\n    const response = await messageHandlers[type](payload);\n    message = {\n      responseResult: _types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerResponseResult.SUCCESS,\n      msgId,\n      type,\n      payload: response\n    };\n  } catch (e) {\n    message = {\n      responseResult: _types_js__WEBPACK_IMPORTED_MODULE_5__.WorkerResponseResult.ERROR,\n      msgId,\n      type,\n      payload: (0,serialize_error__WEBPACK_IMPORTED_MODULE_7__.serializeError)(e)\n    };\n  }\n  self.postMessage(message);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../volume-viewer/es/workers/VolumeLoadWorker.js\n");

/***/ }),

/***/ "../volume-viewer/es/workers/types.js":
/*!********************************************!*\
  !*** ../volume-viewer/es/workers/types.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WorkerEventType: () => (/* binding */ WorkerEventType),\n/* harmony export */   WorkerMsgType: () => (/* binding */ WorkerMsgType),\n/* harmony export */   WorkerResponseResult: () => (/* binding */ WorkerResponseResult)\n/* harmony export */ });\n/** The types of requests that can be made to the worker. Mostly corresponds to methods on `IVolumeLoader`. */\nlet WorkerMsgType = /*#__PURE__*/function (WorkerMsgType) {\n  WorkerMsgType[WorkerMsgType[\"INIT\"] = 0] = \"INIT\";\n  WorkerMsgType[WorkerMsgType[\"CREATE_LOADER\"] = 1] = \"CREATE_LOADER\";\n  WorkerMsgType[WorkerMsgType[\"CREATE_VOLUME\"] = 2] = \"CREATE_VOLUME\";\n  WorkerMsgType[WorkerMsgType[\"LOAD_DIMS\"] = 3] = \"LOAD_DIMS\";\n  WorkerMsgType[WorkerMsgType[\"LOAD_VOLUME_DATA\"] = 4] = \"LOAD_VOLUME_DATA\";\n  WorkerMsgType[WorkerMsgType[\"SET_PREFETCH_PRIORITY_DIRECTIONS\"] = 5] = \"SET_PREFETCH_PRIORITY_DIRECTIONS\";\n  WorkerMsgType[WorkerMsgType[\"SYNCHRONIZE_MULTICHANNEL_LOADING\"] = 6] = \"SYNCHRONIZE_MULTICHANNEL_LOADING\";\n  return WorkerMsgType;\n}({});\n\n/** The kind of response a worker can return - `SUCCESS`, `ERROR`, or `EVENT`. */\nlet WorkerResponseResult = /*#__PURE__*/function (WorkerResponseResult) {\n  WorkerResponseResult[WorkerResponseResult[\"SUCCESS\"] = 0] = \"SUCCESS\";\n  WorkerResponseResult[WorkerResponseResult[\"ERROR\"] = 1] = \"ERROR\";\n  WorkerResponseResult[WorkerResponseResult[\"EVENT\"] = 2] = \"EVENT\";\n  return WorkerResponseResult;\n}({});\n\n/** The kind of events that can occur when loading */\nlet WorkerEventType = /*#__PURE__*/function (WorkerEventType) {\n  WorkerEventType[WorkerEventType[\"METADATA_UPDATE\"] = 0] = \"METADATA_UPDATE\";\n  WorkerEventType[WorkerEventType[\"CHANNEL_LOAD\"] = 1] = \"CHANNEL_LOAD\";\n  return WorkerEventType;\n}({});\n\n/** All messages to/from a worker carry a `msgId`, a `type`, and a `payload` (whose type is determined by `type`). */\n\n/** Maps each `WorkerMsgType` to the type of the payload of requests of that type. */\n\n/** Maps each `WorkerMsgType` to the type of the payload of responses of that type. */\n\n/** Event for when a batch of channel data loads. */\n\n/** Event for when metadata updates. */\n\n/** All valid types of worker requests, with some `WorkerMsgType` and a matching payload type. */\n\n/** All valid types of worker responses: `SUCCESS` with a matching payload, `ERROR` with a message, or an `EVENT`. *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy93b3JrZXJzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ08sSUFBSUEsYUFBYSxHQUFHLGFBQWEsVUFBVUEsYUFBYSxFQUFFO0VBQy9EQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNO0VBQ2pEQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxlQUFlO0VBQ25FQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxlQUFlO0VBQ25FQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxXQUFXO0VBQzNEQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLGtCQUFrQjtFQUN6RUEsYUFBYSxDQUFDQSxhQUFhLENBQUMsa0NBQWtDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxrQ0FBa0M7RUFDekdBLGFBQWEsQ0FBQ0EsYUFBYSxDQUFDLGtDQUFrQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsa0NBQWtDO0VBQ3pHLE9BQU9BLGFBQWE7QUFDdEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVMO0FBQ08sSUFBSUMsb0JBQW9CLEdBQUcsYUFBYSxVQUFVQSxvQkFBb0IsRUFBRTtFQUM3RUEsb0JBQW9CLENBQUNBLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVM7RUFDckVBLG9CQUFvQixDQUFDQSxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxPQUFPO0VBQ2pFQSxvQkFBb0IsQ0FBQ0Esb0JBQW9CLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTztFQUNqRSxPQUFPQSxvQkFBb0I7QUFDN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVMO0FBQ08sSUFBSUMsZUFBZSxHQUFHLGFBQWEsVUFBVUEsZUFBZSxFQUFFO0VBQ25FQSxlQUFlLENBQUNBLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLGlCQUFpQjtFQUMzRUEsZUFBZSxDQUFDQSxlQUFlLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsY0FBYztFQUNyRSxPQUFPQSxlQUFlO0FBQ3hCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFTDs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BhaWNzL3dlYi0zZC12aWV3ZXIvLi4vdm9sdW1lLXZpZXdlci9lcy93b3JrZXJzL3R5cGVzLmpzP2Y3YjciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFRoZSB0eXBlcyBvZiByZXF1ZXN0cyB0aGF0IGNhbiBiZSBtYWRlIHRvIHRoZSB3b3JrZXIuIE1vc3RseSBjb3JyZXNwb25kcyB0byBtZXRob2RzIG9uIGBJVm9sdW1lTG9hZGVyYC4gKi9cbmV4cG9ydCBsZXQgV29ya2VyTXNnVHlwZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoV29ya2VyTXNnVHlwZSkge1xuICBXb3JrZXJNc2dUeXBlW1dvcmtlck1zZ1R5cGVbXCJJTklUXCJdID0gMF0gPSBcIklOSVRcIjtcbiAgV29ya2VyTXNnVHlwZVtXb3JrZXJNc2dUeXBlW1wiQ1JFQVRFX0xPQURFUlwiXSA9IDFdID0gXCJDUkVBVEVfTE9BREVSXCI7XG4gIFdvcmtlck1zZ1R5cGVbV29ya2VyTXNnVHlwZVtcIkNSRUFURV9WT0xVTUVcIl0gPSAyXSA9IFwiQ1JFQVRFX1ZPTFVNRVwiO1xuICBXb3JrZXJNc2dUeXBlW1dvcmtlck1zZ1R5cGVbXCJMT0FEX0RJTVNcIl0gPSAzXSA9IFwiTE9BRF9ESU1TXCI7XG4gIFdvcmtlck1zZ1R5cGVbV29ya2VyTXNnVHlwZVtcIkxPQURfVk9MVU1FX0RBVEFcIl0gPSA0XSA9IFwiTE9BRF9WT0xVTUVfREFUQVwiO1xuICBXb3JrZXJNc2dUeXBlW1dvcmtlck1zZ1R5cGVbXCJTRVRfUFJFRkVUQ0hfUFJJT1JJVFlfRElSRUNUSU9OU1wiXSA9IDVdID0gXCJTRVRfUFJFRkVUQ0hfUFJJT1JJVFlfRElSRUNUSU9OU1wiO1xuICBXb3JrZXJNc2dUeXBlW1dvcmtlck1zZ1R5cGVbXCJTWU5DSFJPTklaRV9NVUxUSUNIQU5ORUxfTE9BRElOR1wiXSA9IDZdID0gXCJTWU5DSFJPTklaRV9NVUxUSUNIQU5ORUxfTE9BRElOR1wiO1xuICByZXR1cm4gV29ya2VyTXNnVHlwZTtcbn0oe30pO1xuXG4vKiogVGhlIGtpbmQgb2YgcmVzcG9uc2UgYSB3b3JrZXIgY2FuIHJldHVybiAtIGBTVUNDRVNTYCwgYEVSUk9SYCwgb3IgYEVWRU5UYC4gKi9cbmV4cG9ydCBsZXQgV29ya2VyUmVzcG9uc2VSZXN1bHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKFdvcmtlclJlc3BvbnNlUmVzdWx0KSB7XG4gIFdvcmtlclJlc3BvbnNlUmVzdWx0W1dvcmtlclJlc3BvbnNlUmVzdWx0W1wiU1VDQ0VTU1wiXSA9IDBdID0gXCJTVUNDRVNTXCI7XG4gIFdvcmtlclJlc3BvbnNlUmVzdWx0W1dvcmtlclJlc3BvbnNlUmVzdWx0W1wiRVJST1JcIl0gPSAxXSA9IFwiRVJST1JcIjtcbiAgV29ya2VyUmVzcG9uc2VSZXN1bHRbV29ya2VyUmVzcG9uc2VSZXN1bHRbXCJFVkVOVFwiXSA9IDJdID0gXCJFVkVOVFwiO1xuICByZXR1cm4gV29ya2VyUmVzcG9uc2VSZXN1bHQ7XG59KHt9KTtcblxuLyoqIFRoZSBraW5kIG9mIGV2ZW50cyB0aGF0IGNhbiBvY2N1ciB3aGVuIGxvYWRpbmcgKi9cbmV4cG9ydCBsZXQgV29ya2VyRXZlbnRUeXBlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChXb3JrZXJFdmVudFR5cGUpIHtcbiAgV29ya2VyRXZlbnRUeXBlW1dvcmtlckV2ZW50VHlwZVtcIk1FVEFEQVRBX1VQREFURVwiXSA9IDBdID0gXCJNRVRBREFUQV9VUERBVEVcIjtcbiAgV29ya2VyRXZlbnRUeXBlW1dvcmtlckV2ZW50VHlwZVtcIkNIQU5ORUxfTE9BRFwiXSA9IDFdID0gXCJDSEFOTkVMX0xPQURcIjtcbiAgcmV0dXJuIFdvcmtlckV2ZW50VHlwZTtcbn0oe30pO1xuXG4vKiogQWxsIG1lc3NhZ2VzIHRvL2Zyb20gYSB3b3JrZXIgY2FycnkgYSBgbXNnSWRgLCBhIGB0eXBlYCwgYW5kIGEgYHBheWxvYWRgICh3aG9zZSB0eXBlIGlzIGRldGVybWluZWQgYnkgYHR5cGVgKS4gKi9cblxuLyoqIE1hcHMgZWFjaCBgV29ya2VyTXNnVHlwZWAgdG8gdGhlIHR5cGUgb2YgdGhlIHBheWxvYWQgb2YgcmVxdWVzdHMgb2YgdGhhdCB0eXBlLiAqL1xuXG4vKiogTWFwcyBlYWNoIGBXb3JrZXJNc2dUeXBlYCB0byB0aGUgdHlwZSBvZiB0aGUgcGF5bG9hZCBvZiByZXNwb25zZXMgb2YgdGhhdCB0eXBlLiAqL1xuXG4vKiogRXZlbnQgZm9yIHdoZW4gYSBiYXRjaCBvZiBjaGFubmVsIGRhdGEgbG9hZHMuICovXG5cbi8qKiBFdmVudCBmb3Igd2hlbiBtZXRhZGF0YSB1cGRhdGVzLiAqL1xuXG4vKiogQWxsIHZhbGlkIHR5cGVzIG9mIHdvcmtlciByZXF1ZXN0cywgd2l0aCBzb21lIGBXb3JrZXJNc2dUeXBlYCBhbmQgYSBtYXRjaGluZyBwYXlsb2FkIHR5cGUuICovXG5cbi8qKiBBbGwgdmFsaWQgdHlwZXMgb2Ygd29ya2VyIHJlc3BvbnNlczogYFNVQ0NFU1NgIHdpdGggYSBtYXRjaGluZyBwYXlsb2FkLCBgRVJST1JgIHdpdGggYSBtZXNzYWdlLCBvciBhbiBgRVZFTlRgLiAqLyJdLCJuYW1lcyI6WyJXb3JrZXJNc2dUeXBlIiwiV29ya2VyUmVzcG9uc2VSZXN1bHQiLCJXb3JrZXJFdmVudFR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../volume-viewer/es/workers/types.js\n");

/***/ }),

/***/ "../volume-viewer/es/workers/util.js":
/*!*******************************************!*\
  !*** ../volume-viewer/es/workers/util.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rebuildImageInfo: () => (/* binding */ rebuildImageInfo),\n/* harmony export */   rebuildLoadSpec: () => (/* binding */ rebuildLoadSpec)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"../volume-viewer/node_modules/three/build/three.module.js\");\n\n/** Recreates a `LoadSpec` that has just been sent to/from a worker to restore three.js object prototypes */\nfunction rebuildLoadSpec(spec) {\n  return {\n    ...spec,\n    subregion: new three__WEBPACK_IMPORTED_MODULE_0__.Box3(new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().copy(spec.subregion.min), new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().copy(spec.subregion.max))\n  };\n}\n\n/** Recreates an `ImageInfo` that has just been sent to/from a worker to restore three.js object prototypes */\nfunction rebuildImageInfo(imageInfo) {\n  return {\n    ...imageInfo,\n    originalSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().copy(imageInfo.originalSize),\n    atlasTileDims: new three__WEBPACK_IMPORTED_MODULE_0__.Vector2().copy(imageInfo.atlasTileDims),\n    volumeSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().copy(imageInfo.volumeSize),\n    subregionSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().copy(imageInfo.subregionSize),\n    subregionOffset: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().copy(imageInfo.subregionOffset),\n    physicalPixelSize: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().copy(imageInfo.physicalPixelSize),\n    transform: {\n      translation: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().copy(imageInfo.transform.translation),\n      rotation: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().copy(imageInfo.transform.rotation)\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdm9sdW1lLXZpZXdlci9lcy93b3JrZXJzL3V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQy9DO0FBQ08sU0FBU0csZUFBZUEsQ0FBQ0MsSUFBSSxFQUFFO0VBQ3BDLE9BQU87SUFDTCxHQUFHQSxJQUFJO0lBQ1BDLFNBQVMsRUFBRSxJQUFJTCx1Q0FBSSxDQUFDLElBQUlFLDBDQUFPLENBQUMsQ0FBQyxDQUFDSSxJQUFJLENBQUNGLElBQUksQ0FBQ0MsU0FBUyxDQUFDRSxHQUFHLENBQUMsRUFBRSxJQUFJTCwwQ0FBTyxDQUFDLENBQUMsQ0FBQ0ksSUFBSSxDQUFDRixJQUFJLENBQUNDLFNBQVMsQ0FBQ0csR0FBRyxDQUFDO0VBQ3BHLENBQUM7QUFDSDs7QUFFQTtBQUNPLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsU0FBUyxFQUFFO0VBQzFDLE9BQU87SUFDTCxHQUFHQSxTQUFTO0lBQ1pDLFlBQVksRUFBRSxJQUFJVCwwQ0FBTyxDQUFDLENBQUMsQ0FBQ0ksSUFBSSxDQUFDSSxTQUFTLENBQUNDLFlBQVksQ0FBQztJQUN4REMsYUFBYSxFQUFFLElBQUlYLDBDQUFPLENBQUMsQ0FBQyxDQUFDSyxJQUFJLENBQUNJLFNBQVMsQ0FBQ0UsYUFBYSxDQUFDO0lBQzFEQyxVQUFVLEVBQUUsSUFBSVgsMENBQU8sQ0FBQyxDQUFDLENBQUNJLElBQUksQ0FBQ0ksU0FBUyxDQUFDRyxVQUFVLENBQUM7SUFDcERDLGFBQWEsRUFBRSxJQUFJWiwwQ0FBTyxDQUFDLENBQUMsQ0FBQ0ksSUFBSSxDQUFDSSxTQUFTLENBQUNJLGFBQWEsQ0FBQztJQUMxREMsZUFBZSxFQUFFLElBQUliLDBDQUFPLENBQUMsQ0FBQyxDQUFDSSxJQUFJLENBQUNJLFNBQVMsQ0FBQ0ssZUFBZSxDQUFDO0lBQzlEQyxpQkFBaUIsRUFBRSxJQUFJZCwwQ0FBTyxDQUFDLENBQUMsQ0FBQ0ksSUFBSSxDQUFDSSxTQUFTLENBQUNNLGlCQUFpQixDQUFDO0lBQ2xFQyxTQUFTLEVBQUU7TUFDVEMsV0FBVyxFQUFFLElBQUloQiwwQ0FBTyxDQUFDLENBQUMsQ0FBQ0ksSUFBSSxDQUFDSSxTQUFTLENBQUNPLFNBQVMsQ0FBQ0MsV0FBVyxDQUFDO01BQ2hFQyxRQUFRLEVBQUUsSUFBSWpCLDBDQUFPLENBQUMsQ0FBQyxDQUFDSSxJQUFJLENBQUNJLFNBQVMsQ0FBQ08sU0FBUyxDQUFDRSxRQUFRO0lBQzNEO0VBQ0YsQ0FBQztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFpY3Mvd2ViLTNkLXZpZXdlci8uLi92b2x1bWUtdmlld2VyL2VzL3dvcmtlcnMvdXRpbC5qcz8zYWEzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJveDMsIFZlY3RvcjIsIFZlY3RvcjMgfSBmcm9tIFwidGhyZWVcIjtcbi8qKiBSZWNyZWF0ZXMgYSBgTG9hZFNwZWNgIHRoYXQgaGFzIGp1c3QgYmVlbiBzZW50IHRvL2Zyb20gYSB3b3JrZXIgdG8gcmVzdG9yZSB0aHJlZS5qcyBvYmplY3QgcHJvdG90eXBlcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYnVpbGRMb2FkU3BlYyhzcGVjKSB7XG4gIHJldHVybiB7XG4gICAgLi4uc3BlYyxcbiAgICBzdWJyZWdpb246IG5ldyBCb3gzKG5ldyBWZWN0b3IzKCkuY29weShzcGVjLnN1YnJlZ2lvbi5taW4pLCBuZXcgVmVjdG9yMygpLmNvcHkoc3BlYy5zdWJyZWdpb24ubWF4KSlcbiAgfTtcbn1cblxuLyoqIFJlY3JlYXRlcyBhbiBgSW1hZ2VJbmZvYCB0aGF0IGhhcyBqdXN0IGJlZW4gc2VudCB0by9mcm9tIGEgd29ya2VyIHRvIHJlc3RvcmUgdGhyZWUuanMgb2JqZWN0IHByb3RvdHlwZXMgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWJ1aWxkSW1hZ2VJbmZvKGltYWdlSW5mbykge1xuICByZXR1cm4ge1xuICAgIC4uLmltYWdlSW5mbyxcbiAgICBvcmlnaW5hbFNpemU6IG5ldyBWZWN0b3IzKCkuY29weShpbWFnZUluZm8ub3JpZ2luYWxTaXplKSxcbiAgICBhdGxhc1RpbGVEaW1zOiBuZXcgVmVjdG9yMigpLmNvcHkoaW1hZ2VJbmZvLmF0bGFzVGlsZURpbXMpLFxuICAgIHZvbHVtZVNpemU6IG5ldyBWZWN0b3IzKCkuY29weShpbWFnZUluZm8udm9sdW1lU2l6ZSksXG4gICAgc3VicmVnaW9uU2l6ZTogbmV3IFZlY3RvcjMoKS5jb3B5KGltYWdlSW5mby5zdWJyZWdpb25TaXplKSxcbiAgICBzdWJyZWdpb25PZmZzZXQ6IG5ldyBWZWN0b3IzKCkuY29weShpbWFnZUluZm8uc3VicmVnaW9uT2Zmc2V0KSxcbiAgICBwaHlzaWNhbFBpeGVsU2l6ZTogbmV3IFZlY3RvcjMoKS5jb3B5KGltYWdlSW5mby5waHlzaWNhbFBpeGVsU2l6ZSksXG4gICAgdHJhbnNmb3JtOiB7XG4gICAgICB0cmFuc2xhdGlvbjogbmV3IFZlY3RvcjMoKS5jb3B5KGltYWdlSW5mby50cmFuc2Zvcm0udHJhbnNsYXRpb24pLFxuICAgICAgcm90YXRpb246IG5ldyBWZWN0b3IzKCkuY29weShpbWFnZUluZm8udHJhbnNmb3JtLnJvdGF0aW9uKVxuICAgIH1cbiAgfTtcbn0iXSwibmFtZXMiOlsiQm94MyIsIlZlY3RvcjIiLCJWZWN0b3IzIiwicmVidWlsZExvYWRTcGVjIiwic3BlYyIsInN1YnJlZ2lvbiIsImNvcHkiLCJtaW4iLCJtYXgiLCJyZWJ1aWxkSW1hZ2VJbmZvIiwiaW1hZ2VJbmZvIiwib3JpZ2luYWxTaXplIiwiYXRsYXNUaWxlRGltcyIsInZvbHVtZVNpemUiLCJzdWJyZWdpb25TaXplIiwic3VicmVnaW9uT2Zmc2V0IiwicGh5c2ljYWxQaXhlbFNpemUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2xhdGlvbiIsInJvdGF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../volume-viewer/es/workers/util.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-volume-viewer_node_modules_zarrita_core_dist_src_errors_js-volume-viewer_node_modules-4b02bd","vendors-volume-viewer_node_modules_zarrita_core_dist_src_open_js-volume-viewer_node_modules_z-5b7efc"], () => (__webpack_require__("../volume-viewer/es/workers/VolumeLoadWorker.js")))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get mini-css chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.miniCssF = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return undefined;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/importScripts chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = self.location + "";
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "already loaded"
/******/ 		var installedChunks = {
/******/ 			"volume-viewer_es_workers_VolumeLoadWorker_js": 1
/******/ 		};
/******/ 		
/******/ 		// importScripts chunk loading
/******/ 		var installChunk = (data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			while(chunkIds.length)
/******/ 				installedChunks[chunkIds.pop()] = 1;
/******/ 			parentChunkLoadingFunction(data);
/******/ 		};
/******/ 		__webpack_require__.f.i = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					importScripts(__webpack_require__.p + __webpack_require__.u(chunkId));
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk_aics_web_3d_viewer"] = self["webpackChunk_aics_web_3d_viewer"] || [];
/******/ 		var parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);
/******/ 		chunkLoadingGlobal.push = installChunk;
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			return Promise.all([
/******/ 				__webpack_require__.e("vendors-volume-viewer_node_modules_zarrita_core_dist_src_errors_js-volume-viewer_node_modules-4b02bd"),
/******/ 				__webpack_require__.e("vendors-volume-viewer_node_modules_zarrita_core_dist_src_open_js-volume-viewer_node_modules_z-5b7efc")
/******/ 			]).then(next);
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	
/******/ })()
;